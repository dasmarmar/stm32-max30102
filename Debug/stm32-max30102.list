
stm32-max30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006500  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006928  08006928  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006930  08006930  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000078  080069b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  080069b0  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010250  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000232f  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d58  00000000  00000000  00032628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00033380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000243c2  00000000  00000000  00033fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd14  00000000  00000000  0005839a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7ae6  00000000  00000000  000640ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bb94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd4  00000000  00000000  0013bc10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006698 	.word	0x08006698

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006698 	.word	0x08006698

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b08b      	sub	sp, #44	; 0x2c
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f62:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f66:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000f82:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f86:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	f107 0218 	add.w	r2, r7, #24
 8000f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fa2:	6a3a      	ldr	r2, [r7, #32]
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	ee07 2a10 	vmov	s14, r2
 8000faa:	ee07 3a90 	vmov	s15, r3
}
 8000fae:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb2:	eef0 0a67 	vmov.f32	s1, s15
 8000fb6:	372c      	adds	r7, #44	; 0x2c
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fca:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fac7 	bl	8000568 <__aeabi_f2d>
 8000fda:	a319      	add	r3, pc, #100	; (adr r3, 8001040 <lowPassButterworthFilter+0x80>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fb1a 	bl	8000618 <__aeabi_dmul>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	4625      	mov	r5, r4
 8000fea:	461c      	mov	r4, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fab9 	bl	8000568 <__aeabi_f2d>
 8000ff6:	a314      	add	r3, pc, #80	; (adr r3, 8001048 <lowPassButterworthFilter+0x88>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fb0c 	bl	8000618 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	f7ff f950 	bl	80002ac <__adddf3>
 800100c:	4603      	mov	r3, r0
 800100e:	460c      	mov	r4, r1
 8001010:	4618      	mov	r0, r3
 8001012:	4621      	mov	r1, r4
 8001014:	f7ff fdd0 	bl	8000bb8 <__aeabi_d2f>
 8001018:	4602      	mov	r2, r0
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	605a      	str	r2, [r3, #4]

    //Fs = 100Hz and Fc = 4Hz
    //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	ed93 7a00 	vldr	s14, [r3]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	edd3 7a01 	vldr	s15, [r3, #4]
 800102a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bdb0      	pop	{r4, r5, r7, pc}
 800103c:	f3af 8000 	nop.w
 8001040:	5e7c4548 	.word	0x5e7c4548
 8001044:	3fcf63ef 	.word	0x3fcf63ef
 8001048:	50c1dd5c 	.word	0x50c1dd5c
 800104c:	3fe04e08 	.word	0x3fe04e08

08001050 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0a01 	vstr	s0, [r7, #4]
 800105a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  filterValues->values[filterValues->index] = M;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  filterValues->index++;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b8:	3301      	adds	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <meanDiff+0xe0>)
 80010ca:	fba3 1302 	umull	r1, r3, r3, r2
 80010ce:	08d9      	lsrs	r1, r3, #3
 80010d0:	460b      	mov	r3, r1
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	1a5b      	subs	r3, r3, r1
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010e6:	2b0e      	cmp	r3, #14
 80010e8:	d807      	bhi.n	80010fa <meanDiff+0xaa>
    filterValues->count++;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  avg = filterValues->sum / filterValues->count;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001116:	ed97 7a03 	vldr	s14, [r7, #12]
 800111a:	edd7 7a01 	vldr	s15, [r7, #4]
 800111e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	88888889 	.word	0x88888889

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b08e      	sub	sp, #56	; 0x38
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f001 fac7 	bl	80026cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f85b 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f000 f985 	bl	8001450 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001146:	f000 f901 	bl	800134c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800114a:	f000 f953 	bl	80013f4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800114e:	f000 f8bd 	bl	80012cc <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001152:	f000 f925 	bl	80013a0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  I2C_Init();
 8001156:	f000 faad 	bl	80016b4 <I2C_Init>
  uartInit();
 800115a:	f001 fa07 	bl	800256c <uartInit>
  FIFO_LED_DATA fifoLedData;
  long currentMillis = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  long lastMillis = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  pulseOximeter_resetRegisters();
 8001166:	f000 fb7b 	bl	8001860 <pulseOximeter_resetRegisters>

  // Setup up MAX30102 FIFO registers
  pulseOximeter_initFifo();
 800116a:	f000 fc5d 	bl	8001a28 <pulseOximeter_initFifo>

  // Set sampling rate to 100MSPS and
  // pulse width to 411us
  // See DataSheet for available
  // sampling rate/pulse width combinations
  pulseOximeter_setSampleRate(_100SPS);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fbd0 	bl	8001914 <pulseOximeter_setSampleRate>
  pulseOximeter_setPulseWidth(_411_US);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 fbfb 	bl	8001970 <pulseOximeter_setPulseWidth>

  // Set Red/IR Led current
  // 0 - 51mA maximum
  pulseOximeter_setLedCurrent(RED_LED, 50);
 800117a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80011f0 <main+0xbc>
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fb94 	bl	80018ac <pulseOximeter_setLedCurrent>
  pulseOximeter_setLedCurrent(IR_LED, 5);
 8001184:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001188:	2002      	movs	r0, #2
 800118a:	f000 fb8f 	bl	80018ac <pulseOximeter_setLedCurrent>

  // Set FIFO registers to zero
  pulseOximeter_resetFifo();
 800118e:	f000 fc3b 	bl	8001a08 <pulseOximeter_resetFifo>
  // Set the Measurement Mode
  // Measurement Modes:
  // HEART_RATE - only Red Led active
  // SPO2 - Both IR & Red Led active
  // MULTI_LED - Both led's active (timing can be configured; see DataSheet)
  pulseOximeter_setMeasurementMode(SPO2);
 8001192:	2001      	movs	r0, #1
 8001194:	f000 fb1c 	bl	80017d0 <pulseOximeter_setMeasurementMode>

  currentMillis = millis();
 8001198:	f001 f9ca 	bl	8002530 <millis>
 800119c:	4603      	mov	r3, r0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
		  }

	  }else{

		  // Read FIFO LED Data
		  fifoLedData = pulseOximeter_readFifo();
 80011a0:	f000 fc4e 	bl	8001a40 <pulseOximeter_readFifo>
 80011a4:	4603      	mov	r3, r0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		  // Get BPM/SpO2 readings
		  pulseOximeter = pulseOximeter_update(fifoLedData);
 80011a8:	4c12      	ldr	r4, [pc, #72]	; (80011f4 <main+0xc0>)
 80011aa:	463b      	mov	r3, r7
 80011ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fcdc 	bl	8001b6c <pulseOximeter_update>
 80011b4:	4625      	mov	r5, r4
 80011b6:	463c      	mov	r4, r7
 80011b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011c4:	e885 0003 	stmia.w	r5, {r0, r1}

		  pulseOximeter_resetFifo();
 80011c8:	f000 fc1e 	bl	8001a08 <pulseOximeter_resetFifo>

		  // Small delay
		  HAL_Delay(10);
 80011cc:	200a      	movs	r0, #10
 80011ce:	f001 faef 	bl	80027b0 <HAL_Delay>
	  }

	  // Display the data over the built in USB
	  // If available; check board specs
	  // use terminal program and set BAUD = 115200
	  currentMillis = millis();
 80011d2:	f001 f9ad 	bl	8002530 <millis>
 80011d6:	4603      	mov	r3, r0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
	  if( currentMillis - lastMillis > 1000 )
 80011da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011e4:	dddc      	ble.n	80011a0 <main+0x6c>
	  {
		  pulseOximeter_displayData();
 80011e6:	f000 ffb5 	bl	8002154 <pulseOximeter_displayData>
		  lastMillis = currentMillis;
 80011ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
	  if( PUSLE_OXIMETER_INTERRUPT == 1 )
 80011ee:	e7d7      	b.n	80011a0 <main+0x6c>
 80011f0:	42480000 	.word	0x42480000
 80011f4:	20000098 	.word	0x20000098

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f004 faf2 	bl	80057f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <SystemClock_Config+0xcc>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <SystemClock_Config+0xd0>)
 8001242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001258:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800126c:	23a8      	movs	r3, #168	; 0xa8
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001274:	2307      	movs	r3, #7
 8001276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fec9 	bl	8004014 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001288:	f000 fa10 	bl	80016ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001298:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2105      	movs	r1, #5
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 f922 	bl	80044f4 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b6:	f000 f9f9 	bl	80016ac <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_I2C1_Init+0x74>)
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <MX_I2C1_Init+0x78>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_I2C1_Init+0x74>)
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <MX_I2C1_Init+0x7c>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_I2C1_Init+0x74>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_I2C1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_I2C1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_I2C1_Init+0x74>)
 800130a:	f001 fd61 	bl	8002dd0 <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 f9ca 	bl	80016ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <MX_I2C1_Init+0x74>)
 800131c:	f002 fce1 	bl	8003ce2 <HAL_I2CEx_ConfigAnalogFilter>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001326:	f000 f9c1 	bl	80016ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C1_Init+0x74>)
 800132e:	f002 fd14 	bl	8003d5a <HAL_I2CEx_ConfigDigitalFilter>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001338:	f000 f9b8 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001d4 	.word	0x200001d4
 8001344:	40005400 	.word	0x40005400
 8001348:	000186a0 	.word	0x000186a0

0800134c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART3_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001384:	f003 faa8 	bl	80048d8 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f000 f98d 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000194 	.word	0x20000194
 800139c:	40004800 	.word	0x40004800

080013a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART6_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013d8:	f003 fa7e 	bl	80048d8 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f963 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000630 	.word	0x20000630
 80013f0:	40011400 	.word	0x40011400

080013f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001402:	2204      	movs	r2, #4
 8001404:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001408:	2202      	movs	r2, #2
 800140a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001414:	2202      	movs	r2, #2
 8001416:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141a:	2201      	movs	r2, #1
 800141c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142c:	2201      	movs	r2, #1
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	f002 fcce 	bl	8003dd8 <HAL_PCD_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 f933 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000228 	.word	0x20000228

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <MX_GPIO_Init+0x214>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a7d      	ldr	r2, [pc, #500]	; (8001664 <MX_GPIO_Init+0x214>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <MX_GPIO_Init+0x214>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	4b77      	ldr	r3, [pc, #476]	; (8001664 <MX_GPIO_Init+0x214>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a76      	ldr	r2, [pc, #472]	; (8001664 <MX_GPIO_Init+0x214>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <MX_GPIO_Init+0x214>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b70      	ldr	r3, [pc, #448]	; (8001664 <MX_GPIO_Init+0x214>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a6f      	ldr	r2, [pc, #444]	; (8001664 <MX_GPIO_Init+0x214>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <MX_GPIO_Init+0x214>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b69      	ldr	r3, [pc, #420]	; (8001664 <MX_GPIO_Init+0x214>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a68      	ldr	r2, [pc, #416]	; (8001664 <MX_GPIO_Init+0x214>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b66      	ldr	r3, [pc, #408]	; (8001664 <MX_GPIO_Init+0x214>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b62      	ldr	r3, [pc, #392]	; (8001664 <MX_GPIO_Init+0x214>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a61      	ldr	r2, [pc, #388]	; (8001664 <MX_GPIO_Init+0x214>)
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <MX_GPIO_Init+0x214>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <MX_GPIO_Init+0x214>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a5a      	ldr	r2, [pc, #360]	; (8001664 <MX_GPIO_Init+0x214>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b58      	ldr	r3, [pc, #352]	; (8001664 <MX_GPIO_Init+0x214>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <MX_GPIO_Init+0x214>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a53      	ldr	r2, [pc, #332]	; (8001664 <MX_GPIO_Init+0x214>)
 8001518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <MX_GPIO_Init+0x214>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001530:	484d      	ldr	r0, [pc, #308]	; (8001668 <MX_GPIO_Init+0x218>)
 8001532:	f001 fc1b 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	484c      	ldr	r0, [pc, #304]	; (800166c <MX_GPIO_Init+0x21c>)
 800153c:	f001 fc16 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <MX_GPIO_Init+0x220>)
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4847      	ldr	r0, [pc, #284]	; (8001674 <MX_GPIO_Init+0x224>)
 8001556:	f001 fa5f 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800155a:	2332      	movs	r3, #50	; 0x32
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800156a:	230b      	movs	r3, #11
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	483f      	ldr	r0, [pc, #252]	; (8001674 <MX_GPIO_Init+0x224>)
 8001576:	f001 fa4f 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800157a:	2386      	movs	r3, #134	; 0x86
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158a:	230b      	movs	r3, #11
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4838      	ldr	r0, [pc, #224]	; (8001678 <MX_GPIO_Init+0x228>)
 8001596:	f001 fa3f 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800159a:	f244 0381 	movw	r3, #16513	; 0x4081
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	482d      	ldr	r0, [pc, #180]	; (8001668 <MX_GPIO_Init+0x218>)
 80015b4:	f001 fa30 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <MX_GPIO_Init+0x22c>)
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	482c      	ldr	r0, [pc, #176]	; (8001680 <MX_GPIO_Init+0x230>)
 80015ce:	f001 fa23 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e4:	230b      	movs	r3, #11
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	481e      	ldr	r0, [pc, #120]	; (8001668 <MX_GPIO_Init+0x218>)
 80015f0:	f001 fa12 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <MX_GPIO_Init+0x21c>)
 800160c:	f001 fa04 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4812      	ldr	r0, [pc, #72]	; (800166c <MX_GPIO_Init+0x21c>)
 8001624:	f001 f9f8 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001628:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800163a:	230b      	movs	r3, #11
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <MX_GPIO_Init+0x21c>)
 8001646:	f001 f9e7 	bl	8002a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2028      	movs	r0, #40	; 0x28
 8001650:	f001 f9ab 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001654:	2028      	movs	r0, #40	; 0x28
 8001656:	f001 f9c4 	bl	80029e2 <HAL_NVIC_EnableIRQ>

}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	; 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400
 800166c:	40021800 	.word	0x40021800
 8001670:	10110000 	.word	0x10110000
 8001674:	40020800 	.word	0x40020800
 8001678:	40020000 	.word	0x40020000
 800167c:	10210000 	.word	0x10210000
 8001680:	40021400 	.word	0x40021400

08001684 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001694:	d102      	bne.n	800169c <HAL_GPIO_EXTI_Callback+0x18>
	{
		pulseOximiterIntFlag = 1;
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]

		//spO2_registerDump();
	}
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	20000094 	.word	0x20000094

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <Error_Handler+0x6>

080016b4 <I2C_Init>:
* @brief I2C1 Initialization Function
* @param None
* @retval None
*/
void I2C_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <I2C_Init+0x50>)
 80016ba:	4a13      	ldr	r2, [pc, #76]	; (8001708 <I2C_Init+0x54>)
 80016bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <I2C_Init+0x50>)
 80016c0:	4a12      	ldr	r2, [pc, #72]	; (800170c <I2C_Init+0x58>)
 80016c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <I2C_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <I2C_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <I2C_Init+0x50>)
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <I2C_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <I2C_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <I2C_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <I2C_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]

	// Call the HAL error handler on error
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <I2C_Init+0x50>)
 80016f2:	f001 fb6d 	bl	8002dd0 <HAL_I2C_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <I2C_Init+0x4c>
	{
		errorHandler();
 80016fc:	f000 ff14 	bl	8002528 <errorHandler>
	}
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200001d4 	.word	0x200001d4
 8001708:	40005400 	.word	0x40005400
 800170c:	000186a0 	.word	0x000186a0

08001710 <pulseOximeter_readRegister>:

int8_t pulseOximeter_readRegister(uint8_t reg, uint8_t* value)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af02      	add	r7, sp, #8
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];

	buf[0] = reg;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x03;
 8001720:	2303      	movs	r3, #3
 8001722:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 8001724:	23ae      	movs	r3, #174	; 0xae
 8001726:	73fb      	strb	r3, [r7, #15]

	retStatus = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	b299      	uxth	r1, r3
 800172c:	f107 020c 	add.w	r2, r7, #12
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <pulseOximeter_readRegister+0x78>)
 800173a:	f001 fc81 	bl	8003040 <HAL_I2C_Master_Transmit>
 800173e:	4603      	mov	r3, r0
 8001740:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <pulseOximeter_readRegister+0x3e>
		return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	e018      	b.n	8001780 <pulseOximeter_readRegister+0x70>
	}

	address = (I2C_SLAVE_ID | I2C_READ);
 800174e:	23af      	movs	r3, #175	; 0xaf
 8001750:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Receive(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	b299      	uxth	r1, r3
 8001756:	f107 020c 	add.w	r2, r7, #12
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <pulseOximeter_readRegister+0x78>)
 8001764:	f001 fd6a 	bl	800323c <HAL_I2C_Master_Receive>
 8001768:	4603      	mov	r3, r0
 800176a:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <pulseOximeter_readRegister+0x68>
		return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e003      	b.n	8001780 <pulseOximeter_readRegister+0x70>
	}

	*value = buf[0];
 8001778:	7b3a      	ldrb	r2, [r7, #12]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	701a      	strb	r2, [r3, #0]

	return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200001d4 	.word	0x200001d4

0800178c <pulseOximeter_writeRegister>:

HAL_StatusTypeDef pulseOximeter_writeRegister(uint8_t reg, uint8_t value)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af02      	add	r7, sp, #8
 8001792:	4603      	mov	r3, r0
 8001794:	460a      	mov	r2, r1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	4613      	mov	r3, r2
 800179a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];
	buf[0] = reg;
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 80017a4:	23ae      	movs	r3, #174	; 0xae
 80017a6:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 2, HAL_MAX_DELAY);
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	b299      	uxth	r1, r3
 80017ac:	f107 020c 	add.w	r2, r7, #12
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2302      	movs	r3, #2
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <pulseOximeter_writeRegister+0x40>)
 80017ba:	f001 fc41 	bl	8003040 <HAL_I2C_Master_Transmit>
 80017be:	4603      	mov	r3, r0
 80017c0:	73bb      	strb	r3, [r7, #14]

	return retStatus;
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200001d4 	.word	0x200001d4

080017d0 <pulseOximeter_setMeasurementMode>:


void pulseOximeter_setMeasurementMode(MEASUREMENT_MODE mode)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(MODE_CONFIG, &readResult);
 80017de:	f107 030e 	add.w	r3, r7, #14
 80017e2:	4619      	mov	r1, r3
 80017e4:	2009      	movs	r0, #9
 80017e6:	f7ff ff93 	bl	8001710 <pulseOximeter_readRegister>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f6:	d02a      	beq.n	800184e <pulseOximeter_setMeasurementMode+0x7e>
		return;
	}

	readResult &= ~(0x7 << 0);
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	f023 0307 	bic.w	r3, r3, #7
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	73bb      	strb	r3, [r7, #14]

	switch(mode){
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d00a      	beq.n	800181e <pulseOximeter_setMeasurementMode+0x4e>
 8001808:	2b02      	cmp	r3, #2
 800180a:	d00e      	beq.n	800182a <pulseOximeter_setMeasurementMode+0x5a>
 800180c:	2b00      	cmp	r3, #0
 800180e:	d000      	beq.n	8001812 <pulseOximeter_setMeasurementMode+0x42>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
	case SPO2:	readResult = readResult | (0x03 << 0); break;
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
	default: return; break;
 8001810:	e020      	b.n	8001854 <pulseOximeter_setMeasurementMode+0x84>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	b2db      	uxtb	r3, r3
 800181a:	73bb      	strb	r3, [r7, #14]
 800181c:	e00b      	b.n	8001836 <pulseOximeter_setMeasurementMode+0x66>
	case SPO2:	readResult = readResult | (0x03 << 0); break;
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	f043 0303 	orr.w	r3, r3, #3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73bb      	strb	r3, [r7, #14]
 8001828:	e005      	b.n	8001836 <pulseOximeter_setMeasurementMode+0x66>
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	f043 0307 	orr.w	r3, r3, #7
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73bb      	strb	r3, [r7, #14]
 8001834:	bf00      	nop
	}

	if( pulseOximeter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 8001836:	7bbb      	ldrb	r3, [r7, #14]
 8001838:	4619      	mov	r1, r3
 800183a:	2009      	movs	r0, #9
 800183c:	f7ff ffa6 	bl	800178c <pulseOximeter_writeRegister>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <pulseOximeter_setMeasurementMode+0x82>
		return;
	}
	else{
		measurementMode = mode;
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <pulseOximeter_setMeasurementMode+0x8c>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	7013      	strb	r3, [r2, #0]
 800184c:	e002      	b.n	8001854 <pulseOximeter_setMeasurementMode+0x84>
		return;
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <pulseOximeter_setMeasurementMode+0x84>
		return;
 8001852:	bf00      	nop
	}
}
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000

08001860 <pulseOximeter_resetRegisters>:
		default: return NORMAL; break;
	}
}

void pulseOximeter_resetRegisters(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	int8_t readStatus;
	uint8_t readResult;


	readStatus = pulseOximeter_readRegister(MODE_CONFIG, &readResult);
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	4619      	mov	r1, r3
 800186a:	2009      	movs	r0, #9
 800186c:	f7ff ff50 	bl	8001710 <pulseOximeter_readRegister>
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
	if( readStatus == -1){
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d011      	beq.n	80018a2 <pulseOximeter_resetRegisters+0x42>
		return;
	}

	readResult &= ~(0x01 << 6);
 800187e:	79bb      	ldrb	r3, [r7, #6]
 8001880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001884:	b2db      	uxtb	r3, r3
 8001886:	71bb      	strb	r3, [r7, #6]
	readResult = readResult | (0x01 << 6);
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188e:	b2db      	uxtb	r3, r3
 8001890:	71bb      	strb	r3, [r7, #6]
	if( pulseOximeter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	4619      	mov	r1, r3
 8001896:	2009      	movs	r0, #9
 8001898:	f7ff ff78 	bl	800178c <pulseOximeter_writeRegister>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	e000      	b.n	80018a4 <pulseOximeter_resetRegisters+0x44>
		return;
 80018a2:	bf00      	nop
		return;
	}
}
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <pulseOximeter_setLedCurrent>:

void pulseOximeter_setLedCurrent(uint8_t led, float currentLevel)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	ed87 0a00 	vstr	s0, [r7]
 80018b8:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73bb      	strb	r3, [r7, #14]
	uint8_t ledRegister = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]

	switch(led){
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d002      	beq.n	80018ce <pulseOximeter_setLedCurrent+0x22>
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d003      	beq.n	80018d4 <pulseOximeter_setLedCurrent+0x28>
 80018cc:	e005      	b.n	80018da <pulseOximeter_setLedCurrent+0x2e>
	case RED_LED: ledRegister = LED_PULSE_AMP_1; break;
 80018ce:	230c      	movs	r3, #12
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e002      	b.n	80018da <pulseOximeter_setLedCurrent+0x2e>
	case IR_LED:	ledRegister = LED_PULSE_AMP_2; break;
 80018d4:	230d      	movs	r3, #13
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	bf00      	nop
	}

	// slope derived from MAX30102 DataSheet
	value = (uint8_t)(5.0 * currentLevel);
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f7fe fe44 	bl	8000568 <__aeabi_f2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <pulseOximeter_setLedCurrent+0x64>)
 80018e6:	f7fe fe97 	bl	8000618 <__aeabi_dmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	4618      	mov	r0, r3
 80018f0:	4621      	mov	r1, r4
 80018f2:	f7ff f941 	bl	8000b78 <__aeabi_d2uiz>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73bb      	strb	r3, [r7, #14]

	if( pulseOximeter_writeRegister(ledRegister, value) != HAL_OK){
 80018fa:	7bba      	ldrb	r2, [r7, #14]
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff43 	bl	800178c <pulseOximeter_writeRegister>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
		return;
	}
	else{

	}
}
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	40140000 	.word	0x40140000

08001914 <pulseOximeter_setSampleRate>:

	return currentLevel;
}

void pulseOximeter_setSampleRate(uint8_t sampleRate)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(SPO2_CONFIG, &readResult);
 8001922:	f107 030e 	add.w	r3, r7, #14
 8001926:	4619      	mov	r1, r3
 8001928:	200a      	movs	r0, #10
 800192a:	f7ff fef1 	bl	8001710 <pulseOximeter_readRegister>
 800192e:	4603      	mov	r3, r0
 8001930:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d015      	beq.n	8001968 <pulseOximeter_setSampleRate+0x54>
		return;
	}

	readResult &= ~(0x1C << 0);
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	f023 031c 	bic.w	r3, r3, #28
 8001942:	b2db      	uxtb	r3, r3
 8001944:	73bb      	strb	r3, [r7, #14]

	readResult = readResult | (sampleRate << 2);
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	b25a      	sxtb	r2, r3
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	b25b      	sxtb	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b25b      	sxtb	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	73bb      	strb	r3, [r7, #14]

	if( pulseOximeter_writeRegister(SPO2_CONFIG, readResult) != HAL_OK){
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	4619      	mov	r1, r3
 800195c:	200a      	movs	r0, #10
 800195e:	f7ff ff15 	bl	800178c <pulseOximeter_writeRegister>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	e000      	b.n	800196a <pulseOximeter_setSampleRate+0x56>
		return;
 8001968:	bf00      	nop
		return;
	}
	else{

	}
}
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <pulseOximeter_setPulseWidth>:

	return (SAMPLE_RATE)result;
}

void pulseOximeter_setPulseWidth(uint8_t pulseWidth)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(SPO2_CONFIG, &readResult);
 800197e:	f107 030e 	add.w	r3, r7, #14
 8001982:	4619      	mov	r1, r3
 8001984:	200a      	movs	r0, #10
 8001986:	f7ff fec3 	bl	8001710 <pulseOximeter_readRegister>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001996:	d032      	beq.n	80019fe <pulseOximeter_setPulseWidth+0x8e>
		return;
	}

	readResult &= ~(0x03 << 0);
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	f023 0303 	bic.w	r3, r3, #3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	73bb      	strb	r3, [r7, #14]

	switch(pulseWidth)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d822      	bhi.n	80019ee <pulseOximeter_setPulseWidth+0x7e>
 80019a8:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <pulseOximeter_setPulseWidth+0x40>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019c5 	.word	0x080019c5
 80019b4:	080019cb 	.word	0x080019cb
 80019b8:	080019d7 	.word	0x080019d7
 80019bc:	080019e3 	.word	0x080019e3
 80019c0:	080019ef 	.word	0x080019ef
	{
	case _69_US: readResult = readResult | 0; break;
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	73bb      	strb	r3, [r7, #14]
 80019c8:	e011      	b.n	80019ee <pulseOximeter_setPulseWidth+0x7e>
	case _118_US: readResult = readResult | (0x01 << 0); break;
 80019ca:	7bbb      	ldrb	r3, [r7, #14]
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	73bb      	strb	r3, [r7, #14]
 80019d4:	e00b      	b.n	80019ee <pulseOximeter_setPulseWidth+0x7e>
	case _215_US: readResult = readResult | (0x02 << 0); break;
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	73bb      	strb	r3, [r7, #14]
 80019e0:	e005      	b.n	80019ee <pulseOximeter_setPulseWidth+0x7e>
	case _411_US: readResult = readResult | (0x03 << 0); break;
 80019e2:	7bbb      	ldrb	r3, [r7, #14]
 80019e4:	f043 0303 	orr.w	r3, r3, #3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	73bb      	strb	r3, [r7, #14]
 80019ec:	bf00      	nop
	case _PULSE_WIDTH_FAIL: break;
	}

	if( pulseOximeter_writeRegister(SPO2_CONFIG, readResult) != HAL_OK){
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	4619      	mov	r1, r3
 80019f2:	200a      	movs	r0, #10
 80019f4:	f7ff feca 	bl	800178c <pulseOximeter_writeRegister>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	e000      	b.n	8001a00 <pulseOximeter_setPulseWidth+0x90>
		return;
 80019fe:	bf00      	nop
		return;
	}
	else{

	}
}
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop

08001a08 <pulseOximeter_resetFifo>:
		return (PULSE_WIDTH)result;
}

// Write zero to all FIFO registers
void pulseOximeter_resetFifo(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	pulseOximeter_writeRegister(FIFO_WRITE_PTR, 0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2004      	movs	r0, #4
 8001a10:	f7ff febc 	bl	800178c <pulseOximeter_writeRegister>
	pulseOximeter_writeRegister(FIFO_READ_POINTER, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	2006      	movs	r0, #6
 8001a18:	f7ff feb8 	bl	800178c <pulseOximeter_writeRegister>
	pulseOximeter_writeRegister(FIFO_OVF_COUNTER, 0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2005      	movs	r0, #5
 8001a20:	f7ff feb4 	bl	800178c <pulseOximeter_writeRegister>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <pulseOximeter_initFifo>:

//
void pulseOximeter_initFifo(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
		// FIFO almost full interrupt enable
		pulseOximeter_writeRegister(INT_ENABLE_1, 0x40);

		pulseOximeter_clearInterrupt();
	}else{
		pulseOximeter_writeRegister(FIFO_CONFIG, 0x0F);
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	2008      	movs	r0, #8
 8001a30:	f7ff feac 	bl	800178c <pulseOximeter_writeRegister>
		pulseOximeter_writeRegister(INT_ENABLE_1, 0x00);
 8001a34:	2100      	movs	r1, #0
 8001a36:	2002      	movs	r0, #2
 8001a38:	f7ff fea8 	bl	800178c <pulseOximeter_writeRegister>
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <pulseOximeter_readFifo>:

FIFO_LED_DATA pulseOximeter_readFifo(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af02      	add	r7, sp, #8
	uint8_t address;uint8_t buf[12];
	uint8_t numBytes = 6;
 8001a46:	2306      	movs	r3, #6
 8001a48:	75fb      	strb	r3, [r7, #23]

	buf[0] = FIFO_DATA;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	713b      	strb	r3, [r7, #4]

	address = (I2C_SLAVE_ID | I2C_WRITE);
 8001a4e:	23ae      	movs	r3, #174	; 0xae
 8001a50:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001a52:	7dbb      	ldrb	r3, [r7, #22]
 8001a54:	b299      	uxth	r1, r3
 8001a56:	1d3a      	adds	r2, r7, #4
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	481c      	ldr	r0, [pc, #112]	; (8001ad4 <pulseOximeter_readFifo+0x94>)
 8001a62:	f001 faed 	bl	8003040 <HAL_I2C_Master_Transmit>

	address = (I2C_SLAVE_ID | I2C_READ);
 8001a66:	23af      	movs	r3, #175	; 0xaf
 8001a68:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Receive(&hi2c1, address, buf, numBytes, HAL_MAX_DELAY);
 8001a6a:	7dbb      	ldrb	r3, [r7, #22]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	b298      	uxth	r0, r3
 8001a72:	1d3a      	adds	r2, r7, #4
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4815      	ldr	r0, [pc, #84]	; (8001ad4 <pulseOximeter_readFifo+0x94>)
 8001a7e:	f001 fbdd 	bl	800323c <HAL_I2C_Master_Receive>

	fifoData.irLedRaw = 0;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <pulseOximeter_readFifo+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw = 0;
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <pulseOximeter_readFifo+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	801a      	strh	r2, [r3, #0]

	fifoData.irLedRaw = (buf[4] << 8) | (buf[5] << 0);
 8001a8e:	7a3b      	ldrb	r3, [r7, #8]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	7a7b      	ldrb	r3, [r7, #9]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <pulseOximeter_readFifo+0x98>)
 8001aa0:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw =(buf[1] << 8) | (buf[0] << 0);
 8001aa2:	797b      	ldrb	r3, [r7, #5]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	793b      	ldrb	r3, [r7, #4]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <pulseOximeter_readFifo+0x98>)
 8001ab4:	801a      	strh	r2, [r3, #0]

	return fifoData;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <pulseOximeter_readFifo+0x98>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	2300      	movs	r3, #0
 8001abe:	8a3a      	ldrh	r2, [r7, #16]
 8001ac0:	f362 030f 	bfi	r3, r2, #0, #16
 8001ac4:	8a7a      	ldrh	r2, [r7, #18]
 8001ac6:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001d4 	.word	0x200001d4
 8001ad8:	200000c0 	.word	0x200000c0

08001adc <pulseOximeter_readTemperature>:
	pulseOximeter_readRegister(INT_STATUS_1, &readResult);
}


float pulseOximeter_readTemperature(void)
{
 8001adc:	b5b0      	push	{r4, r5, r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
	uint8_t tempDone = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
	int8_t tempFraction;
	uint8_t tempInteger;
	float temperature;

	// Initiate a temperature conversion
	pulseOximeter_writeRegister(DIE_TEMP_CONFIG, 1);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2021      	movs	r0, #33	; 0x21
 8001aea:	f7ff fe4f 	bl	800178c <pulseOximeter_writeRegister>

	// Wait for conversion finish
	while( tempDone != 0 )
 8001aee:	e004      	b.n	8001afa <pulseOximeter_readTemperature+0x1e>
	{
		pulseOximeter_readRegister(DIE_TEMP_CONFIG, &tempDone);
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	4619      	mov	r1, r3
 8001af4:	2021      	movs	r0, #33	; 0x21
 8001af6:	f7ff fe0b 	bl	8001710 <pulseOximeter_readRegister>
	while( tempDone != 0 )
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f7      	bne.n	8001af0 <pulseOximeter_readTemperature+0x14>
	}

	// Read Die temperature integer register
	pulseOximeter_readRegister(DIE_TEMP_INTEGER, &readResult);
 8001b00:	1dbb      	adds	r3, r7, #6
 8001b02:	4619      	mov	r1, r3
 8001b04:	201f      	movs	r0, #31
 8001b06:	f7ff fe03 	bl	8001710 <pulseOximeter_readRegister>
	tempInteger = readResult;
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	73fb      	strb	r3, [r7, #15]

	// Read Die temperature fraction register
	pulseOximeter_readRegister(DIE_TEMP_FRACTION, &readResult);
 8001b0e:	1dbb      	adds	r3, r7, #6
 8001b10:	4619      	mov	r1, r3
 8001b12:	2020      	movs	r0, #32
 8001b14:	f7ff fdfc 	bl	8001710 <pulseOximeter_readRegister>
	tempFraction = readResult;
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	73bb      	strb	r3, [r7, #14]

	// Conversion factor found in MAX30102 DataSheet
	temperature = tempInteger + (tempFraction*0.0625);
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd10 	bl	8000544 <__aeabi_i2d>
 8001b24:	4604      	mov	r4, r0
 8001b26:	460d      	mov	r5, r1
 8001b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd09 	bl	8000544 <__aeabi_i2d>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <pulseOximeter_readTemperature+0x8c>)
 8001b38:	f7fe fd6e 	bl	8000618 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fbb2 	bl	80002ac <__adddf3>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460c      	mov	r4, r1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4621      	mov	r1, r4
 8001b50:	f7ff f832 	bl	8000bb8 <__aeabi_d2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	60bb      	str	r3, [r7, #8]

	return temperature;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	ee07 3a90 	vmov	s15, r3
}
 8001b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	3fb00000 	.word	0x3fb00000

08001b6c <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
{
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	MAX30102 result = {
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2228      	movs	r2, #40	; 0x28
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fe36 	bl	80057f0 <memset>
 8001b84:	4b9a      	ldr	r3, [pc, #616]	; (8001df0 <pulseOximeter_update+0x284>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61fb      	str	r3, [r7, #28]
	/*float dcFilteredIR*/ 0.0,
	/*float dcFilteredRed*/ 0.0,
	/*float temperature;*/ 0.0
  };

	result.temperature = pulseOximeter_readTemperature();
 8001b8a:	f7ff ffa7 	bl	8001adc <pulseOximeter_readTemperature>
 8001b8e:	eef0 7a40 	vmov.f32	s15, s0
 8001b92:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba0:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <pulseOximeter_update+0x288>)
 8001ba2:	ed93 7a00 	vldr	s14, [r3]
 8001ba6:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8001df8 <pulseOximeter_update+0x28c>
 8001baa:	eef0 0a47 	vmov.f32	s1, s14
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	f7ff f9d1 	bl	8000f58 <dcRemoval>
 8001bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bba:	eef0 7a60 	vmov.f32	s15, s1
 8001bbe:	4b8d      	ldr	r3, [pc, #564]	; (8001df4 <pulseOximeter_update+0x288>)
 8001bc0:	ed83 7a00 	vstr	s14, [r3]
 8001bc4:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd2:	4b8a      	ldr	r3, [pc, #552]	; (8001dfc <pulseOximeter_update+0x290>)
 8001bd4:	ed93 7a00 	vldr	s14, [r3]
 8001bd8:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8001df8 <pulseOximeter_update+0x28c>
 8001bdc:	eef0 0a47 	vmov.f32	s1, s14
 8001be0:	eeb0 0a67 	vmov.f32	s0, s15
 8001be4:	f7ff f9b8 	bl	8000f58 <dcRemoval>
 8001be8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bec:	eef0 7a60 	vmov.f32	s15, s1
 8001bf0:	4b82      	ldr	r3, [pc, #520]	; (8001dfc <pulseOximeter_update+0x290>)
 8001bf2:	ed83 7a00 	vstr	s14, [r3]
 8001bf6:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001bfa:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <pulseOximeter_update+0x288>)
 8001bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c00:	487f      	ldr	r0, [pc, #508]	; (8001e00 <pulseOximeter_update+0x294>)
 8001c02:	eeb0 0a67 	vmov.f32	s0, s15
 8001c06:	f7ff fa23 	bl	8001050 <meanDiff>
 8001c0a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001c0e:	487d      	ldr	r0, [pc, #500]	; (8001e04 <pulseOximeter_update+0x298>)
 8001c10:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001c14:	f7ff f9d4 	bl	8000fc0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001c18:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <pulseOximeter_update+0x288>)
 8001c1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c1e:	4b75      	ldr	r3, [pc, #468]	; (8001df4 <pulseOximeter_update+0x288>)
 8001c20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	4b77      	ldr	r3, [pc, #476]	; (8001e08 <pulseOximeter_update+0x29c>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <pulseOximeter_update+0x29c>)
 8001c34:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8001c38:	4b70      	ldr	r3, [pc, #448]	; (8001dfc <pulseOximeter_update+0x290>)
 8001c3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <pulseOximeter_update+0x290>)
 8001c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c48:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <pulseOximeter_update+0x2a0>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <pulseOximeter_update+0x2a0>)
 8001c54:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 8001c58:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <pulseOximeter_update+0x2a4>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <pulseOximeter_update+0x2a4>)
 8001c62:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 8001c64:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <pulseOximeter_update+0x298>)
 8001c66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	f000 f8db 	bl	8001e28 <detectPulse>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 808a 	beq.w	8001d8e <pulseOximeter_update+0x222>
 8001c7a:	4b65      	ldr	r3, [pc, #404]	; (8001e10 <pulseOximeter_update+0x2a4>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8085 	beq.w	8001d8e <pulseOximeter_update+0x222>
	{
		result.pulseDetected=true;
 8001c84:	2301      	movs	r3, #1
 8001c86:	723b      	strb	r3, [r7, #8]
		pulsesDetected++;
 8001c88:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <pulseOximeter_update+0x2a8>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <pulseOximeter_update+0x2a8>)
 8001c92:	801a      	strh	r2, [r3, #0]

		float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <pulseOximeter_update+0x2a0>)
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <pulseOximeter_update+0x2a4>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001caa:	ee16 0a90 	vmov	r0, s13
 8001cae:	f7fe fc5b 	bl	8000568 <__aeabi_f2d>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	ec44 3b10 	vmov	d0, r3, r4
 8001cba:	f004 fa27 	bl	800610c <sqrt>
 8001cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc2:	eef0 7a60 	vmov.f32	s15, s1
 8001cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	f004 f99d 	bl	800600c <log>
 8001cd2:	ec55 4b10 	vmov	r4, r5, d0
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <pulseOximeter_update+0x29c>)
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <pulseOximeter_update+0x2a4>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cec:	ee16 0a90 	vmov	r0, s13
 8001cf0:	f7fe fc3a 	bl	8000568 <__aeabi_f2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	ec43 2b10 	vmov	d0, r2, r3
 8001cfc:	f004 fa06 	bl	800610c <sqrt>
 8001d00:	eeb0 7a40 	vmov.f32	s14, s0
 8001d04:	eef0 7a60 	vmov.f32	s15, s1
 8001d08:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0c:	eef0 0a67 	vmov.f32	s1, s15
 8001d10:	f004 f97c 	bl	800600c <log>
 8001d14:	ec53 2b10 	vmov	r2, r3, d0
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	f7fe fda6 	bl	800086c <__aeabi_ddiv>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	4618      	mov	r0, r3
 8001d26:	4621      	mov	r1, r4
 8001d28:	f7fe ff46 	bl	8000bb8 <__aeabi_d2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
		currentSpO2Value = 110.0 - 18.0 * ratioRMS;
 8001d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d32:	f7fe fc19 	bl	8000568 <__aeabi_f2d>
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <pulseOximeter_update+0x2ac>)
 8001d3c:	f7fe fc6c 	bl	8000618 <__aeabi_dmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	461a      	mov	r2, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	f04f 0000 	mov.w	r0, #0
 8001d4c:	4933      	ldr	r1, [pc, #204]	; (8001e1c <pulseOximeter_update+0x2b0>)
 8001d4e:	f7fe faab 	bl	80002a8 <__aeabi_dsub>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	4618      	mov	r0, r3
 8001d58:	4621      	mov	r1, r4
 8001d5a:	f7fe ff2d 	bl	8000bb8 <__aeabi_d2f>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <pulseOximeter_update+0x284>)
 8001d62:	601a      	str	r2, [r3, #0]
		result.SpO2 = currentSpO2Value;
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <pulseOximeter_update+0x284>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61fb      	str	r3, [r7, #28]

		if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <pulseOximeter_update+0x2a8>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <pulseOximeter_update+0x222>
		{
			irACValueSqSum = 0;
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <pulseOximeter_update+0x29c>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <pulseOximeter_update+0x2a0>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <pulseOximeter_update+0x2a4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <pulseOximeter_update+0x290>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <pulseOximeter_update+0x288>)
 8001d96:	ed93 7a00 	vldr	s14, [r3]
 8001d9a:	eef0 0a47 	vmov.f32	s1, s14
 8001d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001da2:	f000 f949 	bl	8002038 <balanceIntesities>


	result.heartBPM = currentBPM;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <pulseOximeter_update+0x2b4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]
	result.irCardiogram = lpbFilterIR.result;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <pulseOximeter_update+0x298>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
	result.irDcValue = dcFilterIR.w;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <pulseOximeter_update+0x288>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	617b      	str	r3, [r7, #20]
	result.redDcValue = dcFilterRed.w;
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <pulseOximeter_update+0x290>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
	result.lastBeatThreshold = lastBeatThreshold;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <pulseOximeter_update+0x2b8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <pulseOximeter_update+0x288>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
	result.dcFilteredRed = dcFilterRed.result;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <pulseOximeter_update+0x290>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28

	return result;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	f107 0408 	add.w	r4, r7, #8
 8001dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	3738      	adds	r7, #56	; 0x38
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdb0      	pop	{r4, r5, r7, pc}
 8001df0:	20000168 	.word	0x20000168
 8001df4:	200000c4 	.word	0x200000c4
 8001df8:	3f733333 	.word	0x3f733333
 8001dfc:	200000cc 	.word	0x200000cc
 8001e00:	200000d4 	.word	0x200000d4
 8001e04:	2000011c 	.word	0x2000011c
 8001e08:	2000015c 	.word	0x2000015c
 8001e0c:	20000160 	.word	0x20000160
 8001e10:	20000164 	.word	0x20000164
 8001e14:	20000166 	.word	0x20000166
 8001e18:	40320000 	.word	0x40320000
 8001e1c:	405b8000 	.word	0x405b8000
 8001e20:	20000670 	.word	0x20000670
 8001e24:	20000158 	.word	0x20000158

08001e28 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e36:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001ffc <detectPulse+0x1d4>
 8001e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	dd14      	ble.n	8001e6e <detectPulse+0x46>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001e44:	4b6e      	ldr	r3, [pc, #440]	; (8002000 <detectPulse+0x1d8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <detectPulse+0x1dc>)
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 8001e52:	4b6d      	ldr	r3, [pc, #436]	; (8002008 <detectPulse+0x1e0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 8001e58:	4b6c      	ldr	r3, [pc, #432]	; (800200c <detectPulse+0x1e4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001e5e:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <detectPulse+0x1e8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 8001e64:	4b6b      	ldr	r3, [pc, #428]	; (8002014 <detectPulse+0x1ec>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
    return false;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e0c2      	b.n	8001ff4 <detectPulse+0x1cc>
  }

  switch(currentPulseDetectorState)
 8001e6e:	4b64      	ldr	r3, [pc, #400]	; (8002000 <detectPulse+0x1d8>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d016      	beq.n	8001ea4 <detectPulse+0x7c>
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	f000 809a 	beq.w	8001fb0 <detectPulse+0x188>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 80b5 	bne.w	8001fec <detectPulse+0x1c4>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e86:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002018 <detectPulse+0x1f0>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	da00      	bge.n	8001e96 <detectPulse+0x6e>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001e94:	e0aa      	b.n	8001fec <detectPulse+0x1c4>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001e96:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <detectPulse+0x1d8>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <detectPulse+0x1e8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
      break;
 8001ea2:	e0a3      	b.n	8001fec <detectPulse+0x1c4>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <detectPulse+0x1dc>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dd0d      	ble.n	8001ed4 <detectPulse+0xac>
      {
        currentBeat = millis();
 8001eb8:	f000 fb3a 	bl	8002530 <millis>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b53      	ldr	r3, [pc, #332]	; (800200c <detectPulse+0x1e4>)
 8001ec0:	601a      	str	r2, [r3, #0]
        lastBeatThreshold = sensor_value;
 8001ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eca:	ee17 2a90 	vmov	r2, s15
 8001ece:	4b51      	ldr	r3, [pc, #324]	; (8002014 <detectPulse+0x1ec>)
 8001ed0:	601a      	str	r2, [r3, #0]

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 8001ed2:	e08b      	b.n	8001fec <detectPulse+0x1c4>
    	uint32_t beatDuration = currentBeat - lastBeat;
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <detectPulse+0x1e4>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <detectPulse+0x1e0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
        lastBeat = currentBeat;
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <detectPulse+0x1e4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a48      	ldr	r2, [pc, #288]	; (8002008 <detectPulse+0x1e0>)
 8001ee6:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <detectPulse+0xe2>
          rawBPM = 60000.0 / (float)beatDuration;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001efe:	eddf 6a47 	vldr	s13, [pc, #284]	; 800201c <detectPulse+0x1f4>
 8001f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f06:	edc7 7a05 	vstr	s15, [r7, #20]
        valuesBPM[bpmIndex] = rawBPM;
 8001f0a:	4b45      	ldr	r3, [pc, #276]	; (8002020 <detectPulse+0x1f8>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4a45      	ldr	r2, [pc, #276]	; (8002024 <detectPulse+0x1fc>)
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]
        valuesBPMSum = 0;
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <detectPulse+0x200>)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e010      	b.n	8001f48 <detectPulse+0x120>
          valuesBPMSum += valuesBPM[i];
 8001f26:	4a3f      	ldr	r2, [pc, #252]	; (8002024 <detectPulse+0x1fc>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <detectPulse+0x200>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <detectPulse+0x200>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	3301      	adds	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b09      	cmp	r3, #9
 8001f4c:	ddeb      	ble.n	8001f26 <detectPulse+0xfe>
        bpmIndex++;
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <detectPulse+0x1f8>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <detectPulse+0x1f8>)
 8001f58:	701a      	strb	r2, [r3, #0]
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <detectPulse+0x1f8>)
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <detectPulse+0x204>)
 8001f60:	fba3 1302 	umull	r1, r3, r3, r2
 8001f64:	08d9      	lsrs	r1, r3, #3
 8001f66:	460b      	mov	r3, r1
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <detectPulse+0x1f8>)
 8001f74:	701a      	strb	r2, [r3, #0]
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <detectPulse+0x208>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b09      	cmp	r3, #9
 8001f7c:	d805      	bhi.n	8001f8a <detectPulse+0x162>
          valuesBPMCount++;
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <detectPulse+0x208>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <detectPulse+0x208>)
 8001f88:	701a      	strb	r2, [r3, #0]
        currentBPM = valuesBPMSum / valuesBPMCount;
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <detectPulse+0x200>)
 8001f8c:	edd3 6a00 	vldr	s13, [r3]
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <detectPulse+0x208>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <detectPulse+0x20c>)
 8001fa2:	edc3 7a00 	vstr	s15, [r3]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <detectPulse+0x1d8>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	701a      	strb	r2, [r3, #0]
        return true;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e021      	b.n	8001ff4 <detectPulse+0x1cc>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <detectPulse+0x1dc>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d505      	bpl.n	8001fd0 <detectPulse+0x1a8>
      {
        values_went_down++;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <detectPulse+0x1e8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <detectPulse+0x1e8>)
 8001fce:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002018 <detectPulse+0x1f0>
 8001fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	d400      	bmi.n	8001fe4 <detectPulse+0x1bc>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001fe2:	e002      	b.n	8001fea <detectPulse+0x1c2>
        currentPulseDetectorState = PULSE_IDLE;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <detectPulse+0x1d8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
      break;
 8001fea:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001fec:	4a05      	ldr	r2, [pc, #20]	; (8002004 <detectPulse+0x1dc>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  return false;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	44fa0000 	.word	0x44fa0000
 8002000:	20000174 	.word	0x20000174
 8002004:	20000178 	.word	0x20000178
 8002008:	2000017c 	.word	0x2000017c
 800200c:	20000180 	.word	0x20000180
 8002010:	20000184 	.word	0x20000184
 8002014:	20000158 	.word	0x20000158
 8002018:	42c80000 	.word	0x42c80000
 800201c:	476a6000 	.word	0x476a6000
 8002020:	20000155 	.word	0x20000155
 8002024:	20000128 	.word	0x20000128
 8002028:	20000150 	.word	0x20000150
 800202c:	cccccccd 	.word	0xcccccccd
 8002030:	20000154 	.word	0x20000154
 8002034:	20000670 	.word	0x20000670

08002038 <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002042:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8002046:	f000 fa73 	bl	8002530 <millis>
 800204a:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <balanceIntesities+0x108>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002060:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002144 <balanceIntesities+0x10c>
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	da00      	bge.n	8002070 <balanceIntesities+0x38>
      pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
    }

    lastREDLedCurrentCheck = millis();
  }
}
 800206e:	e063      	b.n	8002138 <balanceIntesities+0x100>
	  if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 8002070:	ed97 7a00 	vldr	s14, [r7]
 8002074:	edd7 7a01 	vldr	s15, [r7, #4]
 8002078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002148 <balanceIntesities+0x110>
 8002080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	dd20      	ble.n	80020cc <balanceIntesities+0x94>
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <balanceIntesities+0x114>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b0e      	cmp	r3, #14
 8002090:	d81c      	bhi.n	80020cc <balanceIntesities+0x94>
      redLEDCurrent++;
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <balanceIntesities+0x114>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <balanceIntesities+0x114>)
 800209c:	701a      	strb	r2, [r3, #0]
      pulseOximeter_setLedCurrent(RED_LED, redLEDCurrent);
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <balanceIntesities+0x114>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020aa:	eeb0 0a67 	vmov.f32	s0, s15
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff fbfc 	bl	80018ac <pulseOximeter_setLedCurrent>
	  pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <balanceIntesities+0x118>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c0:	eeb0 0a67 	vmov.f32	s0, s15
 80020c4:	2002      	movs	r0, #2
 80020c6:	f7ff fbf1 	bl	80018ac <pulseOximeter_setLedCurrent>
 80020ca:	e02c      	b.n	8002126 <balanceIntesities+0xee>
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 80020cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80020d0:	edd7 7a00 	vldr	s15, [r7]
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002148 <balanceIntesities+0x110>
 80020dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	dd1f      	ble.n	8002126 <balanceIntesities+0xee>
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <balanceIntesities+0x114>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01b      	beq.n	8002126 <balanceIntesities+0xee>
      redLEDCurrent--;pulseOximeter_setLedCurrent(RED_LED, redLEDCurrent);
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <balanceIntesities+0x114>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <balanceIntesities+0x114>)
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <balanceIntesities+0x114>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002106:	eeb0 0a67 	vmov.f32	s0, s15
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff fbce 	bl	80018ac <pulseOximeter_setLedCurrent>
      pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <balanceIntesities+0x118>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	2002      	movs	r0, #2
 8002122:	f7ff fbc3 	bl	80018ac <pulseOximeter_setLedCurrent>
    lastREDLedCurrentCheck = millis();
 8002126:	f000 fa03 	bl	8002530 <millis>
 800212a:	ee07 0a90 	vmov	s15, r0
 800212e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <balanceIntesities+0x108>)
 8002134:	edc3 7a00 	vstr	s15, [r3]
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000170 	.word	0x20000170
 8002144:	43fa0000 	.word	0x43fa0000
 8002148:	477de800 	.word	0x477de800
 800214c:	2000016c 	.word	0x2000016c
 8002150:	20000674 	.word	0x20000674

08002154 <pulseOximeter_displayData>:

	uart_PrintString("\r\n");
}

void pulseOximeter_displayData(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	uart_PrintString("MAX30102 Pulse Oximiter Data:\r\n");
 8002158:	4812      	ldr	r0, [pc, #72]	; (80021a4 <pulseOximeter_displayData+0x50>)
 800215a:	f000 fa31 	bl	80025c0 <uart_PrintString>

	uart_PrintString("Die Temperature: ");
 800215e:	4812      	ldr	r0, [pc, #72]	; (80021a8 <pulseOximeter_displayData+0x54>)
 8002160:	f000 fa2e 	bl	80025c0 <uart_PrintString>
	uart_PrintFloat(pulseOximeter.temperature);
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <pulseOximeter_displayData+0x58>)
 8002166:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f000 fa3d 	bl	80025ec <uart_PrintFloat>

	uart_PrintString("Heart Rate (BPM): ");
 8002172:	480f      	ldr	r0, [pc, #60]	; (80021b0 <pulseOximeter_displayData+0x5c>)
 8002174:	f000 fa24 	bl	80025c0 <uart_PrintString>
	uart_PrintFloat(pulseOximeter.heartBPM);
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <pulseOximeter_displayData+0x58>)
 800217a:	edd3 7a01 	vldr	s15, [r3, #4]
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	f000 fa33 	bl	80025ec <uart_PrintFloat>

	uart_PrintString("Oxygen Saturation SpO2 (%): ");
 8002186:	480b      	ldr	r0, [pc, #44]	; (80021b4 <pulseOximeter_displayData+0x60>)
 8002188:	f000 fa1a 	bl	80025c0 <uart_PrintString>
	uart_PrintFloat(pulseOximeter.SpO2);
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <pulseOximeter_displayData+0x58>)
 800218e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002192:	eeb0 0a67 	vmov.f32	s0, s15
 8002196:	f000 fa29 	bl	80025ec <uart_PrintFloat>
	uart_PrintString("\r\n");
 800219a:	4807      	ldr	r0, [pc, #28]	; (80021b8 <pulseOximeter_displayData+0x64>)
 800219c:	f000 fa10 	bl	80025c0 <uart_PrintString>
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	08006858 	.word	0x08006858
 80021a8:	08006878 	.word	0x08006878
 80021ac:	20000098 	.word	0x20000098
 80021b0:	0800688c 	.word	0x0800688c
 80021b4:	080068a0 	.word	0x080068a0
 80021b8:	08006854 	.word	0x08006854

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_MspInit+0x4c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_MspInit+0x4c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_I2C_MspInit+0x84>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d12c      	bne.n	8002288 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800224a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002250:	2312      	movs	r3, #18
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225c:	2304      	movs	r3, #4
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	480c      	ldr	r0, [pc, #48]	; (8002298 <HAL_I2C_MspInit+0x8c>)
 8002268:	f000 fbd6 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_I2C_MspInit+0x88>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40005400 	.word	0x40005400
 8002294:	40023800 	.word	0x40023800
 8002298:	40020400 	.word	0x40020400

0800229c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a33      	ldr	r2, [pc, #204]	; (8002388 <HAL_UART_MspInit+0xec>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d12d      	bne.n	800231a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_UART_MspInit+0xf0>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a31      	ldr	r2, [pc, #196]	; (800238c <HAL_UART_MspInit+0xf0>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_UART_MspInit+0xf0>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_UART_MspInit+0xf0>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <HAL_UART_MspInit+0xf0>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_UART_MspInit+0xf0>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002308:	2307      	movs	r3, #7
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	481f      	ldr	r0, [pc, #124]	; (8002390 <HAL_UART_MspInit+0xf4>)
 8002314:	f000 fb80 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002318:	e031      	b.n	800237e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_UART_MspInit+0xf8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d12c      	bne.n	800237e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_UART_MspInit+0xf0>)
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_UART_MspInit+0xf0>)
 800232e:	f043 0320 	orr.w	r3, r3, #32
 8002332:	6453      	str	r3, [r2, #68]	; 0x44
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_UART_MspInit+0xf0>)
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_UART_MspInit+0xf0>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_UART_MspInit+0xf0>)
 800234a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_UART_MspInit+0xf0>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800235c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800236e:	2308      	movs	r3, #8
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <HAL_UART_MspInit+0xfc>)
 800237a:	f000 fb4d 	bl	8002a18 <HAL_GPIO_Init>
}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	; 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40004800 	.word	0x40004800
 800238c:	40023800 	.word	0x40023800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40011400 	.word	0x40011400
 8002398:	40021800 	.word	0x40021800

0800239c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023bc:	d13f      	bne.n	800243e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_PCD_MspInit+0xac>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_PCD_MspInit+0xac>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_PCD_MspInit+0xac>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80023da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ec:	230a      	movs	r3, #10
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	4815      	ldr	r0, [pc, #84]	; (800244c <HAL_PCD_MspInit+0xb0>)
 80023f8:	f000 fb0e 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4619      	mov	r1, r3
 8002410:	480e      	ldr	r0, [pc, #56]	; (800244c <HAL_PCD_MspInit+0xb0>)
 8002412:	f000 fb01 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_PCD_MspInit+0xac>)
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_PCD_MspInit+0xac>)
 800241c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002420:	6353      	str	r3, [r2, #52]	; 0x34
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_PCD_MspInit+0xac>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_PCD_MspInit+0xac>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_PCD_MspInit+0xac>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 f968 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80024a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024ac:	f000 fc78 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024b4:	f000 fc74 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <_sbrk+0x5c>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <_sbrk+0x60>)
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <_sbrk+0x64>)
 80024da:	4a12      	ldr	r2, [pc, #72]	; (8002524 <_sbrk+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d207      	bcs.n	80024fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ec:	f003 f956 	bl	800579c <__errno>
 80024f0:	4602      	mov	r2, r0
 80024f2:	230c      	movs	r3, #12
 80024f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	e009      	b.n	8002510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <_sbrk+0x64>)
 800250c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20030000 	.word	0x20030000
 800251c:	00000400 	.word	0x00000400
 8002520:	20000188 	.word	0x20000188
 8002524:	200006c0 	.word	0x200006c0

08002528 <errorHandler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void errorHandler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
 800252c:	b672      	cpsid	i
  __disable_irq();
  while (1)
 800252e:	e7fe      	b.n	800252e <errorHandler+0x6>

08002530 <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002534:	f000 f930 	bl	8002798 <HAL_GetTick>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <SystemInit+0x28>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <SystemInit+0x28>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SystemInit+0x28>)
 8002556:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800255a:	609a      	str	r2, [r3, #8]
#endif
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <uartInit>:
#include "stdint.h"

UART_HandleTypeDef stLinkUart;

void uartInit(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	// Change UART instance as needed according to board configuration
	stLinkUart.Instance = USART3;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <uartInit+0x4c>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <uartInit+0x50>)
 8002574:	601a      	str	r2, [r3, #0]
	stLinkUart.Init.BaudRate = 115200;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <uartInit+0x4c>)
 8002578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800257c:	605a      	str	r2, [r3, #4]
	stLinkUart.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <uartInit+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
	stLinkUart.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <uartInit+0x4c>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
	stLinkUart.Init.Parity = UART_PARITY_NONE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <uartInit+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
	stLinkUart.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <uartInit+0x4c>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
	stLinkUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <uartInit+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
	stLinkUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <uartInit+0x4c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&stLinkUart) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <uartInit+0x4c>)
 80025a4:	f002 f998 	bl	80048d8 <HAL_UART_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <uartInit+0x46>
    {
    	errorHandler();
 80025ae:	f7ff ffbb 	bl	8002528 <errorHandler>
    }
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000678 	.word	0x20000678
 80025bc:	40004800 	.word	0x40004800

080025c0 <uart_PrintString>:

void uart_PrintString(char * str)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&stLinkUart, str, strlen(str), HAL_MAX_DELAY);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7fd fe11 	bl	80001f0 <strlen>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <uart_PrintString+0x28>)
 80025da:	f002 f9ca 	bl	8004972 <HAL_UART_Transmit>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000678 	.word	0x20000678

080025ec <uart_PrintFloat>:

void uart_PrintFloat(float value)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t buf[12];

	value *= 100;
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002668 <uart_PrintFloat+0x7c>
 80025fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002602:	edc7 7a01 	vstr	s15, [r7, #4]
	sprintf((char*)buf, "%u.%02\r\n",
			(unsigned int)value/100,
 8002606:	edd7 7a01 	vldr	s15, [r7, #4]
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	ee17 2a90 	vmov	r2, s15
	sprintf((char*)buf, "%u.%02\r\n",
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <uart_PrintFloat+0x80>)
 8002614:	fba3 2302 	umull	r2, r3, r3, r2
 8002618:	095c      	lsrs	r4, r3, #5
			(unsigned int)value % 100);
 800261a:	edd7 7a01 	vldr	s15, [r7, #4]
 800261e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002622:	ee17 2a90 	vmov	r2, s15
	sprintf((char*)buf, "%u.%02\r\n",
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <uart_PrintFloat+0x80>)
 8002628:	fba3 1302 	umull	r1, r3, r3, r2
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	2164      	movs	r1, #100	; 0x64
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f107 000c 	add.w	r0, r7, #12
 800263a:	4622      	mov	r2, r4
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <uart_PrintFloat+0x84>)
 800263e:	f003 f8df 	bl	8005800 <siprintf>

	HAL_UART_Transmit(&stLinkUart, buf, strlen((char*)buf), HAL_MAX_DELAY);}
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd fdd2 	bl	80001f0 <strlen>
 800264c:	4603      	mov	r3, r0
 800264e:	b29a      	uxth	r2, r3
 8002650:	f107 010c 	add.w	r1, r7, #12
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <uart_PrintFloat+0x88>)
 800265a:	f002 f98a 	bl	8004972 <HAL_UART_Transmit>
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd90      	pop	{r4, r7, pc}
 8002666:	bf00      	nop
 8002668:	42c80000 	.word	0x42c80000
 800266c:	51eb851f 	.word	0x51eb851f
 8002670:	080068c0 	.word	0x080068c0
 8002674:	20000678 	.word	0x20000678

08002678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800267c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800267e:	e003      	b.n	8002688 <LoopCopyDataInit>

08002680 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002682:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002684:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002686:	3104      	adds	r1, #4

08002688 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002688:	480b      	ldr	r0, [pc, #44]	; (80026b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800268c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800268e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002690:	d3f6      	bcc.n	8002680 <CopyDataInit>
  ldr  r2, =_sbss
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002694:	e002      	b.n	800269c <LoopFillZerobss>

08002696 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002696:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002698:	f842 3b04 	str.w	r3, [r2], #4

0800269c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800269e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026a0:	d3f9      	bcc.n	8002696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026a2:	f7ff ff4d 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f003 f87f 	bl	80057a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026aa:	f7fe fd43 	bl	8001134 <main>
  bx  lr    
 80026ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026b0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80026b4:	08006938 	.word	0x08006938
  ldr  r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026bc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80026c0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80026c4:	200006c0 	.word	0x200006c0

080026c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC_IRQHandler>
	...

080026cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <HAL_Init+0x40>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_Init+0x40>)
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_Init+0x40>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 f94d 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f808 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fd5c 	bl	80021bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f965 	bl	80029fe <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f000 f92d 	bl	80029aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000004 	.word	0x20000004
 8002768:	2000000c 	.word	0x2000000c
 800276c:	20000008 	.word	0x20000008

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	2000000c 	.word	0x2000000c
 8002794:	200006b8 	.word	0x200006b8

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	200006b8 	.word	0x200006b8

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff ffee 	bl	8002798 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_Delay+0x40>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffde 	bl	8002798 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	2000000c 	.word	0x2000000c

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800281c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	; (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	; (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff3e 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff8e 	bl	80028e8 <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5d 	bl	8002894 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff31 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e177      	b.n	8002d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 8166 	bne.w	8002d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d00b      	beq.n	8002a72 <HAL_GPIO_Init+0x5a>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d007      	beq.n	8002a72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a66:	2b11      	cmp	r3, #17
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b12      	cmp	r3, #18
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0xfc>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b12      	cmp	r3, #18
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80c0 	beq.w	8002d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a64      	ldr	r2, [pc, #400]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a60      	ldr	r2, [pc, #384]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a57      	ldr	r2, [pc, #348]	; (8002d40 <HAL_GPIO_Init+0x328>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d037      	beq.n	8002c56 <HAL_GPIO_Init+0x23e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_GPIO_Init+0x32c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_GPIO_Init+0x23a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_GPIO_Init+0x330>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02b      	beq.n	8002c4e <HAL_GPIO_Init+0x236>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_GPIO_Init+0x334>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d025      	beq.n	8002c4a <HAL_GPIO_Init+0x232>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a53      	ldr	r2, [pc, #332]	; (8002d50 <HAL_GPIO_Init+0x338>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01f      	beq.n	8002c46 <HAL_GPIO_Init+0x22e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_GPIO_Init+0x33c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <HAL_GPIO_Init+0x22a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_GPIO_Init+0x340>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_GPIO_Init+0x344>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x348>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_Init+0x21e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_GPIO_Init+0x34c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_Init+0x21a>
 8002c2e:	2309      	movs	r3, #9
 8002c30:	e012      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c32:	230a      	movs	r3, #10
 8002c34:	e010      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c36:	2308      	movs	r3, #8
 8002c38:	e00e      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	e00c      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c3e:	2306      	movs	r3, #6
 8002c40:	e00a      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x240>
 8002c56:	2300      	movs	r3, #0
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c68:	4934      	ldr	r1, [pc, #208]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c76:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c9a:	4a33      	ldr	r2, [pc, #204]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc4:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <HAL_GPIO_Init+0x350>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f ae84 	bls.w	8002a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	3724      	adds	r7, #36	; 0x24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40021400 	.word	0x40021400
 8002d58:	40021800 	.word	0x40021800
 8002d5c:	40021c00 	.word	0x40021c00
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40022400 	.word	0x40022400
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d88:	e003      	b.n	8002d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	041a      	lsls	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	619a      	str	r2, [r3, #24]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fc60 	bl	8001684 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40013c00 	.word	0x40013c00

08002dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e11f      	b.n	8003022 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fa08 	bl	800220c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e34:	f001 fd28 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8002e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4a7b      	ldr	r2, [pc, #492]	; (800302c <HAL_I2C_Init+0x25c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d807      	bhi.n	8002e54 <HAL_I2C_Init+0x84>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a7a      	ldr	r2, [pc, #488]	; (8003030 <HAL_I2C_Init+0x260>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e006      	b.n	8002e62 <HAL_I2C_Init+0x92>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a77      	ldr	r2, [pc, #476]	; (8003034 <HAL_I2C_Init+0x264>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	bf94      	ite	ls
 8002e5c:	2301      	movls	r3, #1
 8002e5e:	2300      	movhi	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0db      	b.n	8003022 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a72      	ldr	r2, [pc, #456]	; (8003038 <HAL_I2C_Init+0x268>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0c9b      	lsrs	r3, r3, #18
 8002e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a64      	ldr	r2, [pc, #400]	; (800302c <HAL_I2C_Init+0x25c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d802      	bhi.n	8002ea4 <HAL_I2C_Init+0xd4>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e009      	b.n	8002eb8 <HAL_I2C_Init+0xe8>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	4a63      	ldr	r2, [pc, #396]	; (800303c <HAL_I2C_Init+0x26c>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4956      	ldr	r1, [pc, #344]	; (800302c <HAL_I2C_Init+0x25c>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d80d      	bhi.n	8002ef4 <HAL_I2C_Init+0x124>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e59      	subs	r1, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	bf38      	it	cc
 8002ef0:	2304      	movcc	r3, #4
 8002ef2:	e04f      	b.n	8002f94 <HAL_I2C_Init+0x1c4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <HAL_I2C_Init+0x150>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e012      	b.n	8002f46 <HAL_I2C_Init+0x176>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x17e>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e022      	b.n	8002f94 <HAL_I2C_Init+0x1c4>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10e      	bne.n	8002f74 <HAL_I2C_Init+0x1a4>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e58      	subs	r0, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	440b      	add	r3, r1
 8002f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f72:	e00f      	b.n	8002f94 <HAL_I2C_Init+0x1c4>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6809      	ldr	r1, [r1, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6911      	ldr	r1, [r2, #16]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	000186a0 	.word	0x000186a0
 8003030:	001e847f 	.word	0x001e847f
 8003034:	003d08ff 	.word	0x003d08ff
 8003038:	431bde83 	.word	0x431bde83
 800303c:	10624dd3 	.word	0x10624dd3

08003040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	460b      	mov	r3, r1
 800304e:	817b      	strh	r3, [r7, #10]
 8003050:	4613      	mov	r3, r2
 8003052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7ff fba0 	bl	8002798 <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	f040 80e0 	bne.w	8003228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2319      	movs	r3, #25
 800306e:	2201      	movs	r2, #1
 8003070:	4970      	ldr	r1, [pc, #448]	; (8003234 <HAL_I2C_Master_Transmit+0x1f4>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fc58 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	e0d3      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x50>
 800308c:	2302      	movs	r3, #2
 800308e:	e0cc      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d007      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2221      	movs	r2, #33	; 0x21
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2210      	movs	r2, #16
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	893a      	ldrh	r2, [r7, #8]
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a50      	ldr	r2, [pc, #320]	; (8003238 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fac2 	bl	8003688 <I2C_MasterRequestWrite>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e08d      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003124:	e066      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6a39      	ldr	r1, [r7, #32]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fcd2 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b04      	cmp	r3, #4
 800313c:	d107      	bne.n	800314e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d11b      	bne.n	80031c8 <HAL_I2C_Master_Transmit+0x188>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d017      	beq.n	80031c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	6a39      	ldr	r1, [r7, #32]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fcc2 	bl	8003b56 <I2C_WaitOnBTFFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d107      	bne.n	80031f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e01a      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d194      	bne.n	8003126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	00100002 	.word	0x00100002
 8003238:	ffff0000 	.word	0xffff0000

0800323c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	461a      	mov	r2, r3
 8003248:	460b      	mov	r3, r1
 800324a:	817b      	strh	r3, [r7, #10]
 800324c:	4613      	mov	r3, r2
 800324e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7ff faa2 	bl	8002798 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	f040 820b 	bne.w	800367a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2319      	movs	r3, #25
 800326a:	2201      	movs	r2, #1
 800326c:	497c      	ldr	r1, [pc, #496]	; (8003460 <HAL_I2C_Master_Receive+0x224>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fb5a 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
 800327c:	e1fe      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_I2C_Master_Receive+0x50>
 8003288:	2302      	movs	r3, #2
 800328a:	e1f7      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d007      	beq.n	80032b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2222      	movs	r2, #34	; 0x22
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2210      	movs	r2, #16
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a5c      	ldr	r2, [pc, #368]	; (8003464 <HAL_I2C_Master_Receive+0x228>)
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fa46 	bl	800378c <I2C_MasterRequestRead>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1b8      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d113      	bne.n	800333a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	623b      	str	r3, [r7, #32]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	623b      	str	r3, [r7, #32]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e18c      	b.n	8003654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b01      	cmp	r3, #1
 8003340:	d11b      	bne.n	800337a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e16c      	b.n	8003654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	2b02      	cmp	r3, #2
 8003380:	d11b      	bne.n	80033ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	e14c      	b.n	8003654 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033e0:	e138      	b.n	8003654 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	f200 80f1 	bhi.w	80035ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d123      	bne.n	800343c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fbed 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e139      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800343a:	e10b      	b.n	8003654 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	2b02      	cmp	r3, #2
 8003442:	d14e      	bne.n	80034e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2200      	movs	r2, #0
 800344c:	4906      	ldr	r1, [pc, #24]	; (8003468 <HAL_I2C_Master_Receive+0x22c>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa6a 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e10e      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
 800345e:	bf00      	nop
 8003460:	00100002 	.word	0x00100002
 8003464:	ffff0000 	.word	0xffff0000
 8003468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e0:	e0b8      	b.n	8003654 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2200      	movs	r2, #0
 80034ea:	4966      	ldr	r1, [pc, #408]	; (8003684 <HAL_I2C_Master_Receive+0x448>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fa1b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0bf      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	2200      	movs	r2, #0
 8003546:	494f      	ldr	r1, [pc, #316]	; (8003684 <HAL_I2C_Master_Receive+0x448>)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f9ed 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e091      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035cc:	e042      	b.n	8003654 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fb00 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e04c      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d118      	bne.n	8003654 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f aec2 	bne.w	80033e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00010004 	.word	0x00010004

08003688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	460b      	mov	r3, r1
 8003696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d006      	beq.n	80036b2 <I2C_MasterRequestWrite+0x2a>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d003      	beq.n	80036b2 <I2C_MasterRequestWrite+0x2a>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b0:	d108      	bne.n	80036c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e00b      	b.n	80036dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	2b12      	cmp	r3, #18
 80036ca:	d107      	bne.n	80036dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f91d 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003702:	d103      	bne.n	800370c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e035      	b.n	800377c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003718:	d108      	bne.n	800372c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003728:	611a      	str	r2, [r3, #16]
 800372a:	e01b      	b.n	8003764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800372c:	897b      	ldrh	r3, [r7, #10]
 800372e:	11db      	asrs	r3, r3, #7
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f003 0306 	and.w	r3, r3, #6
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f063 030f 	orn	r3, r3, #15
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	490e      	ldr	r1, [pc, #56]	; (8003784 <I2C_MasterRequestWrite+0xfc>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f943 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e010      	b.n	800377c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4907      	ldr	r1, [pc, #28]	; (8003788 <I2C_MasterRequestWrite+0x100>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f933 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	00010008 	.word	0x00010008
 8003788:	00010002 	.word	0x00010002

0800378c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	460b      	mov	r3, r1
 800379a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d006      	beq.n	80037c6 <I2C_MasterRequestRead+0x3a>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d003      	beq.n	80037c6 <I2C_MasterRequestRead+0x3a>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037c4:	d108      	bne.n	80037d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e00b      	b.n	80037f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	2b11      	cmp	r3, #17
 80037de:	d107      	bne.n	80037f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f893 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	d103      	bne.n	8003820 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e079      	b.n	8003918 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800382c:	d108      	bne.n	8003840 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	e05f      	b.n	8003900 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	11db      	asrs	r3, r3, #7
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 0306 	and.w	r3, r3, #6
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f063 030f 	orn	r3, r3, #15
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4930      	ldr	r1, [pc, #192]	; (8003920 <I2C_MasterRequestRead+0x194>)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f8b9 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e054      	b.n	8003918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4929      	ldr	r1, [pc, #164]	; (8003924 <I2C_MasterRequestRead+0x198>)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8a9 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e044      	b.n	8003918 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f831 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038da:	d103      	bne.n	80038e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e017      	b.n	8003918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	11db      	asrs	r3, r3, #7
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 0306 	and.w	r3, r3, #6
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f063 030e 	orn	r3, r3, #14
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4907      	ldr	r1, [pc, #28]	; (8003924 <I2C_MasterRequestRead+0x198>)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f865 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	00010008 	.word	0x00010008
 8003924:	00010002 	.word	0x00010002

08003928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003938:	e025      	b.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d021      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe ff29 	bl	8002798 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d116      	bne.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e023      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10d      	bne.n	80039ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	e00c      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0b6      	beq.n	800393a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e4:	e051      	b.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d123      	bne.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e046      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d021      	beq.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fe fea7 	bl	8002798 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e020      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10c      	bne.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e00b      	b.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d18d      	bne.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae0:	e02d      	b.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f8ce 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02d      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d021      	beq.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fe fe4d 	bl	8002798 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d116      	bne.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d1ca      	bne.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b62:	e02d      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f88d 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e02d      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d021      	beq.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe fe0c 	bl	8002798 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e007      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d1ca      	bne.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be4:	e042      	b.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d119      	bne.n	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e029      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fdb6 	bl	8002798 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d1b5      	bne.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d11b      	bne.n	8003cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d129      	bne.n	8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2224      	movs	r2, #36	; 0x24
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0210 	bic.w	r2, r2, #16
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d12a      	bne.n	8003dca <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d94:	89fb      	ldrh	r3, [r7, #14]
 8003d96:	f023 030f 	bic.w	r3, r3, #15
 8003d9a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	89fb      	ldrh	r3, [r7, #14]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	89fa      	ldrh	r2, [r7, #14]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dda:	b08f      	sub	sp, #60	; 0x3c
 8003ddc:	af0a      	add	r7, sp, #40	; 0x28
 8003dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e10f      	b.n	800400a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe fac9 	bl	800239c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fa62 	bl	80052f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	687e      	ldr	r6, [r7, #4]
 8003e36:	466d      	mov	r5, sp
 8003e38:	f106 0410 	add.w	r4, r6, #16
 8003e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e48:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e4c:	1d33      	adds	r3, r6, #4
 8003e4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e50:	6838      	ldr	r0, [r7, #0]
 8003e52:	f001 f9ed 	bl	8005230 <USB_CoreInit>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0d0      	b.n	800400a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 fa50 	bl	8005314 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e04a      	b.n	8003f10 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	333d      	adds	r3, #61	; 0x3d
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	333c      	adds	r3, #60	; 0x3c
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	b298      	uxth	r0, r3
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3342      	adds	r3, #66	; 0x42
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	333f      	adds	r3, #63	; 0x3f
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3344      	adds	r3, #68	; 0x44
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3348      	adds	r3, #72	; 0x48
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3350      	adds	r3, #80	; 0x50
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3af      	bcc.n	8003e7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e044      	b.n	8003faa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d3b5      	bcc.n	8003f20 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	687e      	ldr	r6, [r7, #4]
 8003fbc:	466d      	mov	r5, sp
 8003fbe:	f106 0410 	add.w	r4, r6, #16
 8003fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fd2:	1d33      	adds	r3, r6, #4
 8003fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd6:	6838      	ldr	r0, [r7, #0]
 8003fd8:	f001 f9c6 	bl	8005368 <USB_DevInit>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00d      	b.n	800400a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f001 fb75 	bl	80056f2 <USB_DevDisconnect>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e25b      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	4ba3      	ldr	r3, [pc, #652]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d00c      	beq.n	8004058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403e:	4ba0      	ldr	r3, [pc, #640]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d112      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b9d      	ldr	r3, [pc, #628]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004056:	d10b      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	4b99      	ldr	r3, [pc, #612]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05b      	beq.n	800411c <HAL_RCC_OscConfig+0x108>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d157      	bne.n	800411c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e236      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x74>
 800407a:	4b91      	ldr	r3, [pc, #580]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a90      	ldr	r2, [pc, #576]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e01d      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x98>
 8004092:	4b8b      	ldr	r3, [pc, #556]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a8a      	ldr	r2, [pc, #552]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a87      	ldr	r2, [pc, #540]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 80040ac:	4b84      	ldr	r3, [pc, #528]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a83      	ldr	r2, [pc, #524]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b81      	ldr	r3, [pc, #516]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a80      	ldr	r2, [pc, #512]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fb64 	bl	8002798 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fe fb60 	bl	8002798 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1fb      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0xc0>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe fb50 	bl	8002798 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fe fb4c 	bl	8002798 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	; 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1e7      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0xe8>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b62      	ldr	r3, [pc, #392]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1bb      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b56      	ldr	r3, [pc, #344]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4952      	ldr	r1, [pc, #328]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b4f      	ldr	r3, [pc, #316]	; (80042c4 <HAL_RCC_OscConfig+0x2b0>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fe fb05 	bl	8002798 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004192:	f7fe fb01 	bl	8002798 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e19c      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b46      	ldr	r3, [pc, #280]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b43      	ldr	r3, [pc, #268]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4940      	ldr	r1, [pc, #256]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_RCC_OscConfig+0x2b0>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe fae4 	bl	8002798 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fe fae0 	bl	8002798 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e17b      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d030      	beq.n	8004260 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <HAL_RCC_OscConfig+0x2b4>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fe fac4 	bl	8002798 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004214:	f7fe fac0 	bl	8002798 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e15b      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x200>
 8004232:	e015      	b.n	8004260 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_RCC_OscConfig+0x2b4>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7fe faad 	bl	8002798 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004242:	f7fe faa9 	bl	8002798 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e144      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f0      	bne.n	8004242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a0 	beq.w	80043ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_OscConfig+0x2b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d121      	bne.n	80042ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_RCC_OscConfig+0x2b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <HAL_RCC_OscConfig+0x2b8>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b6:	f7fe fa6f 	bl	8002798 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	e011      	b.n	80042e2 <HAL_RCC_OscConfig+0x2ce>
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	42470000 	.word	0x42470000
 80042c8:	42470e80 	.word	0x42470e80
 80042cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d0:	f7fe fa62 	bl	8002798 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0fd      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e2:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <HAL_RCC_OscConfig+0x4d4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d106      	bne.n	8004304 <HAL_RCC_OscConfig+0x2f0>
 80042f6:	4b7d      	ldr	r3, [pc, #500]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a7c      	ldr	r2, [pc, #496]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	e01c      	b.n	800433e <HAL_RCC_OscConfig+0x32a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b05      	cmp	r3, #5
 800430a:	d10c      	bne.n	8004326 <HAL_RCC_OscConfig+0x312>
 800430c:	4b77      	ldr	r3, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4a76      	ldr	r2, [pc, #472]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004312:	f043 0304 	orr.w	r3, r3, #4
 8004316:	6713      	str	r3, [r2, #112]	; 0x70
 8004318:	4b74      	ldr	r3, [pc, #464]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a73      	ldr	r2, [pc, #460]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
 8004324:	e00b      	b.n	800433e <HAL_RCC_OscConfig+0x32a>
 8004326:	4b71      	ldr	r3, [pc, #452]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4a70      	ldr	r2, [pc, #448]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
 8004332:	4b6e      	ldr	r3, [pc, #440]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a6d      	ldr	r2, [pc, #436]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d015      	beq.n	8004372 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004346:	f7fe fa27 	bl	8002798 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434c:	e00a      	b.n	8004364 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fe fa23 	bl	8002798 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	; 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e0bc      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	4b61      	ldr	r3, [pc, #388]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ee      	beq.n	800434e <HAL_RCC_OscConfig+0x33a>
 8004370:	e014      	b.n	800439c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004372:	f7fe fa11 	bl	8002798 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fe fa0d 	bl	8002798 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	; 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0a6      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004390:	4b56      	ldr	r3, [pc, #344]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1ee      	bne.n	800437a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d105      	bne.n	80043ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a2:	4b52      	ldr	r3, [pc, #328]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	4a51      	ldr	r2, [pc, #324]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 80043a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8092 	beq.w	80044dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d05c      	beq.n	800447e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d141      	bne.n	8004450 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043cc:	4b48      	ldr	r3, [pc, #288]	; (80044f0 <HAL_RCC_OscConfig+0x4dc>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fe f9e1 	bl	8002798 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043da:	f7fe f9dd 	bl	8002798 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e078      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ec:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	019b      	lsls	r3, r3, #6
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	3b01      	subs	r3, #1
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	4933      	ldr	r1, [pc, #204]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004422:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <HAL_RCC_OscConfig+0x4dc>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe f9b6 	bl	8002798 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fe f9b2 	bl	8002798 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e04d      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x41c>
 800444e:	e045      	b.n	80044dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x4dc>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe f99f 	bl	8002798 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445e:	f7fe f99b 	bl	8002798 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e036      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x44a>
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e029      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800448a:	4b18      	ldr	r3, [pc, #96]	; (80044ec <HAL_RCC_OscConfig+0x4d8>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	429a      	cmp	r2, r3
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d115      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044b2:	4013      	ands	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d10d      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d106      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40007000 	.word	0x40007000
 80044ec:	40023800 	.word	0x40023800
 80044f0:	42470060 	.word	0x42470060

080044f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0cc      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004508:	4b68      	ldr	r3, [pc, #416]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d90c      	bls.n	8004530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0b8      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004548:	4b59      	ldr	r3, [pc, #356]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a58      	ldr	r2, [pc, #352]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004560:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a52      	ldr	r2, [pc, #328]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800456a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456c:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	494d      	ldr	r1, [pc, #308]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d044      	beq.n	8004614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d119      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e07f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e06f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e067      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d2:	4b37      	ldr	r3, [pc, #220]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 0203 	bic.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4934      	ldr	r1, [pc, #208]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e4:	f7fe f8d8 	bl	8002798 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fe f8d4 	bl	8002798 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e04f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 020c 	and.w	r2, r3, #12
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	429a      	cmp	r2, r3
 8004612:	d1eb      	bne.n	80045ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d20c      	bcs.n	800463c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b22      	ldr	r3, [pc, #136]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e032      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4916      	ldr	r1, [pc, #88]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	490e      	ldr	r1, [pc, #56]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800467a:	f000 f821 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 800467e:	4601      	mov	r1, r0
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	5cd3      	ldrb	r3, [r2, r3]
 800468e:	fa21 f303 	lsr.w	r3, r1, r3
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe f838 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023c00 	.word	0x40023c00
 80046b0:	40023800 	.word	0x40023800
 80046b4:	080068d4 	.word	0x080068d4
 80046b8:	20000004 	.word	0x20000004
 80046bc:	20000008 	.word	0x20000008

080046c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	2300      	movs	r3, #0
 80046d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d6:	4b63      	ldr	r3, [pc, #396]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d007      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0x32>
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d008      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x38>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 80b4 	bne.w	8004854 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ec:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046ee:	60bb      	str	r3, [r7, #8]
       break;
 80046f0:	e0b3      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f2:	4b5e      	ldr	r3, [pc, #376]	; (800486c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80046f4:	60bb      	str	r3, [r7, #8]
      break;
 80046f6:	e0b0      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f8:	4b5a      	ldr	r3, [pc, #360]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004700:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004702:	4b58      	ldr	r3, [pc, #352]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d04a      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b55      	ldr	r3, [pc, #340]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	f240 11ff 	movw	r1, #511	; 0x1ff
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	ea03 0501 	and.w	r5, r3, r1
 8004724:	ea04 0602 	and.w	r6, r4, r2
 8004728:	4629      	mov	r1, r5
 800472a:	4632      	mov	r2, r6
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	f04f 0400 	mov.w	r4, #0
 8004734:	0154      	lsls	r4, r2, #5
 8004736:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800473a:	014b      	lsls	r3, r1, #5
 800473c:	4619      	mov	r1, r3
 800473e:	4622      	mov	r2, r4
 8004740:	1b49      	subs	r1, r1, r5
 8004742:	eb62 0206 	sbc.w	r2, r2, r6
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	f04f 0400 	mov.w	r4, #0
 800474e:	0194      	lsls	r4, r2, #6
 8004750:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004754:	018b      	lsls	r3, r1, #6
 8004756:	1a5b      	subs	r3, r3, r1
 8004758:	eb64 0402 	sbc.w	r4, r4, r2
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	00e2      	lsls	r2, r4, #3
 8004766:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800476a:	00d9      	lsls	r1, r3, #3
 800476c:	460b      	mov	r3, r1
 800476e:	4614      	mov	r4, r2
 8004770:	195b      	adds	r3, r3, r5
 8004772:	eb44 0406 	adc.w	r4, r4, r6
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	0262      	lsls	r2, r4, #9
 8004780:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004784:	0259      	lsls	r1, r3, #9
 8004786:	460b      	mov	r3, r1
 8004788:	4614      	mov	r4, r2
 800478a:	4618      	mov	r0, r3
 800478c:	4621      	mov	r1, r4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f04f 0400 	mov.w	r4, #0
 8004794:	461a      	mov	r2, r3
 8004796:	4623      	mov	r3, r4
 8004798:	f7fc fa5e 	bl	8000c58 <__aeabi_uldivmod>
 800479c:	4603      	mov	r3, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e049      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a4:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	f04f 0400 	mov.w	r4, #0
 80047ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	ea03 0501 	and.w	r5, r3, r1
 80047ba:	ea04 0602 	and.w	r6, r4, r2
 80047be:	4629      	mov	r1, r5
 80047c0:	4632      	mov	r2, r6
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	f04f 0400 	mov.w	r4, #0
 80047ca:	0154      	lsls	r4, r2, #5
 80047cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047d0:	014b      	lsls	r3, r1, #5
 80047d2:	4619      	mov	r1, r3
 80047d4:	4622      	mov	r2, r4
 80047d6:	1b49      	subs	r1, r1, r5
 80047d8:	eb62 0206 	sbc.w	r2, r2, r6
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	f04f 0400 	mov.w	r4, #0
 80047e4:	0194      	lsls	r4, r2, #6
 80047e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047ea:	018b      	lsls	r3, r1, #6
 80047ec:	1a5b      	subs	r3, r3, r1
 80047ee:	eb64 0402 	sbc.w	r4, r4, r2
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	00e2      	lsls	r2, r4, #3
 80047fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004800:	00d9      	lsls	r1, r3, #3
 8004802:	460b      	mov	r3, r1
 8004804:	4614      	mov	r4, r2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	eb44 0406 	adc.w	r4, r4, r6
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	02a2      	lsls	r2, r4, #10
 8004816:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800481a:	0299      	lsls	r1, r3, #10
 800481c:	460b      	mov	r3, r1
 800481e:	4614      	mov	r4, r2
 8004820:	4618      	mov	r0, r3
 8004822:	4621      	mov	r1, r4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	461a      	mov	r2, r3
 800482c:	4623      	mov	r3, r4
 800482e:	f7fc fa13 	bl	8000c58 <__aeabi_uldivmod>
 8004832:	4603      	mov	r3, r0
 8004834:	460c      	mov	r4, r1
 8004836:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	3301      	adds	r3, #1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	60bb      	str	r3, [r7, #8]
      break;
 8004852:	e002      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004856:	60bb      	str	r3, [r7, #8]
      break;
 8004858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485a:	68bb      	ldr	r3, [r7, #8]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	00f42400 	.word	0x00f42400
 800486c:	007a1200 	.word	0x007a1200

08004870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <HAL_RCC_GetHCLKFreq+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000004 	.word	0x20000004

08004888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800488c:	f7ff fff0 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8004890:	4601      	mov	r1, r0
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0a9b      	lsrs	r3, r3, #10
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4a03      	ldr	r2, [pc, #12]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800
 80048ac:	080068e4 	.word	0x080068e4

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048b4:	f7ff ffdc 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048b8:	4601      	mov	r1, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0b5b      	lsrs	r3, r3, #13
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4a03      	ldr	r2, [pc, #12]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c6:	5cd3      	ldrb	r3, [r2, r3]
 80048c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	080068e4 	.word	0x080068e4

080048d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e03f      	b.n	800496a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd fccc 	bl	800229c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	; 0x24
 8004908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800491a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f90b 	bl	8004b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b088      	sub	sp, #32
 8004976:	af02      	add	r7, sp, #8
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b20      	cmp	r3, #32
 8004990:	f040 8083 	bne.w	8004a9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_UART_Transmit+0x2e>
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e07b      	b.n	8004a9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Transmit+0x40>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e074      	b.n	8004a9c <HAL_UART_Transmit+0x12a>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2221      	movs	r2, #33	; 0x21
 80049c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fee6 	bl	8002798 <HAL_GetTick>
 80049cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80049e2:	e042      	b.n	8004a6a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	d122      	bne.n	8004a42 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f84c 	bl	8004aa4 <UART_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e042      	b.n	8004a9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a28:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	3302      	adds	r3, #2
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	e017      	b.n	8004a6a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	e013      	b.n	8004a6a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f829 	bl	8004aa4 <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e01f      	b.n	8004a9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	60ba      	str	r2, [r7, #8]
 8004a62:	781a      	ldrb	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1b7      	bne.n	80049e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2140      	movs	r1, #64	; 0x40
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f810 	bl	8004aa4 <UART_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e006      	b.n	8004a9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab4:	e02c      	b.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d028      	beq.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac4:	f7fd fe68 	bl	8002798 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d21d      	bcs.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ae2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e00f      	b.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d0c3      	beq.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b7a:	f023 030c 	bic.w	r3, r3, #12
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	430b      	orrs	r3, r1
 8004b86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba6:	f040 818b 	bne.w	8004ec0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4ac1      	ldr	r2, [pc, #772]	; (8004eb4 <UART_SetConfig+0x37c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d005      	beq.n	8004bc0 <UART_SetConfig+0x88>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4abf      	ldr	r2, [pc, #764]	; (8004eb8 <UART_SetConfig+0x380>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	f040 80bd 	bne.w	8004d3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7ff fe76 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8004bc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	461d      	mov	r5, r3
 8004bca:	f04f 0600 	mov.w	r6, #0
 8004bce:	46a8      	mov	r8, r5
 8004bd0:	46b1      	mov	r9, r6
 8004bd2:	eb18 0308 	adds.w	r3, r8, r8
 8004bd6:	eb49 0409 	adc.w	r4, r9, r9
 8004bda:	4698      	mov	r8, r3
 8004bdc:	46a1      	mov	r9, r4
 8004bde:	eb18 0805 	adds.w	r8, r8, r5
 8004be2:	eb49 0906 	adc.w	r9, r9, r6
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bf2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bf6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bfa:	4688      	mov	r8, r1
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	eb18 0005 	adds.w	r0, r8, r5
 8004c02:	eb49 0106 	adc.w	r1, r9, r6
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	f04f 0600 	mov.w	r6, #0
 8004c10:	196b      	adds	r3, r5, r5
 8004c12:	eb46 0406 	adc.w	r4, r6, r6
 8004c16:	461a      	mov	r2, r3
 8004c18:	4623      	mov	r3, r4
 8004c1a:	f7fc f81d 	bl	8000c58 <__aeabi_uldivmod>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	461a      	mov	r2, r3
 8004c24:	4ba5      	ldr	r3, [pc, #660]	; (8004ebc <UART_SetConfig+0x384>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	461d      	mov	r5, r3
 8004c34:	f04f 0600 	mov.w	r6, #0
 8004c38:	46a9      	mov	r9, r5
 8004c3a:	46b2      	mov	sl, r6
 8004c3c:	eb19 0309 	adds.w	r3, r9, r9
 8004c40:	eb4a 040a 	adc.w	r4, sl, sl
 8004c44:	4699      	mov	r9, r3
 8004c46:	46a2      	mov	sl, r4
 8004c48:	eb19 0905 	adds.w	r9, r9, r5
 8004c4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c50:	f04f 0100 	mov.w	r1, #0
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c64:	4689      	mov	r9, r1
 8004c66:	4692      	mov	sl, r2
 8004c68:	eb19 0005 	adds.w	r0, r9, r5
 8004c6c:	eb4a 0106 	adc.w	r1, sl, r6
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	461d      	mov	r5, r3
 8004c76:	f04f 0600 	mov.w	r6, #0
 8004c7a:	196b      	adds	r3, r5, r5
 8004c7c:	eb46 0406 	adc.w	r4, r6, r6
 8004c80:	461a      	mov	r2, r3
 8004c82:	4623      	mov	r3, r4
 8004c84:	f7fb ffe8 	bl	8000c58 <__aeabi_uldivmod>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b8b      	ldr	r3, [pc, #556]	; (8004ebc <UART_SetConfig+0x384>)
 8004c90:	fba3 1302 	umull	r1, r3, r3, r2
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	2164      	movs	r1, #100	; 0x64
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	3332      	adds	r3, #50	; 0x32
 8004ca2:	4a86      	ldr	r2, [pc, #536]	; (8004ebc <UART_SetConfig+0x384>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cb0:	4498      	add	r8, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	461d      	mov	r5, r3
 8004cb6:	f04f 0600 	mov.w	r6, #0
 8004cba:	46a9      	mov	r9, r5
 8004cbc:	46b2      	mov	sl, r6
 8004cbe:	eb19 0309 	adds.w	r3, r9, r9
 8004cc2:	eb4a 040a 	adc.w	r4, sl, sl
 8004cc6:	4699      	mov	r9, r3
 8004cc8:	46a2      	mov	sl, r4
 8004cca:	eb19 0905 	adds.w	r9, r9, r5
 8004cce:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cd2:	f04f 0100 	mov.w	r1, #0
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ce2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ce6:	4689      	mov	r9, r1
 8004ce8:	4692      	mov	sl, r2
 8004cea:	eb19 0005 	adds.w	r0, r9, r5
 8004cee:	eb4a 0106 	adc.w	r1, sl, r6
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	f04f 0600 	mov.w	r6, #0
 8004cfc:	196b      	adds	r3, r5, r5
 8004cfe:	eb46 0406 	adc.w	r4, r6, r6
 8004d02:	461a      	mov	r2, r3
 8004d04:	4623      	mov	r3, r4
 8004d06:	f7fb ffa7 	bl	8000c58 <__aeabi_uldivmod>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b6a      	ldr	r3, [pc, #424]	; (8004ebc <UART_SetConfig+0x384>)
 8004d12:	fba3 1302 	umull	r1, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2164      	movs	r1, #100	; 0x64
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	3332      	adds	r3, #50	; 0x32
 8004d24:	4a65      	ldr	r2, [pc, #404]	; (8004ebc <UART_SetConfig+0x384>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	f003 0207 	and.w	r2, r3, #7
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4442      	add	r2, r8
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	e26f      	b.n	800521a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d3a:	f7ff fda5 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8004d3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	461d      	mov	r5, r3
 8004d44:	f04f 0600 	mov.w	r6, #0
 8004d48:	46a8      	mov	r8, r5
 8004d4a:	46b1      	mov	r9, r6
 8004d4c:	eb18 0308 	adds.w	r3, r8, r8
 8004d50:	eb49 0409 	adc.w	r4, r9, r9
 8004d54:	4698      	mov	r8, r3
 8004d56:	46a1      	mov	r9, r4
 8004d58:	eb18 0805 	adds.w	r8, r8, r5
 8004d5c:	eb49 0906 	adc.w	r9, r9, r6
 8004d60:	f04f 0100 	mov.w	r1, #0
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d74:	4688      	mov	r8, r1
 8004d76:	4691      	mov	r9, r2
 8004d78:	eb18 0005 	adds.w	r0, r8, r5
 8004d7c:	eb49 0106 	adc.w	r1, r9, r6
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	461d      	mov	r5, r3
 8004d86:	f04f 0600 	mov.w	r6, #0
 8004d8a:	196b      	adds	r3, r5, r5
 8004d8c:	eb46 0406 	adc.w	r4, r6, r6
 8004d90:	461a      	mov	r2, r3
 8004d92:	4623      	mov	r3, r4
 8004d94:	f7fb ff60 	bl	8000c58 <__aeabi_uldivmod>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <UART_SetConfig+0x384>)
 8004da0:	fba3 2302 	umull	r2, r3, r3, r2
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	461d      	mov	r5, r3
 8004dae:	f04f 0600 	mov.w	r6, #0
 8004db2:	46a9      	mov	r9, r5
 8004db4:	46b2      	mov	sl, r6
 8004db6:	eb19 0309 	adds.w	r3, r9, r9
 8004dba:	eb4a 040a 	adc.w	r4, sl, sl
 8004dbe:	4699      	mov	r9, r3
 8004dc0:	46a2      	mov	sl, r4
 8004dc2:	eb19 0905 	adds.w	r9, r9, r5
 8004dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dde:	4689      	mov	r9, r1
 8004de0:	4692      	mov	sl, r2
 8004de2:	eb19 0005 	adds.w	r0, r9, r5
 8004de6:	eb4a 0106 	adc.w	r1, sl, r6
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	461d      	mov	r5, r3
 8004df0:	f04f 0600 	mov.w	r6, #0
 8004df4:	196b      	adds	r3, r5, r5
 8004df6:	eb46 0406 	adc.w	r4, r6, r6
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	f7fb ff2b 	bl	8000c58 <__aeabi_uldivmod>
 8004e02:	4603      	mov	r3, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <UART_SetConfig+0x384>)
 8004e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2164      	movs	r1, #100	; 0x64
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	3332      	adds	r3, #50	; 0x32
 8004e1c:	4a27      	ldr	r2, [pc, #156]	; (8004ebc <UART_SetConfig+0x384>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e2a:	4498      	add	r8, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	461d      	mov	r5, r3
 8004e30:	f04f 0600 	mov.w	r6, #0
 8004e34:	46a9      	mov	r9, r5
 8004e36:	46b2      	mov	sl, r6
 8004e38:	eb19 0309 	adds.w	r3, r9, r9
 8004e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8004e40:	4699      	mov	r9, r3
 8004e42:	46a2      	mov	sl, r4
 8004e44:	eb19 0905 	adds.w	r9, r9, r5
 8004e48:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e60:	4689      	mov	r9, r1
 8004e62:	4692      	mov	sl, r2
 8004e64:	eb19 0005 	adds.w	r0, r9, r5
 8004e68:	eb4a 0106 	adc.w	r1, sl, r6
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	461d      	mov	r5, r3
 8004e72:	f04f 0600 	mov.w	r6, #0
 8004e76:	196b      	adds	r3, r5, r5
 8004e78:	eb46 0406 	adc.w	r4, r6, r6
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4623      	mov	r3, r4
 8004e80:	f7fb feea 	bl	8000c58 <__aeabi_uldivmod>
 8004e84:	4603      	mov	r3, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <UART_SetConfig+0x384>)
 8004e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2164      	movs	r1, #100	; 0x64
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	3332      	adds	r3, #50	; 0x32
 8004e9e:	4a07      	ldr	r2, [pc, #28]	; (8004ebc <UART_SetConfig+0x384>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f003 0207 	and.w	r2, r3, #7
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4442      	add	r2, r8
 8004eb0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004eb2:	e1b2      	b.n	800521a <UART_SetConfig+0x6e2>
 8004eb4:	40011000 	.word	0x40011000
 8004eb8:	40011400 	.word	0x40011400
 8004ebc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4ad7      	ldr	r2, [pc, #860]	; (8005224 <UART_SetConfig+0x6ec>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d005      	beq.n	8004ed6 <UART_SetConfig+0x39e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4ad6      	ldr	r2, [pc, #856]	; (8005228 <UART_SetConfig+0x6f0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	f040 80d1 	bne.w	8005078 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ed6:	f7ff fceb 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8004eda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	469a      	mov	sl, r3
 8004ee0:	f04f 0b00 	mov.w	fp, #0
 8004ee4:	46d0      	mov	r8, sl
 8004ee6:	46d9      	mov	r9, fp
 8004ee8:	eb18 0308 	adds.w	r3, r8, r8
 8004eec:	eb49 0409 	adc.w	r4, r9, r9
 8004ef0:	4698      	mov	r8, r3
 8004ef2:	46a1      	mov	r9, r4
 8004ef4:	eb18 080a 	adds.w	r8, r8, sl
 8004ef8:	eb49 090b 	adc.w	r9, r9, fp
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f10:	4688      	mov	r8, r1
 8004f12:	4691      	mov	r9, r2
 8004f14:	eb1a 0508 	adds.w	r5, sl, r8
 8004f18:	eb4b 0609 	adc.w	r6, fp, r9
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4619      	mov	r1, r3
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	f04f 0400 	mov.w	r4, #0
 8004f2e:	0094      	lsls	r4, r2, #2
 8004f30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f34:	008b      	lsls	r3, r1, #2
 8004f36:	461a      	mov	r2, r3
 8004f38:	4623      	mov	r3, r4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	f7fb fe8b 	bl	8000c58 <__aeabi_uldivmod>
 8004f42:	4603      	mov	r3, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	461a      	mov	r2, r3
 8004f48:	4bb8      	ldr	r3, [pc, #736]	; (800522c <UART_SetConfig+0x6f4>)
 8004f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	469b      	mov	fp, r3
 8004f58:	f04f 0c00 	mov.w	ip, #0
 8004f5c:	46d9      	mov	r9, fp
 8004f5e:	46e2      	mov	sl, ip
 8004f60:	eb19 0309 	adds.w	r3, r9, r9
 8004f64:	eb4a 040a 	adc.w	r4, sl, sl
 8004f68:	4699      	mov	r9, r3
 8004f6a:	46a2      	mov	sl, r4
 8004f6c:	eb19 090b 	adds.w	r9, r9, fp
 8004f70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f74:	f04f 0100 	mov.w	r1, #0
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f88:	4689      	mov	r9, r1
 8004f8a:	4692      	mov	sl, r2
 8004f8c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f90:	eb4c 060a 	adc.w	r6, ip, sl
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f04f 0400 	mov.w	r4, #0
 8004fa6:	0094      	lsls	r4, r2, #2
 8004fa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fac:	008b      	lsls	r3, r1, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	f7fb fe4f 	bl	8000c58 <__aeabi_uldivmod>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b9a      	ldr	r3, [pc, #616]	; (800522c <UART_SetConfig+0x6f4>)
 8004fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	2164      	movs	r1, #100	; 0x64
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	3332      	adds	r3, #50	; 0x32
 8004fd4:	4a95      	ldr	r2, [pc, #596]	; (800522c <UART_SetConfig+0x6f4>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe0:	4498      	add	r8, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	469b      	mov	fp, r3
 8004fe6:	f04f 0c00 	mov.w	ip, #0
 8004fea:	46d9      	mov	r9, fp
 8004fec:	46e2      	mov	sl, ip
 8004fee:	eb19 0309 	adds.w	r3, r9, r9
 8004ff2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ff6:	4699      	mov	r9, r3
 8004ff8:	46a2      	mov	sl, r4
 8004ffa:	eb19 090b 	adds.w	r9, r9, fp
 8004ffe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800500e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005012:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005016:	4689      	mov	r9, r1
 8005018:	4692      	mov	sl, r2
 800501a:	eb1b 0509 	adds.w	r5, fp, r9
 800501e:	eb4c 060a 	adc.w	r6, ip, sl
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4619      	mov	r1, r3
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	0094      	lsls	r4, r2, #2
 8005036:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800503a:	008b      	lsls	r3, r1, #2
 800503c:	461a      	mov	r2, r3
 800503e:	4623      	mov	r3, r4
 8005040:	4628      	mov	r0, r5
 8005042:	4631      	mov	r1, r6
 8005044:	f7fb fe08 	bl	8000c58 <__aeabi_uldivmod>
 8005048:	4603      	mov	r3, r0
 800504a:	460c      	mov	r4, r1
 800504c:	461a      	mov	r2, r3
 800504e:	4b77      	ldr	r3, [pc, #476]	; (800522c <UART_SetConfig+0x6f4>)
 8005050:	fba3 1302 	umull	r1, r3, r3, r2
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	2164      	movs	r1, #100	; 0x64
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	3332      	adds	r3, #50	; 0x32
 8005062:	4a72      	ldr	r2, [pc, #456]	; (800522c <UART_SetConfig+0x6f4>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	f003 020f 	and.w	r2, r3, #15
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4442      	add	r2, r8
 8005074:	609a      	str	r2, [r3, #8]
 8005076:	e0d0      	b.n	800521a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7ff fc06 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 800507c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	469a      	mov	sl, r3
 8005082:	f04f 0b00 	mov.w	fp, #0
 8005086:	46d0      	mov	r8, sl
 8005088:	46d9      	mov	r9, fp
 800508a:	eb18 0308 	adds.w	r3, r8, r8
 800508e:	eb49 0409 	adc.w	r4, r9, r9
 8005092:	4698      	mov	r8, r3
 8005094:	46a1      	mov	r9, r4
 8005096:	eb18 080a 	adds.w	r8, r8, sl
 800509a:	eb49 090b 	adc.w	r9, r9, fp
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050b2:	4688      	mov	r8, r1
 80050b4:	4691      	mov	r9, r2
 80050b6:	eb1a 0508 	adds.w	r5, sl, r8
 80050ba:	eb4b 0609 	adc.w	r6, fp, r9
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4619      	mov	r1, r3
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	f04f 0400 	mov.w	r4, #0
 80050d0:	0094      	lsls	r4, r2, #2
 80050d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050d6:	008b      	lsls	r3, r1, #2
 80050d8:	461a      	mov	r2, r3
 80050da:	4623      	mov	r3, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	4631      	mov	r1, r6
 80050e0:	f7fb fdba 	bl	8000c58 <__aeabi_uldivmod>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	461a      	mov	r2, r3
 80050ea:	4b50      	ldr	r3, [pc, #320]	; (800522c <UART_SetConfig+0x6f4>)
 80050ec:	fba3 2302 	umull	r2, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	469b      	mov	fp, r3
 80050fa:	f04f 0c00 	mov.w	ip, #0
 80050fe:	46d9      	mov	r9, fp
 8005100:	46e2      	mov	sl, ip
 8005102:	eb19 0309 	adds.w	r3, r9, r9
 8005106:	eb4a 040a 	adc.w	r4, sl, sl
 800510a:	4699      	mov	r9, r3
 800510c:	46a2      	mov	sl, r4
 800510e:	eb19 090b 	adds.w	r9, r9, fp
 8005112:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800512a:	4689      	mov	r9, r1
 800512c:	4692      	mov	sl, r2
 800512e:	eb1b 0509 	adds.w	r5, fp, r9
 8005132:	eb4c 060a 	adc.w	r6, ip, sl
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	0094      	lsls	r4, r2, #2
 800514a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800514e:	008b      	lsls	r3, r1, #2
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	4628      	mov	r0, r5
 8005156:	4631      	mov	r1, r6
 8005158:	f7fb fd7e 	bl	8000c58 <__aeabi_uldivmod>
 800515c:	4603      	mov	r3, r0
 800515e:	460c      	mov	r4, r1
 8005160:	461a      	mov	r2, r3
 8005162:	4b32      	ldr	r3, [pc, #200]	; (800522c <UART_SetConfig+0x6f4>)
 8005164:	fba3 1302 	umull	r1, r3, r3, r2
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	2164      	movs	r1, #100	; 0x64
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	3332      	adds	r3, #50	; 0x32
 8005176:	4a2d      	ldr	r2, [pc, #180]	; (800522c <UART_SetConfig+0x6f4>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005182:	4498      	add	r8, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	469b      	mov	fp, r3
 8005188:	f04f 0c00 	mov.w	ip, #0
 800518c:	46d9      	mov	r9, fp
 800518e:	46e2      	mov	sl, ip
 8005190:	eb19 0309 	adds.w	r3, r9, r9
 8005194:	eb4a 040a 	adc.w	r4, sl, sl
 8005198:	4699      	mov	r9, r3
 800519a:	46a2      	mov	sl, r4
 800519c:	eb19 090b 	adds.w	r9, r9, fp
 80051a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051b8:	4689      	mov	r9, r1
 80051ba:	4692      	mov	sl, r2
 80051bc:	eb1b 0509 	adds.w	r5, fp, r9
 80051c0:	eb4c 060a 	adc.w	r6, ip, sl
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4619      	mov	r1, r3
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	f04f 0400 	mov.w	r4, #0
 80051d6:	0094      	lsls	r4, r2, #2
 80051d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051dc:	008b      	lsls	r3, r1, #2
 80051de:	461a      	mov	r2, r3
 80051e0:	4623      	mov	r3, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	4631      	mov	r1, r6
 80051e6:	f7fb fd37 	bl	8000c58 <__aeabi_uldivmod>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b0e      	ldr	r3, [pc, #56]	; (800522c <UART_SetConfig+0x6f4>)
 80051f2:	fba3 1302 	umull	r1, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2164      	movs	r1, #100	; 0x64
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	; 0x32
 8005204:	4a09      	ldr	r2, [pc, #36]	; (800522c <UART_SetConfig+0x6f4>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 020f 	and.w	r2, r3, #15
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4442      	add	r2, r8
 8005216:	609a      	str	r2, [r3, #8]
}
 8005218:	e7ff      	b.n	800521a <UART_SetConfig+0x6e2>
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005224:	40011000 	.word	0x40011000
 8005228:	40011400 	.word	0x40011400
 800522c:	51eb851f 	.word	0x51eb851f

08005230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005230:	b084      	sub	sp, #16
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	f107 001c 	add.w	r0, r7, #28
 800523e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	2b01      	cmp	r3, #1
 8005246:	d122      	bne.n	800528e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800525c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa56 	bl	8005734 <USB_CoreReset>
 8005288:	4603      	mov	r3, r0
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	e01a      	b.n	80052c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa4a 	bl	8005734 <USB_CoreReset>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
 80052b6:	e005      	b.n	80052c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10b      	bne.n	80052e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f043 0206 	orr.w	r2, r3, #6
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ee:	b004      	add	sp, #16
 80052f0:	4770      	bx	lr

080052f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d106      	bne.n	8005340 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]
 800533e:	e00b      	b.n	8005358 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	e001      	b.n	8005358 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e003      	b.n	8005360 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005358:	2032      	movs	r0, #50	; 0x32
 800535a:	f7fd fa29 	bl	80027b0 <HAL_Delay>

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005368:	b084      	sub	sp, #16
 800536a:	b580      	push	{r7, lr}
 800536c:	b086      	sub	sp, #24
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e009      	b.n	800539c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3340      	adds	r3, #64	; 0x40
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	2200      	movs	r2, #0
 8005394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	3301      	adds	r3, #1
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b0e      	cmp	r3, #14
 80053a0:	d9f2      	bls.n	8005388 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11c      	bne.n	80053e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b6:	f043 0302 	orr.w	r3, r3, #2
 80053ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
 80053e0:	e00b      	b.n	80053fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005400:	461a      	mov	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	4619      	mov	r1, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	461a      	mov	r2, r3
 8005416:	680b      	ldr	r3, [r1, #0]
 8005418:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	2b01      	cmp	r3, #1
 800541e:	d10c      	bne.n	800543a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005426:	2100      	movs	r1, #0
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f949 	bl	80056c0 <USB_SetDevSpeed>
 800542e:	e008      	b.n	8005442 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005430:	2101      	movs	r1, #1
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f944 	bl	80056c0 <USB_SetDevSpeed>
 8005438:	e003      	b.n	8005442 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800543a:	2103      	movs	r1, #3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f93f 	bl	80056c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005442:	2110      	movs	r1, #16
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8f3 	bl	8005630 <USB_FlushTxFifo>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f911 	bl	800567c <USB_FlushRxFifo>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	461a      	mov	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	461a      	mov	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	461a      	mov	r2, r3
 8005484:	2300      	movs	r3, #0
 8005486:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e043      	b.n	8005516 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a4:	d118      	bne.n	80054d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	461a      	mov	r2, r3
 80054ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e013      	b.n	80054ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	461a      	mov	r2, r3
 80054d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e008      	b.n	80054ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	461a      	mov	r2, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800550e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	3301      	adds	r3, #1
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3b7      	bcc.n	800548e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e043      	b.n	80055ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800553a:	d118      	bne.n	800556e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	461a      	mov	r2, r3
 8005550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e013      	b.n	8005580 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e008      	b.n	8005580 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	461a      	mov	r2, r3
 800558e:	2300      	movs	r3, #0
 8005590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	461a      	mov	r2, r3
 80055a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	3301      	adds	r3, #1
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d3b7      	bcc.n	8005524 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f043 0210 	orr.w	r2, r3, #16
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699a      	ldr	r2, [r3, #24]
 80055ec:	4b0f      	ldr	r3, [pc, #60]	; (800562c <USB_DevInit+0x2c4>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f043 0208 	orr.w	r2, r3, #8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d107      	bne.n	800561c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005614:	f043 0304 	orr.w	r3, r3, #4
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005628:	b004      	add	sp, #16
 800562a:	4770      	bx	lr
 800562c:	803c3800 	.word	0x803c3800

08005630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <USB_FlushTxFifo+0x48>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d901      	bls.n	800565c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e006      	b.n	800566a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b20      	cmp	r3, #32
 8005666:	d0f0      	beq.n	800564a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	00030d40 	.word	0x00030d40

0800567c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2210      	movs	r2, #16
 800568c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <USB_FlushRxFifo+0x40>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e006      	b.n	80056ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d0f0      	beq.n	800568e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	00030d40 	.word	0x00030d40

080056c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e0:	4313      	orrs	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800570c:	f023 0303 	bic.w	r3, r3, #3
 8005710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005720:	f043 0302 	orr.w	r3, r3, #2
 8005724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <USB_CoreReset+0x64>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e01b      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	daf2      	bge.n	8005740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a09      	ldr	r2, [pc, #36]	; (8005798 <USB_CoreReset+0x64>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e006      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d0f0      	beq.n	800576a <USB_CoreReset+0x36>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	00030d40 	.word	0x00030d40

0800579c <__errno>:
 800579c:	4b01      	ldr	r3, [pc, #4]	; (80057a4 <__errno+0x8>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000010 	.word	0x20000010

080057a8 <__libc_init_array>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	4e0d      	ldr	r6, [pc, #52]	; (80057e0 <__libc_init_array+0x38>)
 80057ac:	4c0d      	ldr	r4, [pc, #52]	; (80057e4 <__libc_init_array+0x3c>)
 80057ae:	1ba4      	subs	r4, r4, r6
 80057b0:	10a4      	asrs	r4, r4, #2
 80057b2:	2500      	movs	r5, #0
 80057b4:	42a5      	cmp	r5, r4
 80057b6:	d109      	bne.n	80057cc <__libc_init_array+0x24>
 80057b8:	4e0b      	ldr	r6, [pc, #44]	; (80057e8 <__libc_init_array+0x40>)
 80057ba:	4c0c      	ldr	r4, [pc, #48]	; (80057ec <__libc_init_array+0x44>)
 80057bc:	f000 ff6c 	bl	8006698 <_init>
 80057c0:	1ba4      	subs	r4, r4, r6
 80057c2:	10a4      	asrs	r4, r4, #2
 80057c4:	2500      	movs	r5, #0
 80057c6:	42a5      	cmp	r5, r4
 80057c8:	d105      	bne.n	80057d6 <__libc_init_array+0x2e>
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057d0:	4798      	blx	r3
 80057d2:	3501      	adds	r5, #1
 80057d4:	e7ee      	b.n	80057b4 <__libc_init_array+0xc>
 80057d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057da:	4798      	blx	r3
 80057dc:	3501      	adds	r5, #1
 80057de:	e7f2      	b.n	80057c6 <__libc_init_array+0x1e>
 80057e0:	08006930 	.word	0x08006930
 80057e4:	08006930 	.word	0x08006930
 80057e8:	08006930 	.word	0x08006930
 80057ec:	08006934 	.word	0x08006934

080057f0 <memset>:
 80057f0:	4402      	add	r2, r0
 80057f2:	4603      	mov	r3, r0
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d100      	bne.n	80057fa <memset+0xa>
 80057f8:	4770      	bx	lr
 80057fa:	f803 1b01 	strb.w	r1, [r3], #1
 80057fe:	e7f9      	b.n	80057f4 <memset+0x4>

08005800 <siprintf>:
 8005800:	b40e      	push	{r1, r2, r3}
 8005802:	b500      	push	{lr}
 8005804:	b09c      	sub	sp, #112	; 0x70
 8005806:	ab1d      	add	r3, sp, #116	; 0x74
 8005808:	9002      	str	r0, [sp, #8]
 800580a:	9006      	str	r0, [sp, #24]
 800580c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005810:	4809      	ldr	r0, [pc, #36]	; (8005838 <siprintf+0x38>)
 8005812:	9107      	str	r1, [sp, #28]
 8005814:	9104      	str	r1, [sp, #16]
 8005816:	4909      	ldr	r1, [pc, #36]	; (800583c <siprintf+0x3c>)
 8005818:	f853 2b04 	ldr.w	r2, [r3], #4
 800581c:	9105      	str	r1, [sp, #20]
 800581e:	6800      	ldr	r0, [r0, #0]
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	a902      	add	r1, sp, #8
 8005824:	f000 f866 	bl	80058f4 <_svfiprintf_r>
 8005828:	9b02      	ldr	r3, [sp, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	b01c      	add	sp, #112	; 0x70
 8005830:	f85d eb04 	ldr.w	lr, [sp], #4
 8005834:	b003      	add	sp, #12
 8005836:	4770      	bx	lr
 8005838:	20000010 	.word	0x20000010
 800583c:	ffff0208 	.word	0xffff0208

08005840 <__ssputs_r>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	688e      	ldr	r6, [r1, #8]
 8005846:	429e      	cmp	r6, r3
 8005848:	4682      	mov	sl, r0
 800584a:	460c      	mov	r4, r1
 800584c:	4690      	mov	r8, r2
 800584e:	4699      	mov	r9, r3
 8005850:	d837      	bhi.n	80058c2 <__ssputs_r+0x82>
 8005852:	898a      	ldrh	r2, [r1, #12]
 8005854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005858:	d031      	beq.n	80058be <__ssputs_r+0x7e>
 800585a:	6825      	ldr	r5, [r4, #0]
 800585c:	6909      	ldr	r1, [r1, #16]
 800585e:	1a6f      	subs	r7, r5, r1
 8005860:	6965      	ldr	r5, [r4, #20]
 8005862:	2302      	movs	r3, #2
 8005864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005868:	fb95 f5f3 	sdiv	r5, r5, r3
 800586c:	f109 0301 	add.w	r3, r9, #1
 8005870:	443b      	add	r3, r7
 8005872:	429d      	cmp	r5, r3
 8005874:	bf38      	it	cc
 8005876:	461d      	movcc	r5, r3
 8005878:	0553      	lsls	r3, r2, #21
 800587a:	d530      	bpl.n	80058de <__ssputs_r+0x9e>
 800587c:	4629      	mov	r1, r5
 800587e:	f000 fb2b 	bl	8005ed8 <_malloc_r>
 8005882:	4606      	mov	r6, r0
 8005884:	b950      	cbnz	r0, 800589c <__ssputs_r+0x5c>
 8005886:	230c      	movs	r3, #12
 8005888:	f8ca 3000 	str.w	r3, [sl]
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005892:	81a3      	strh	r3, [r4, #12]
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	463a      	mov	r2, r7
 800589e:	6921      	ldr	r1, [r4, #16]
 80058a0:	f000 faa8 	bl	8005df4 <memcpy>
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	6126      	str	r6, [r4, #16]
 80058b2:	6165      	str	r5, [r4, #20]
 80058b4:	443e      	add	r6, r7
 80058b6:	1bed      	subs	r5, r5, r7
 80058b8:	6026      	str	r6, [r4, #0]
 80058ba:	60a5      	str	r5, [r4, #8]
 80058bc:	464e      	mov	r6, r9
 80058be:	454e      	cmp	r6, r9
 80058c0:	d900      	bls.n	80058c4 <__ssputs_r+0x84>
 80058c2:	464e      	mov	r6, r9
 80058c4:	4632      	mov	r2, r6
 80058c6:	4641      	mov	r1, r8
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	f000 fa9e 	bl	8005e0a <memmove>
 80058ce:	68a3      	ldr	r3, [r4, #8]
 80058d0:	1b9b      	subs	r3, r3, r6
 80058d2:	60a3      	str	r3, [r4, #8]
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	441e      	add	r6, r3
 80058d8:	6026      	str	r6, [r4, #0]
 80058da:	2000      	movs	r0, #0
 80058dc:	e7dc      	b.n	8005898 <__ssputs_r+0x58>
 80058de:	462a      	mov	r2, r5
 80058e0:	f000 fb54 	bl	8005f8c <_realloc_r>
 80058e4:	4606      	mov	r6, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d1e2      	bne.n	80058b0 <__ssputs_r+0x70>
 80058ea:	6921      	ldr	r1, [r4, #16]
 80058ec:	4650      	mov	r0, sl
 80058ee:	f000 faa5 	bl	8005e3c <_free_r>
 80058f2:	e7c8      	b.n	8005886 <__ssputs_r+0x46>

080058f4 <_svfiprintf_r>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	461d      	mov	r5, r3
 80058fa:	898b      	ldrh	r3, [r1, #12]
 80058fc:	061f      	lsls	r7, r3, #24
 80058fe:	b09d      	sub	sp, #116	; 0x74
 8005900:	4680      	mov	r8, r0
 8005902:	460c      	mov	r4, r1
 8005904:	4616      	mov	r6, r2
 8005906:	d50f      	bpl.n	8005928 <_svfiprintf_r+0x34>
 8005908:	690b      	ldr	r3, [r1, #16]
 800590a:	b96b      	cbnz	r3, 8005928 <_svfiprintf_r+0x34>
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	f000 fae3 	bl	8005ed8 <_malloc_r>
 8005912:	6020      	str	r0, [r4, #0]
 8005914:	6120      	str	r0, [r4, #16]
 8005916:	b928      	cbnz	r0, 8005924 <_svfiprintf_r+0x30>
 8005918:	230c      	movs	r3, #12
 800591a:	f8c8 3000 	str.w	r3, [r8]
 800591e:	f04f 30ff 	mov.w	r0, #4294967295
 8005922:	e0c8      	b.n	8005ab6 <_svfiprintf_r+0x1c2>
 8005924:	2340      	movs	r3, #64	; 0x40
 8005926:	6163      	str	r3, [r4, #20]
 8005928:	2300      	movs	r3, #0
 800592a:	9309      	str	r3, [sp, #36]	; 0x24
 800592c:	2320      	movs	r3, #32
 800592e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005932:	2330      	movs	r3, #48	; 0x30
 8005934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005938:	9503      	str	r5, [sp, #12]
 800593a:	f04f 0b01 	mov.w	fp, #1
 800593e:	4637      	mov	r7, r6
 8005940:	463d      	mov	r5, r7
 8005942:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005946:	b10b      	cbz	r3, 800594c <_svfiprintf_r+0x58>
 8005948:	2b25      	cmp	r3, #37	; 0x25
 800594a:	d13e      	bne.n	80059ca <_svfiprintf_r+0xd6>
 800594c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005950:	d00b      	beq.n	800596a <_svfiprintf_r+0x76>
 8005952:	4653      	mov	r3, sl
 8005954:	4632      	mov	r2, r6
 8005956:	4621      	mov	r1, r4
 8005958:	4640      	mov	r0, r8
 800595a:	f7ff ff71 	bl	8005840 <__ssputs_r>
 800595e:	3001      	adds	r0, #1
 8005960:	f000 80a4 	beq.w	8005aac <_svfiprintf_r+0x1b8>
 8005964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005966:	4453      	add	r3, sl
 8005968:	9309      	str	r3, [sp, #36]	; 0x24
 800596a:	783b      	ldrb	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 809d 	beq.w	8005aac <_svfiprintf_r+0x1b8>
 8005972:	2300      	movs	r3, #0
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	9307      	str	r3, [sp, #28]
 8005980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005984:	931a      	str	r3, [sp, #104]	; 0x68
 8005986:	462f      	mov	r7, r5
 8005988:	2205      	movs	r2, #5
 800598a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800598e:	4850      	ldr	r0, [pc, #320]	; (8005ad0 <_svfiprintf_r+0x1dc>)
 8005990:	f7fa fc36 	bl	8000200 <memchr>
 8005994:	9b04      	ldr	r3, [sp, #16]
 8005996:	b9d0      	cbnz	r0, 80059ce <_svfiprintf_r+0xda>
 8005998:	06d9      	lsls	r1, r3, #27
 800599a:	bf44      	itt	mi
 800599c:	2220      	movmi	r2, #32
 800599e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059a2:	071a      	lsls	r2, r3, #28
 80059a4:	bf44      	itt	mi
 80059a6:	222b      	movmi	r2, #43	; 0x2b
 80059a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059ac:	782a      	ldrb	r2, [r5, #0]
 80059ae:	2a2a      	cmp	r2, #42	; 0x2a
 80059b0:	d015      	beq.n	80059de <_svfiprintf_r+0xea>
 80059b2:	9a07      	ldr	r2, [sp, #28]
 80059b4:	462f      	mov	r7, r5
 80059b6:	2000      	movs	r0, #0
 80059b8:	250a      	movs	r5, #10
 80059ba:	4639      	mov	r1, r7
 80059bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c0:	3b30      	subs	r3, #48	; 0x30
 80059c2:	2b09      	cmp	r3, #9
 80059c4:	d94d      	bls.n	8005a62 <_svfiprintf_r+0x16e>
 80059c6:	b1b8      	cbz	r0, 80059f8 <_svfiprintf_r+0x104>
 80059c8:	e00f      	b.n	80059ea <_svfiprintf_r+0xf6>
 80059ca:	462f      	mov	r7, r5
 80059cc:	e7b8      	b.n	8005940 <_svfiprintf_r+0x4c>
 80059ce:	4a40      	ldr	r2, [pc, #256]	; (8005ad0 <_svfiprintf_r+0x1dc>)
 80059d0:	1a80      	subs	r0, r0, r2
 80059d2:	fa0b f000 	lsl.w	r0, fp, r0
 80059d6:	4318      	orrs	r0, r3
 80059d8:	9004      	str	r0, [sp, #16]
 80059da:	463d      	mov	r5, r7
 80059dc:	e7d3      	b.n	8005986 <_svfiprintf_r+0x92>
 80059de:	9a03      	ldr	r2, [sp, #12]
 80059e0:	1d11      	adds	r1, r2, #4
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	9103      	str	r1, [sp, #12]
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	db01      	blt.n	80059ee <_svfiprintf_r+0xfa>
 80059ea:	9207      	str	r2, [sp, #28]
 80059ec:	e004      	b.n	80059f8 <_svfiprintf_r+0x104>
 80059ee:	4252      	negs	r2, r2
 80059f0:	f043 0302 	orr.w	r3, r3, #2
 80059f4:	9207      	str	r2, [sp, #28]
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	783b      	ldrb	r3, [r7, #0]
 80059fa:	2b2e      	cmp	r3, #46	; 0x2e
 80059fc:	d10c      	bne.n	8005a18 <_svfiprintf_r+0x124>
 80059fe:	787b      	ldrb	r3, [r7, #1]
 8005a00:	2b2a      	cmp	r3, #42	; 0x2a
 8005a02:	d133      	bne.n	8005a6c <_svfiprintf_r+0x178>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9203      	str	r2, [sp, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfb8      	it	lt
 8005a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a14:	3702      	adds	r7, #2
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	4d2e      	ldr	r5, [pc, #184]	; (8005ad4 <_svfiprintf_r+0x1e0>)
 8005a1a:	7839      	ldrb	r1, [r7, #0]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f7fa fbee 	bl	8000200 <memchr>
 8005a24:	b138      	cbz	r0, 8005a36 <_svfiprintf_r+0x142>
 8005a26:	2340      	movs	r3, #64	; 0x40
 8005a28:	1b40      	subs	r0, r0, r5
 8005a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a2e:	9b04      	ldr	r3, [sp, #16]
 8005a30:	4303      	orrs	r3, r0
 8005a32:	3701      	adds	r7, #1
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	7839      	ldrb	r1, [r7, #0]
 8005a38:	4827      	ldr	r0, [pc, #156]	; (8005ad8 <_svfiprintf_r+0x1e4>)
 8005a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a3e:	2206      	movs	r2, #6
 8005a40:	1c7e      	adds	r6, r7, #1
 8005a42:	f7fa fbdd 	bl	8000200 <memchr>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d038      	beq.n	8005abc <_svfiprintf_r+0x1c8>
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <_svfiprintf_r+0x1e8>)
 8005a4c:	bb13      	cbnz	r3, 8005a94 <_svfiprintf_r+0x1a0>
 8005a4e:	9b03      	ldr	r3, [sp, #12]
 8005a50:	3307      	adds	r3, #7
 8005a52:	f023 0307 	bic.w	r3, r3, #7
 8005a56:	3308      	adds	r3, #8
 8005a58:	9303      	str	r3, [sp, #12]
 8005a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5c:	444b      	add	r3, r9
 8005a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a60:	e76d      	b.n	800593e <_svfiprintf_r+0x4a>
 8005a62:	fb05 3202 	mla	r2, r5, r2, r3
 8005a66:	2001      	movs	r0, #1
 8005a68:	460f      	mov	r7, r1
 8005a6a:	e7a6      	b.n	80059ba <_svfiprintf_r+0xc6>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	3701      	adds	r7, #1
 8005a70:	9305      	str	r3, [sp, #20]
 8005a72:	4619      	mov	r1, r3
 8005a74:	250a      	movs	r5, #10
 8005a76:	4638      	mov	r0, r7
 8005a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7c:	3a30      	subs	r2, #48	; 0x30
 8005a7e:	2a09      	cmp	r2, #9
 8005a80:	d903      	bls.n	8005a8a <_svfiprintf_r+0x196>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0c8      	beq.n	8005a18 <_svfiprintf_r+0x124>
 8005a86:	9105      	str	r1, [sp, #20]
 8005a88:	e7c6      	b.n	8005a18 <_svfiprintf_r+0x124>
 8005a8a:	fb05 2101 	mla	r1, r5, r1, r2
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4607      	mov	r7, r0
 8005a92:	e7f0      	b.n	8005a76 <_svfiprintf_r+0x182>
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <_svfiprintf_r+0x1ec>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	f3af 8000 	nop.w
 8005aa4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005aa8:	4681      	mov	r9, r0
 8005aaa:	d1d6      	bne.n	8005a5a <_svfiprintf_r+0x166>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	065b      	lsls	r3, r3, #25
 8005ab0:	f53f af35 	bmi.w	800591e <_svfiprintf_r+0x2a>
 8005ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ab6:	b01d      	add	sp, #116	; 0x74
 8005ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abc:	ab03      	add	r3, sp, #12
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <_svfiprintf_r+0x1ec>)
 8005ac4:	a904      	add	r1, sp, #16
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f000 f882 	bl	8005bd0 <_printf_i>
 8005acc:	e7ea      	b.n	8005aa4 <_svfiprintf_r+0x1b0>
 8005ace:	bf00      	nop
 8005ad0:	080068ec 	.word	0x080068ec
 8005ad4:	080068f2 	.word	0x080068f2
 8005ad8:	080068f6 	.word	0x080068f6
 8005adc:	00000000 	.word	0x00000000
 8005ae0:	08005841 	.word	0x08005841

08005ae4 <_printf_common>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	4691      	mov	r9, r2
 8005aea:	461f      	mov	r7, r3
 8005aec:	688a      	ldr	r2, [r1, #8]
 8005aee:	690b      	ldr	r3, [r1, #16]
 8005af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bfb8      	it	lt
 8005af8:	4613      	movlt	r3, r2
 8005afa:	f8c9 3000 	str.w	r3, [r9]
 8005afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b02:	4606      	mov	r6, r0
 8005b04:	460c      	mov	r4, r1
 8005b06:	b112      	cbz	r2, 8005b0e <_printf_common+0x2a>
 8005b08:	3301      	adds	r3, #1
 8005b0a:	f8c9 3000 	str.w	r3, [r9]
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	0699      	lsls	r1, r3, #26
 8005b12:	bf42      	ittt	mi
 8005b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b18:	3302      	addmi	r3, #2
 8005b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8005b1e:	6825      	ldr	r5, [r4, #0]
 8005b20:	f015 0506 	ands.w	r5, r5, #6
 8005b24:	d107      	bne.n	8005b36 <_printf_common+0x52>
 8005b26:	f104 0a19 	add.w	sl, r4, #25
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	42ab      	cmp	r3, r5
 8005b34:	dc28      	bgt.n	8005b88 <_printf_common+0xa4>
 8005b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	3300      	adds	r3, #0
 8005b3e:	bf18      	it	ne
 8005b40:	2301      	movne	r3, #1
 8005b42:	0692      	lsls	r2, r2, #26
 8005b44:	d42d      	bmi.n	8005ba2 <_printf_common+0xbe>
 8005b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	47c0      	blx	r8
 8005b50:	3001      	adds	r0, #1
 8005b52:	d020      	beq.n	8005b96 <_printf_common+0xb2>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	68e5      	ldr	r5, [r4, #12]
 8005b58:	f8d9 2000 	ldr.w	r2, [r9]
 8005b5c:	f003 0306 	and.w	r3, r3, #6
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	bf08      	it	eq
 8005b64:	1aad      	subeq	r5, r5, r2
 8005b66:	68a3      	ldr	r3, [r4, #8]
 8005b68:	6922      	ldr	r2, [r4, #16]
 8005b6a:	bf0c      	ite	eq
 8005b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b70:	2500      	movne	r5, #0
 8005b72:	4293      	cmp	r3, r2
 8005b74:	bfc4      	itt	gt
 8005b76:	1a9b      	subgt	r3, r3, r2
 8005b78:	18ed      	addgt	r5, r5, r3
 8005b7a:	f04f 0900 	mov.w	r9, #0
 8005b7e:	341a      	adds	r4, #26
 8005b80:	454d      	cmp	r5, r9
 8005b82:	d11a      	bne.n	8005bba <_printf_common+0xd6>
 8005b84:	2000      	movs	r0, #0
 8005b86:	e008      	b.n	8005b9a <_printf_common+0xb6>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4652      	mov	r2, sl
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4630      	mov	r0, r6
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d103      	bne.n	8005b9e <_printf_common+0xba>
 8005b96:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9e:	3501      	adds	r5, #1
 8005ba0:	e7c3      	b.n	8005b2a <_printf_common+0x46>
 8005ba2:	18e1      	adds	r1, r4, r3
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	2030      	movs	r0, #48	; 0x30
 8005ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bac:	4422      	add	r2, r4
 8005bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	e7c5      	b.n	8005b46 <_printf_common+0x62>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	47c0      	blx	r8
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d0e6      	beq.n	8005b96 <_printf_common+0xb2>
 8005bc8:	f109 0901 	add.w	r9, r9, #1
 8005bcc:	e7d8      	b.n	8005b80 <_printf_common+0x9c>
	...

08005bd0 <_printf_i>:
 8005bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005bd8:	460c      	mov	r4, r1
 8005bda:	7e09      	ldrb	r1, [r1, #24]
 8005bdc:	b085      	sub	sp, #20
 8005bde:	296e      	cmp	r1, #110	; 0x6e
 8005be0:	4617      	mov	r7, r2
 8005be2:	4606      	mov	r6, r0
 8005be4:	4698      	mov	r8, r3
 8005be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005be8:	f000 80b3 	beq.w	8005d52 <_printf_i+0x182>
 8005bec:	d822      	bhi.n	8005c34 <_printf_i+0x64>
 8005bee:	2963      	cmp	r1, #99	; 0x63
 8005bf0:	d036      	beq.n	8005c60 <_printf_i+0x90>
 8005bf2:	d80a      	bhi.n	8005c0a <_printf_i+0x3a>
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	f000 80b9 	beq.w	8005d6c <_printf_i+0x19c>
 8005bfa:	2958      	cmp	r1, #88	; 0x58
 8005bfc:	f000 8083 	beq.w	8005d06 <_printf_i+0x136>
 8005c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c08:	e032      	b.n	8005c70 <_printf_i+0xa0>
 8005c0a:	2964      	cmp	r1, #100	; 0x64
 8005c0c:	d001      	beq.n	8005c12 <_printf_i+0x42>
 8005c0e:	2969      	cmp	r1, #105	; 0x69
 8005c10:	d1f6      	bne.n	8005c00 <_printf_i+0x30>
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	6813      	ldr	r3, [r2, #0]
 8005c16:	0605      	lsls	r5, r0, #24
 8005c18:	f103 0104 	add.w	r1, r3, #4
 8005c1c:	d52a      	bpl.n	8005c74 <_printf_i+0xa4>
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da03      	bge.n	8005c2e <_printf_i+0x5e>
 8005c26:	222d      	movs	r2, #45	; 0x2d
 8005c28:	425b      	negs	r3, r3
 8005c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c2e:	486f      	ldr	r0, [pc, #444]	; (8005dec <_printf_i+0x21c>)
 8005c30:	220a      	movs	r2, #10
 8005c32:	e039      	b.n	8005ca8 <_printf_i+0xd8>
 8005c34:	2973      	cmp	r1, #115	; 0x73
 8005c36:	f000 809d 	beq.w	8005d74 <_printf_i+0x1a4>
 8005c3a:	d808      	bhi.n	8005c4e <_printf_i+0x7e>
 8005c3c:	296f      	cmp	r1, #111	; 0x6f
 8005c3e:	d020      	beq.n	8005c82 <_printf_i+0xb2>
 8005c40:	2970      	cmp	r1, #112	; 0x70
 8005c42:	d1dd      	bne.n	8005c00 <_printf_i+0x30>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	f043 0320 	orr.w	r3, r3, #32
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	e003      	b.n	8005c56 <_printf_i+0x86>
 8005c4e:	2975      	cmp	r1, #117	; 0x75
 8005c50:	d017      	beq.n	8005c82 <_printf_i+0xb2>
 8005c52:	2978      	cmp	r1, #120	; 0x78
 8005c54:	d1d4      	bne.n	8005c00 <_printf_i+0x30>
 8005c56:	2378      	movs	r3, #120	; 0x78
 8005c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c5c:	4864      	ldr	r0, [pc, #400]	; (8005df0 <_printf_i+0x220>)
 8005c5e:	e055      	b.n	8005d0c <_printf_i+0x13c>
 8005c60:	6813      	ldr	r3, [r2, #0]
 8005c62:	1d19      	adds	r1, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6011      	str	r1, [r2, #0]
 8005c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c70:	2301      	movs	r3, #1
 8005c72:	e08c      	b.n	8005d8e <_printf_i+0x1be>
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6011      	str	r1, [r2, #0]
 8005c78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c7c:	bf18      	it	ne
 8005c7e:	b21b      	sxthne	r3, r3
 8005c80:	e7cf      	b.n	8005c22 <_printf_i+0x52>
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	6825      	ldr	r5, [r4, #0]
 8005c86:	1d18      	adds	r0, r3, #4
 8005c88:	6010      	str	r0, [r2, #0]
 8005c8a:	0628      	lsls	r0, r5, #24
 8005c8c:	d501      	bpl.n	8005c92 <_printf_i+0xc2>
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <_printf_i+0xc8>
 8005c92:	0668      	lsls	r0, r5, #25
 8005c94:	d5fb      	bpl.n	8005c8e <_printf_i+0xbe>
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	4854      	ldr	r0, [pc, #336]	; (8005dec <_printf_i+0x21c>)
 8005c9a:	296f      	cmp	r1, #111	; 0x6f
 8005c9c:	bf14      	ite	ne
 8005c9e:	220a      	movne	r2, #10
 8005ca0:	2208      	moveq	r2, #8
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ca8:	6865      	ldr	r5, [r4, #4]
 8005caa:	60a5      	str	r5, [r4, #8]
 8005cac:	2d00      	cmp	r5, #0
 8005cae:	f2c0 8095 	blt.w	8005ddc <_printf_i+0x20c>
 8005cb2:	6821      	ldr	r1, [r4, #0]
 8005cb4:	f021 0104 	bic.w	r1, r1, #4
 8005cb8:	6021      	str	r1, [r4, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d13d      	bne.n	8005d3a <_printf_i+0x16a>
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	f040 808e 	bne.w	8005de0 <_printf_i+0x210>
 8005cc4:	4665      	mov	r5, ip
 8005cc6:	2a08      	cmp	r2, #8
 8005cc8:	d10b      	bne.n	8005ce2 <_printf_i+0x112>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	07db      	lsls	r3, r3, #31
 8005cce:	d508      	bpl.n	8005ce2 <_printf_i+0x112>
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	bfde      	ittt	le
 8005cd8:	2330      	movle	r3, #48	; 0x30
 8005cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ce2:	ebac 0305 	sub.w	r3, ip, r5
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	f8cd 8000 	str.w	r8, [sp]
 8005cec:	463b      	mov	r3, r7
 8005cee:	aa03      	add	r2, sp, #12
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff fef6 	bl	8005ae4 <_printf_common>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d14d      	bne.n	8005d98 <_printf_i+0x1c8>
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	b005      	add	sp, #20
 8005d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d06:	4839      	ldr	r0, [pc, #228]	; (8005dec <_printf_i+0x21c>)
 8005d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	6821      	ldr	r1, [r4, #0]
 8005d10:	1d1d      	adds	r5, r3, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6015      	str	r5, [r2, #0]
 8005d16:	060a      	lsls	r2, r1, #24
 8005d18:	d50b      	bpl.n	8005d32 <_printf_i+0x162>
 8005d1a:	07ca      	lsls	r2, r1, #31
 8005d1c:	bf44      	itt	mi
 8005d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8005d22:	6021      	strmi	r1, [r4, #0]
 8005d24:	b91b      	cbnz	r3, 8005d2e <_printf_i+0x15e>
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	f022 0220 	bic.w	r2, r2, #32
 8005d2c:	6022      	str	r2, [r4, #0]
 8005d2e:	2210      	movs	r2, #16
 8005d30:	e7b7      	b.n	8005ca2 <_printf_i+0xd2>
 8005d32:	064d      	lsls	r5, r1, #25
 8005d34:	bf48      	it	mi
 8005d36:	b29b      	uxthmi	r3, r3
 8005d38:	e7ef      	b.n	8005d1a <_printf_i+0x14a>
 8005d3a:	4665      	mov	r5, ip
 8005d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d40:	fb02 3311 	mls	r3, r2, r1, r3
 8005d44:	5cc3      	ldrb	r3, [r0, r3]
 8005d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d1f5      	bne.n	8005d3c <_printf_i+0x16c>
 8005d50:	e7b9      	b.n	8005cc6 <_printf_i+0xf6>
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	6825      	ldr	r5, [r4, #0]
 8005d56:	6961      	ldr	r1, [r4, #20]
 8005d58:	1d18      	adds	r0, r3, #4
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	0628      	lsls	r0, r5, #24
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	d501      	bpl.n	8005d66 <_printf_i+0x196>
 8005d62:	6019      	str	r1, [r3, #0]
 8005d64:	e002      	b.n	8005d6c <_printf_i+0x19c>
 8005d66:	066a      	lsls	r2, r5, #25
 8005d68:	d5fb      	bpl.n	8005d62 <_printf_i+0x192>
 8005d6a:	8019      	strh	r1, [r3, #0]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6123      	str	r3, [r4, #16]
 8005d70:	4665      	mov	r5, ip
 8005d72:	e7b9      	b.n	8005ce8 <_printf_i+0x118>
 8005d74:	6813      	ldr	r3, [r2, #0]
 8005d76:	1d19      	adds	r1, r3, #4
 8005d78:	6011      	str	r1, [r2, #0]
 8005d7a:	681d      	ldr	r5, [r3, #0]
 8005d7c:	6862      	ldr	r2, [r4, #4]
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4628      	mov	r0, r5
 8005d82:	f7fa fa3d 	bl	8000200 <memchr>
 8005d86:	b108      	cbz	r0, 8005d8c <_printf_i+0x1bc>
 8005d88:	1b40      	subs	r0, r0, r5
 8005d8a:	6060      	str	r0, [r4, #4]
 8005d8c:	6863      	ldr	r3, [r4, #4]
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	2300      	movs	r3, #0
 8005d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d96:	e7a7      	b.n	8005ce8 <_printf_i+0x118>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	4639      	mov	r1, r7
 8005d9e:	4630      	mov	r0, r6
 8005da0:	47c0      	blx	r8
 8005da2:	3001      	adds	r0, #1
 8005da4:	d0aa      	beq.n	8005cfc <_printf_i+0x12c>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	079b      	lsls	r3, r3, #30
 8005daa:	d413      	bmi.n	8005dd4 <_printf_i+0x204>
 8005dac:	68e0      	ldr	r0, [r4, #12]
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	4298      	cmp	r0, r3
 8005db2:	bfb8      	it	lt
 8005db4:	4618      	movlt	r0, r3
 8005db6:	e7a3      	b.n	8005d00 <_printf_i+0x130>
 8005db8:	2301      	movs	r3, #1
 8005dba:	464a      	mov	r2, r9
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	47c0      	blx	r8
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d09a      	beq.n	8005cfc <_printf_i+0x12c>
 8005dc6:	3501      	adds	r5, #1
 8005dc8:	68e3      	ldr	r3, [r4, #12]
 8005dca:	9a03      	ldr	r2, [sp, #12]
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	42ab      	cmp	r3, r5
 8005dd0:	dcf2      	bgt.n	8005db8 <_printf_i+0x1e8>
 8005dd2:	e7eb      	b.n	8005dac <_printf_i+0x1dc>
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	f104 0919 	add.w	r9, r4, #25
 8005dda:	e7f5      	b.n	8005dc8 <_printf_i+0x1f8>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1ac      	bne.n	8005d3a <_printf_i+0x16a>
 8005de0:	7803      	ldrb	r3, [r0, #0]
 8005de2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dea:	e76c      	b.n	8005cc6 <_printf_i+0xf6>
 8005dec:	080068fd 	.word	0x080068fd
 8005df0:	0800690e 	.word	0x0800690e

08005df4 <memcpy>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	1e43      	subs	r3, r0, #1
 8005df8:	440a      	add	r2, r1
 8005dfa:	4291      	cmp	r1, r2
 8005dfc:	d100      	bne.n	8005e00 <memcpy+0xc>
 8005dfe:	bd10      	pop	{r4, pc}
 8005e00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e08:	e7f7      	b.n	8005dfa <memcpy+0x6>

08005e0a <memmove>:
 8005e0a:	4288      	cmp	r0, r1
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	eb01 0302 	add.w	r3, r1, r2
 8005e12:	d807      	bhi.n	8005e24 <memmove+0x1a>
 8005e14:	1e42      	subs	r2, r0, #1
 8005e16:	4299      	cmp	r1, r3
 8005e18:	d00a      	beq.n	8005e30 <memmove+0x26>
 8005e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e22:	e7f8      	b.n	8005e16 <memmove+0xc>
 8005e24:	4283      	cmp	r3, r0
 8005e26:	d9f5      	bls.n	8005e14 <memmove+0xa>
 8005e28:	1881      	adds	r1, r0, r2
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	42d3      	cmn	r3, r2
 8005e2e:	d100      	bne.n	8005e32 <memmove+0x28>
 8005e30:	bd10      	pop	{r4, pc}
 8005e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e3a:	e7f7      	b.n	8005e2c <memmove+0x22>

08005e3c <_free_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4605      	mov	r5, r0
 8005e40:	2900      	cmp	r1, #0
 8005e42:	d045      	beq.n	8005ed0 <_free_r+0x94>
 8005e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e48:	1f0c      	subs	r4, r1, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfb8      	it	lt
 8005e4e:	18e4      	addlt	r4, r4, r3
 8005e50:	f000 f8d2 	bl	8005ff8 <__malloc_lock>
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <_free_r+0x98>)
 8005e56:	6813      	ldr	r3, [r2, #0]
 8005e58:	4610      	mov	r0, r2
 8005e5a:	b933      	cbnz	r3, 8005e6a <_free_r+0x2e>
 8005e5c:	6063      	str	r3, [r4, #4]
 8005e5e:	6014      	str	r4, [r2, #0]
 8005e60:	4628      	mov	r0, r5
 8005e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e66:	f000 b8c8 	b.w	8005ffa <__malloc_unlock>
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	d90c      	bls.n	8005e88 <_free_r+0x4c>
 8005e6e:	6821      	ldr	r1, [r4, #0]
 8005e70:	1862      	adds	r2, r4, r1
 8005e72:	4293      	cmp	r3, r2
 8005e74:	bf04      	itt	eq
 8005e76:	681a      	ldreq	r2, [r3, #0]
 8005e78:	685b      	ldreq	r3, [r3, #4]
 8005e7a:	6063      	str	r3, [r4, #4]
 8005e7c:	bf04      	itt	eq
 8005e7e:	1852      	addeq	r2, r2, r1
 8005e80:	6022      	streq	r2, [r4, #0]
 8005e82:	6004      	str	r4, [r0, #0]
 8005e84:	e7ec      	b.n	8005e60 <_free_r+0x24>
 8005e86:	4613      	mov	r3, r2
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	b10a      	cbz	r2, 8005e90 <_free_r+0x54>
 8005e8c:	42a2      	cmp	r2, r4
 8005e8e:	d9fa      	bls.n	8005e86 <_free_r+0x4a>
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	1858      	adds	r0, r3, r1
 8005e94:	42a0      	cmp	r0, r4
 8005e96:	d10b      	bne.n	8005eb0 <_free_r+0x74>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	4401      	add	r1, r0
 8005e9c:	1858      	adds	r0, r3, r1
 8005e9e:	4282      	cmp	r2, r0
 8005ea0:	6019      	str	r1, [r3, #0]
 8005ea2:	d1dd      	bne.n	8005e60 <_free_r+0x24>
 8005ea4:	6810      	ldr	r0, [r2, #0]
 8005ea6:	6852      	ldr	r2, [r2, #4]
 8005ea8:	605a      	str	r2, [r3, #4]
 8005eaa:	4401      	add	r1, r0
 8005eac:	6019      	str	r1, [r3, #0]
 8005eae:	e7d7      	b.n	8005e60 <_free_r+0x24>
 8005eb0:	d902      	bls.n	8005eb8 <_free_r+0x7c>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	e7d3      	b.n	8005e60 <_free_r+0x24>
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	1821      	adds	r1, r4, r0
 8005ebc:	428a      	cmp	r2, r1
 8005ebe:	bf04      	itt	eq
 8005ec0:	6811      	ldreq	r1, [r2, #0]
 8005ec2:	6852      	ldreq	r2, [r2, #4]
 8005ec4:	6062      	str	r2, [r4, #4]
 8005ec6:	bf04      	itt	eq
 8005ec8:	1809      	addeq	r1, r1, r0
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	605c      	str	r4, [r3, #4]
 8005ece:	e7c7      	b.n	8005e60 <_free_r+0x24>
 8005ed0:	bd38      	pop	{r3, r4, r5, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2000018c 	.word	0x2000018c

08005ed8 <_malloc_r>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	1ccd      	adds	r5, r1, #3
 8005edc:	f025 0503 	bic.w	r5, r5, #3
 8005ee0:	3508      	adds	r5, #8
 8005ee2:	2d0c      	cmp	r5, #12
 8005ee4:	bf38      	it	cc
 8005ee6:	250c      	movcc	r5, #12
 8005ee8:	2d00      	cmp	r5, #0
 8005eea:	4606      	mov	r6, r0
 8005eec:	db01      	blt.n	8005ef2 <_malloc_r+0x1a>
 8005eee:	42a9      	cmp	r1, r5
 8005ef0:	d903      	bls.n	8005efa <_malloc_r+0x22>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	6033      	str	r3, [r6, #0]
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
 8005efa:	f000 f87d 	bl	8005ff8 <__malloc_lock>
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <_malloc_r+0xac>)
 8005f00:	6814      	ldr	r4, [r2, #0]
 8005f02:	4621      	mov	r1, r4
 8005f04:	b991      	cbnz	r1, 8005f2c <_malloc_r+0x54>
 8005f06:	4c20      	ldr	r4, [pc, #128]	; (8005f88 <_malloc_r+0xb0>)
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	b91b      	cbnz	r3, 8005f14 <_malloc_r+0x3c>
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f000 f863 	bl	8005fd8 <_sbrk_r>
 8005f12:	6020      	str	r0, [r4, #0]
 8005f14:	4629      	mov	r1, r5
 8005f16:	4630      	mov	r0, r6
 8005f18:	f000 f85e 	bl	8005fd8 <_sbrk_r>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d124      	bne.n	8005f6a <_malloc_r+0x92>
 8005f20:	230c      	movs	r3, #12
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 f868 	bl	8005ffa <__malloc_unlock>
 8005f2a:	e7e4      	b.n	8005ef6 <_malloc_r+0x1e>
 8005f2c:	680b      	ldr	r3, [r1, #0]
 8005f2e:	1b5b      	subs	r3, r3, r5
 8005f30:	d418      	bmi.n	8005f64 <_malloc_r+0x8c>
 8005f32:	2b0b      	cmp	r3, #11
 8005f34:	d90f      	bls.n	8005f56 <_malloc_r+0x7e>
 8005f36:	600b      	str	r3, [r1, #0]
 8005f38:	50cd      	str	r5, [r1, r3]
 8005f3a:	18cc      	adds	r4, r1, r3
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f000 f85c 	bl	8005ffa <__malloc_unlock>
 8005f42:	f104 000b 	add.w	r0, r4, #11
 8005f46:	1d23      	adds	r3, r4, #4
 8005f48:	f020 0007 	bic.w	r0, r0, #7
 8005f4c:	1ac3      	subs	r3, r0, r3
 8005f4e:	d0d3      	beq.n	8005ef8 <_malloc_r+0x20>
 8005f50:	425a      	negs	r2, r3
 8005f52:	50e2      	str	r2, [r4, r3]
 8005f54:	e7d0      	b.n	8005ef8 <_malloc_r+0x20>
 8005f56:	428c      	cmp	r4, r1
 8005f58:	684b      	ldr	r3, [r1, #4]
 8005f5a:	bf16      	itet	ne
 8005f5c:	6063      	strne	r3, [r4, #4]
 8005f5e:	6013      	streq	r3, [r2, #0]
 8005f60:	460c      	movne	r4, r1
 8005f62:	e7eb      	b.n	8005f3c <_malloc_r+0x64>
 8005f64:	460c      	mov	r4, r1
 8005f66:	6849      	ldr	r1, [r1, #4]
 8005f68:	e7cc      	b.n	8005f04 <_malloc_r+0x2c>
 8005f6a:	1cc4      	adds	r4, r0, #3
 8005f6c:	f024 0403 	bic.w	r4, r4, #3
 8005f70:	42a0      	cmp	r0, r4
 8005f72:	d005      	beq.n	8005f80 <_malloc_r+0xa8>
 8005f74:	1a21      	subs	r1, r4, r0
 8005f76:	4630      	mov	r0, r6
 8005f78:	f000 f82e 	bl	8005fd8 <_sbrk_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d0cf      	beq.n	8005f20 <_malloc_r+0x48>
 8005f80:	6025      	str	r5, [r4, #0]
 8005f82:	e7db      	b.n	8005f3c <_malloc_r+0x64>
 8005f84:	2000018c 	.word	0x2000018c
 8005f88:	20000190 	.word	0x20000190

08005f8c <_realloc_r>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	4607      	mov	r7, r0
 8005f90:	4614      	mov	r4, r2
 8005f92:	460e      	mov	r6, r1
 8005f94:	b921      	cbnz	r1, 8005fa0 <_realloc_r+0x14>
 8005f96:	4611      	mov	r1, r2
 8005f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f9c:	f7ff bf9c 	b.w	8005ed8 <_malloc_r>
 8005fa0:	b922      	cbnz	r2, 8005fac <_realloc_r+0x20>
 8005fa2:	f7ff ff4b 	bl	8005e3c <_free_r>
 8005fa6:	4625      	mov	r5, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fac:	f000 f826 	bl	8005ffc <_malloc_usable_size_r>
 8005fb0:	42a0      	cmp	r0, r4
 8005fb2:	d20f      	bcs.n	8005fd4 <_realloc_r+0x48>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f7ff ff8e 	bl	8005ed8 <_malloc_r>
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0f2      	beq.n	8005fa8 <_realloc_r+0x1c>
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	f7ff ff15 	bl	8005df4 <memcpy>
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f7ff ff35 	bl	8005e3c <_free_r>
 8005fd2:	e7e9      	b.n	8005fa8 <_realloc_r+0x1c>
 8005fd4:	4635      	mov	r5, r6
 8005fd6:	e7e7      	b.n	8005fa8 <_realloc_r+0x1c>

08005fd8 <_sbrk_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4c06      	ldr	r4, [pc, #24]	; (8005ff4 <_sbrk_r+0x1c>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4605      	mov	r5, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	f7fc fa6a 	bl	80024bc <_sbrk>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_sbrk_r+0x1a>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_sbrk_r+0x1a>
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	200006bc 	.word	0x200006bc

08005ff8 <__malloc_lock>:
 8005ff8:	4770      	bx	lr

08005ffa <__malloc_unlock>:
 8005ffa:	4770      	bx	lr

08005ffc <_malloc_usable_size_r>:
 8005ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006000:	1f18      	subs	r0, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	bfbc      	itt	lt
 8006006:	580b      	ldrlt	r3, [r1, r0]
 8006008:	18c0      	addlt	r0, r0, r3
 800600a:	4770      	bx	lr

0800600c <log>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	ed2d 8b02 	vpush	{d8}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	ec55 4b10 	vmov	r4, r5, d0
 8006018:	f000 f8d2 	bl	80061c0 <__ieee754_log>
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <log+0xec>)
 800601e:	eeb0 8a40 	vmov.f32	s16, s0
 8006022:	eef0 8a60 	vmov.f32	s17, s1
 8006026:	f993 6000 	ldrsb.w	r6, [r3]
 800602a:	1c73      	adds	r3, r6, #1
 800602c:	d05b      	beq.n	80060e6 <log+0xda>
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	4620      	mov	r0, r4
 8006034:	4629      	mov	r1, r5
 8006036:	f7fa fd89 	bl	8000b4c <__aeabi_dcmpun>
 800603a:	2800      	cmp	r0, #0
 800603c:	d153      	bne.n	80060e6 <log+0xda>
 800603e:	2200      	movs	r2, #0
 8006040:	2300      	movs	r3, #0
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f7fa fd77 	bl	8000b38 <__aeabi_dcmpgt>
 800604a:	2800      	cmp	r0, #0
 800604c:	d14b      	bne.n	80060e6 <log+0xda>
 800604e:	4b2b      	ldr	r3, [pc, #172]	; (80060fc <log+0xf0>)
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	9008      	str	r0, [sp, #32]
 8006054:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006058:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800605c:	b9a6      	cbnz	r6, 8006088 <log+0x7c>
 800605e:	4b28      	ldr	r3, [pc, #160]	; (8006100 <log+0xf4>)
 8006060:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006064:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006068:	4620      	mov	r0, r4
 800606a:	2200      	movs	r2, #0
 800606c:	2300      	movs	r3, #0
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006074:	bb40      	cbnz	r0, 80060c8 <log+0xbc>
 8006076:	2301      	movs	r3, #1
 8006078:	2e02      	cmp	r6, #2
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	d119      	bne.n	80060b2 <log+0xa6>
 800607e:	f7ff fb8d 	bl	800579c <__errno>
 8006082:	2321      	movs	r3, #33	; 0x21
 8006084:	6003      	str	r3, [r0, #0]
 8006086:	e019      	b.n	80060bc <log+0xb0>
 8006088:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <log+0xf8>)
 800608a:	2200      	movs	r2, #0
 800608c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006090:	4620      	mov	r0, r4
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	4629      	mov	r1, r5
 8006098:	f7fa fd26 	bl	8000ae8 <__aeabi_dcmpeq>
 800609c:	2800      	cmp	r0, #0
 800609e:	d0ea      	beq.n	8006076 <log+0x6a>
 80060a0:	2302      	movs	r3, #2
 80060a2:	429e      	cmp	r6, r3
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	d111      	bne.n	80060cc <log+0xc0>
 80060a8:	f7ff fb78 	bl	800579c <__errno>
 80060ac:	2322      	movs	r3, #34	; 0x22
 80060ae:	6003      	str	r3, [r0, #0]
 80060b0:	e011      	b.n	80060d6 <log+0xca>
 80060b2:	4668      	mov	r0, sp
 80060b4:	f000 fae6 	bl	8006684 <matherr>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d0e0      	beq.n	800607e <log+0x72>
 80060bc:	4812      	ldr	r0, [pc, #72]	; (8006108 <log+0xfc>)
 80060be:	f000 fae3 	bl	8006688 <nan>
 80060c2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80060c6:	e006      	b.n	80060d6 <log+0xca>
 80060c8:	2302      	movs	r3, #2
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	4668      	mov	r0, sp
 80060ce:	f000 fad9 	bl	8006684 <matherr>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0e8      	beq.n	80060a8 <log+0x9c>
 80060d6:	9b08      	ldr	r3, [sp, #32]
 80060d8:	b11b      	cbz	r3, 80060e2 <log+0xd6>
 80060da:	f7ff fb5f 	bl	800579c <__errno>
 80060de:	9b08      	ldr	r3, [sp, #32]
 80060e0:	6003      	str	r3, [r0, #0]
 80060e2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80060e6:	eeb0 0a48 	vmov.f32	s0, s16
 80060ea:	eef0 0a68 	vmov.f32	s1, s17
 80060ee:	b00a      	add	sp, #40	; 0x28
 80060f0:	ecbd 8b02 	vpop	{d8}
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
 80060f6:	bf00      	nop
 80060f8:	20000074 	.word	0x20000074
 80060fc:	0800691f 	.word	0x0800691f
 8006100:	c7efffff 	.word	0xc7efffff
 8006104:	fff00000 	.word	0xfff00000
 8006108:	080068f1 	.word	0x080068f1

0800610c <sqrt>:
 800610c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006110:	ed2d 8b02 	vpush	{d8}
 8006114:	b08b      	sub	sp, #44	; 0x2c
 8006116:	ec55 4b10 	vmov	r4, r5, d0
 800611a:	f000 fa03 	bl	8006524 <__ieee754_sqrt>
 800611e:	4b26      	ldr	r3, [pc, #152]	; (80061b8 <sqrt+0xac>)
 8006120:	eeb0 8a40 	vmov.f32	s16, s0
 8006124:	eef0 8a60 	vmov.f32	s17, s1
 8006128:	f993 6000 	ldrsb.w	r6, [r3]
 800612c:	1c73      	adds	r3, r6, #1
 800612e:	d02a      	beq.n	8006186 <sqrt+0x7a>
 8006130:	4622      	mov	r2, r4
 8006132:	462b      	mov	r3, r5
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa fd08 	bl	8000b4c <__aeabi_dcmpun>
 800613c:	4607      	mov	r7, r0
 800613e:	bb10      	cbnz	r0, 8006186 <sqrt+0x7a>
 8006140:	f04f 0800 	mov.w	r8, #0
 8006144:	f04f 0900 	mov.w	r9, #0
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa fcd4 	bl	8000afc <__aeabi_dcmplt>
 8006154:	b1b8      	cbz	r0, 8006186 <sqrt+0x7a>
 8006156:	2301      	movs	r3, #1
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	4b18      	ldr	r3, [pc, #96]	; (80061bc <sqrt+0xb0>)
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	9708      	str	r7, [sp, #32]
 8006160:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006164:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006168:	b9b6      	cbnz	r6, 8006198 <sqrt+0x8c>
 800616a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800616e:	4668      	mov	r0, sp
 8006170:	f000 fa88 	bl	8006684 <matherr>
 8006174:	b1d0      	cbz	r0, 80061ac <sqrt+0xa0>
 8006176:	9b08      	ldr	r3, [sp, #32]
 8006178:	b11b      	cbz	r3, 8006182 <sqrt+0x76>
 800617a:	f7ff fb0f 	bl	800579c <__errno>
 800617e:	9b08      	ldr	r3, [sp, #32]
 8006180:	6003      	str	r3, [r0, #0]
 8006182:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006186:	eeb0 0a48 	vmov.f32	s0, s16
 800618a:	eef0 0a68 	vmov.f32	s1, s17
 800618e:	b00b      	add	sp, #44	; 0x2c
 8006190:	ecbd 8b02 	vpop	{d8}
 8006194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	4640      	mov	r0, r8
 800619e:	4649      	mov	r1, r9
 80061a0:	f7fa fb64 	bl	800086c <__aeabi_ddiv>
 80061a4:	2e02      	cmp	r6, #2
 80061a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061aa:	d1e0      	bne.n	800616e <sqrt+0x62>
 80061ac:	f7ff faf6 	bl	800579c <__errno>
 80061b0:	2321      	movs	r3, #33	; 0x21
 80061b2:	6003      	str	r3, [r0, #0]
 80061b4:	e7df      	b.n	8006176 <sqrt+0x6a>
 80061b6:	bf00      	nop
 80061b8:	20000074 	.word	0x20000074
 80061bc:	08006923 	.word	0x08006923

080061c0 <__ieee754_log>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	ec51 0b10 	vmov	r0, r1, d0
 80061c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80061cc:	b087      	sub	sp, #28
 80061ce:	460d      	mov	r5, r1
 80061d0:	da27      	bge.n	8006222 <__ieee754_log+0x62>
 80061d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061d6:	4303      	orrs	r3, r0
 80061d8:	ee10 2a10 	vmov	r2, s0
 80061dc:	d10a      	bne.n	80061f4 <__ieee754_log+0x34>
 80061de:	49cc      	ldr	r1, [pc, #816]	; (8006510 <__ieee754_log+0x350>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	2300      	movs	r3, #0
 80061e4:	2000      	movs	r0, #0
 80061e6:	f7fa fb41 	bl	800086c <__aeabi_ddiv>
 80061ea:	ec41 0b10 	vmov	d0, r0, r1
 80061ee:	b007      	add	sp, #28
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	2900      	cmp	r1, #0
 80061f6:	da05      	bge.n	8006204 <__ieee754_log+0x44>
 80061f8:	460b      	mov	r3, r1
 80061fa:	f7fa f855 	bl	80002a8 <__aeabi_dsub>
 80061fe:	2200      	movs	r2, #0
 8006200:	2300      	movs	r3, #0
 8006202:	e7f0      	b.n	80061e6 <__ieee754_log+0x26>
 8006204:	4bc3      	ldr	r3, [pc, #780]	; (8006514 <__ieee754_log+0x354>)
 8006206:	2200      	movs	r2, #0
 8006208:	f7fa fa06 	bl	8000618 <__aeabi_dmul>
 800620c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006210:	460d      	mov	r5, r1
 8006212:	4ac1      	ldr	r2, [pc, #772]	; (8006518 <__ieee754_log+0x358>)
 8006214:	4295      	cmp	r5, r2
 8006216:	dd06      	ble.n	8006226 <__ieee754_log+0x66>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	f7fa f846 	bl	80002ac <__adddf3>
 8006220:	e7e3      	b.n	80061ea <__ieee754_log+0x2a>
 8006222:	2300      	movs	r3, #0
 8006224:	e7f5      	b.n	8006212 <__ieee754_log+0x52>
 8006226:	152c      	asrs	r4, r5, #20
 8006228:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800622c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006230:	441c      	add	r4, r3
 8006232:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006236:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800623a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800623e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006242:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006246:	ea42 0105 	orr.w	r1, r2, r5
 800624a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800624e:	2200      	movs	r2, #0
 8006250:	4bb2      	ldr	r3, [pc, #712]	; (800651c <__ieee754_log+0x35c>)
 8006252:	f7fa f829 	bl	80002a8 <__aeabi_dsub>
 8006256:	1cab      	adds	r3, r5, #2
 8006258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800625c:	2b02      	cmp	r3, #2
 800625e:	4682      	mov	sl, r0
 8006260:	468b      	mov	fp, r1
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	dc53      	bgt.n	8006310 <__ieee754_log+0x150>
 8006268:	2300      	movs	r3, #0
 800626a:	f7fa fc3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800626e:	b1d0      	cbz	r0, 80062a6 <__ieee754_log+0xe6>
 8006270:	2c00      	cmp	r4, #0
 8006272:	f000 8120 	beq.w	80064b6 <__ieee754_log+0x2f6>
 8006276:	4620      	mov	r0, r4
 8006278:	f7fa f964 	bl	8000544 <__aeabi_i2d>
 800627c:	a390      	add	r3, pc, #576	; (adr r3, 80064c0 <__ieee754_log+0x300>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	4606      	mov	r6, r0
 8006284:	460f      	mov	r7, r1
 8006286:	f7fa f9c7 	bl	8000618 <__aeabi_dmul>
 800628a:	a38f      	add	r3, pc, #572	; (adr r3, 80064c8 <__ieee754_log+0x308>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	4604      	mov	r4, r0
 8006292:	460d      	mov	r5, r1
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7fa f9be 	bl	8000618 <__aeabi_dmul>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4620      	mov	r0, r4
 80062a2:	4629      	mov	r1, r5
 80062a4:	e7ba      	b.n	800621c <__ieee754_log+0x5c>
 80062a6:	a38a      	add	r3, pc, #552	; (adr r3, 80064d0 <__ieee754_log+0x310>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	4650      	mov	r0, sl
 80062ae:	4659      	mov	r1, fp
 80062b0:	f7fa f9b2 	bl	8000618 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	2000      	movs	r0, #0
 80062ba:	4999      	ldr	r1, [pc, #612]	; (8006520 <__ieee754_log+0x360>)
 80062bc:	f7f9 fff4 	bl	80002a8 <__aeabi_dsub>
 80062c0:	4652      	mov	r2, sl
 80062c2:	4606      	mov	r6, r0
 80062c4:	460f      	mov	r7, r1
 80062c6:	465b      	mov	r3, fp
 80062c8:	4650      	mov	r0, sl
 80062ca:	4659      	mov	r1, fp
 80062cc:	f7fa f9a4 	bl	8000618 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4630      	mov	r0, r6
 80062d6:	4639      	mov	r1, r7
 80062d8:	f7fa f99e 	bl	8000618 <__aeabi_dmul>
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	b914      	cbnz	r4, 80062e8 <__ieee754_log+0x128>
 80062e2:	4632      	mov	r2, r6
 80062e4:	463b      	mov	r3, r7
 80062e6:	e0a0      	b.n	800642a <__ieee754_log+0x26a>
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7fa f92b 	bl	8000544 <__aeabi_i2d>
 80062ee:	a374      	add	r3, pc, #464	; (adr r3, 80064c0 <__ieee754_log+0x300>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	4680      	mov	r8, r0
 80062f6:	4689      	mov	r9, r1
 80062f8:	f7fa f98e 	bl	8000618 <__aeabi_dmul>
 80062fc:	a372      	add	r3, pc, #456	; (adr r3, 80064c8 <__ieee754_log+0x308>)
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	4604      	mov	r4, r0
 8006304:	460d      	mov	r5, r1
 8006306:	4640      	mov	r0, r8
 8006308:	4649      	mov	r1, r9
 800630a:	f7fa f985 	bl	8000618 <__aeabi_dmul>
 800630e:	e0a5      	b.n	800645c <__ieee754_log+0x29c>
 8006310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006314:	f7f9 ffca 	bl	80002ac <__adddf3>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4650      	mov	r0, sl
 800631e:	4659      	mov	r1, fp
 8006320:	f7fa faa4 	bl	800086c <__aeabi_ddiv>
 8006324:	e9cd 0100 	strd	r0, r1, [sp]
 8006328:	4620      	mov	r0, r4
 800632a:	f7fa f90b 	bl	8000544 <__aeabi_i2d>
 800632e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006336:	4610      	mov	r0, r2
 8006338:	4619      	mov	r1, r3
 800633a:	f7fa f96d 	bl	8000618 <__aeabi_dmul>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006346:	f7fa f967 	bl	8000618 <__aeabi_dmul>
 800634a:	a363      	add	r3, pc, #396	; (adr r3, 80064d8 <__ieee754_log+0x318>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	4680      	mov	r8, r0
 8006352:	4689      	mov	r9, r1
 8006354:	f7fa f960 	bl	8000618 <__aeabi_dmul>
 8006358:	a361      	add	r3, pc, #388	; (adr r3, 80064e0 <__ieee754_log+0x320>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7f9 ffa5 	bl	80002ac <__adddf3>
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	f7fa f957 	bl	8000618 <__aeabi_dmul>
 800636a:	a35f      	add	r3, pc, #380	; (adr r3, 80064e8 <__ieee754_log+0x328>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f7f9 ff9c 	bl	80002ac <__adddf3>
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	f7fa f94e 	bl	8000618 <__aeabi_dmul>
 800637c:	a35c      	add	r3, pc, #368	; (adr r3, 80064f0 <__ieee754_log+0x330>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7f9 ff93 	bl	80002ac <__adddf3>
 8006386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800638a:	f7fa f945 	bl	8000618 <__aeabi_dmul>
 800638e:	a35a      	add	r3, pc, #360	; (adr r3, 80064f8 <__ieee754_log+0x338>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006398:	4640      	mov	r0, r8
 800639a:	4649      	mov	r1, r9
 800639c:	f7fa f93c 	bl	8000618 <__aeabi_dmul>
 80063a0:	a357      	add	r3, pc, #348	; (adr r3, 8006500 <__ieee754_log+0x340>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 ff81 	bl	80002ac <__adddf3>
 80063aa:	4642      	mov	r2, r8
 80063ac:	464b      	mov	r3, r9
 80063ae:	f7fa f933 	bl	8000618 <__aeabi_dmul>
 80063b2:	a355      	add	r3, pc, #340	; (adr r3, 8006508 <__ieee754_log+0x348>)
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f7f9 ff78 	bl	80002ac <__adddf3>
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	f7fa f92a 	bl	8000618 <__aeabi_dmul>
 80063c4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80063d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d4:	f7f9 ff6a 	bl	80002ac <__adddf3>
 80063d8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80063dc:	3551      	adds	r5, #81	; 0x51
 80063de:	4335      	orrs	r5, r6
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	dd48      	ble.n	800647a <__ieee754_log+0x2ba>
 80063e8:	2200      	movs	r2, #0
 80063ea:	4b4d      	ldr	r3, [pc, #308]	; (8006520 <__ieee754_log+0x360>)
 80063ec:	4650      	mov	r0, sl
 80063ee:	4659      	mov	r1, fp
 80063f0:	f7fa f912 	bl	8000618 <__aeabi_dmul>
 80063f4:	4652      	mov	r2, sl
 80063f6:	465b      	mov	r3, fp
 80063f8:	f7fa f90e 	bl	8000618 <__aeabi_dmul>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4606      	mov	r6, r0
 8006402:	460f      	mov	r7, r1
 8006404:	4640      	mov	r0, r8
 8006406:	4649      	mov	r1, r9
 8006408:	f7f9 ff50 	bl	80002ac <__adddf3>
 800640c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006410:	f7fa f902 	bl	8000618 <__aeabi_dmul>
 8006414:	4680      	mov	r8, r0
 8006416:	4689      	mov	r9, r1
 8006418:	b964      	cbnz	r4, 8006434 <__ieee754_log+0x274>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4630      	mov	r0, r6
 8006420:	4639      	mov	r1, r7
 8006422:	f7f9 ff41 	bl	80002a8 <__aeabi_dsub>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4650      	mov	r0, sl
 800642c:	4659      	mov	r1, fp
 800642e:	f7f9 ff3b 	bl	80002a8 <__aeabi_dsub>
 8006432:	e6da      	b.n	80061ea <__ieee754_log+0x2a>
 8006434:	a322      	add	r3, pc, #136	; (adr r3, 80064c0 <__ieee754_log+0x300>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643e:	f7fa f8eb 	bl	8000618 <__aeabi_dmul>
 8006442:	a321      	add	r3, pc, #132	; (adr r3, 80064c8 <__ieee754_log+0x308>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	4604      	mov	r4, r0
 800644a:	460d      	mov	r5, r1
 800644c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006450:	f7fa f8e2 	bl	8000618 <__aeabi_dmul>
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	f7f9 ff28 	bl	80002ac <__adddf3>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7f9 ff20 	bl	80002a8 <__aeabi_dsub>
 8006468:	4652      	mov	r2, sl
 800646a:	465b      	mov	r3, fp
 800646c:	f7f9 ff1c 	bl	80002a8 <__aeabi_dsub>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4620      	mov	r0, r4
 8006476:	4629      	mov	r1, r5
 8006478:	e7d9      	b.n	800642e <__ieee754_log+0x26e>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4650      	mov	r0, sl
 8006480:	4659      	mov	r1, fp
 8006482:	f7f9 ff11 	bl	80002a8 <__aeabi_dsub>
 8006486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800648a:	f7fa f8c5 	bl	8000618 <__aeabi_dmul>
 800648e:	4606      	mov	r6, r0
 8006490:	460f      	mov	r7, r1
 8006492:	2c00      	cmp	r4, #0
 8006494:	f43f af25 	beq.w	80062e2 <__ieee754_log+0x122>
 8006498:	a309      	add	r3, pc, #36	; (adr r3, 80064c0 <__ieee754_log+0x300>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a2:	f7fa f8b9 	bl	8000618 <__aeabi_dmul>
 80064a6:	a308      	add	r3, pc, #32	; (adr r3, 80064c8 <__ieee754_log+0x308>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b4:	e729      	b.n	800630a <__ieee754_log+0x14a>
 80064b6:	2000      	movs	r0, #0
 80064b8:	2100      	movs	r1, #0
 80064ba:	e696      	b.n	80061ea <__ieee754_log+0x2a>
 80064bc:	f3af 8000 	nop.w
 80064c0:	fee00000 	.word	0xfee00000
 80064c4:	3fe62e42 	.word	0x3fe62e42
 80064c8:	35793c76 	.word	0x35793c76
 80064cc:	3dea39ef 	.word	0x3dea39ef
 80064d0:	55555555 	.word	0x55555555
 80064d4:	3fd55555 	.word	0x3fd55555
 80064d8:	df3e5244 	.word	0xdf3e5244
 80064dc:	3fc2f112 	.word	0x3fc2f112
 80064e0:	96cb03de 	.word	0x96cb03de
 80064e4:	3fc74664 	.word	0x3fc74664
 80064e8:	94229359 	.word	0x94229359
 80064ec:	3fd24924 	.word	0x3fd24924
 80064f0:	55555593 	.word	0x55555593
 80064f4:	3fe55555 	.word	0x3fe55555
 80064f8:	d078c69f 	.word	0xd078c69f
 80064fc:	3fc39a09 	.word	0x3fc39a09
 8006500:	1d8e78af 	.word	0x1d8e78af
 8006504:	3fcc71c5 	.word	0x3fcc71c5
 8006508:	9997fa04 	.word	0x9997fa04
 800650c:	3fd99999 	.word	0x3fd99999
 8006510:	c3500000 	.word	0xc3500000
 8006514:	43500000 	.word	0x43500000
 8006518:	7fefffff 	.word	0x7fefffff
 800651c:	3ff00000 	.word	0x3ff00000
 8006520:	3fe00000 	.word	0x3fe00000

08006524 <__ieee754_sqrt>:
 8006524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006528:	4955      	ldr	r1, [pc, #340]	; (8006680 <__ieee754_sqrt+0x15c>)
 800652a:	ec55 4b10 	vmov	r4, r5, d0
 800652e:	43a9      	bics	r1, r5
 8006530:	462b      	mov	r3, r5
 8006532:	462a      	mov	r2, r5
 8006534:	d112      	bne.n	800655c <__ieee754_sqrt+0x38>
 8006536:	ee10 2a10 	vmov	r2, s0
 800653a:	ee10 0a10 	vmov	r0, s0
 800653e:	4629      	mov	r1, r5
 8006540:	f7fa f86a 	bl	8000618 <__aeabi_dmul>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7f9 feae 	bl	80002ac <__adddf3>
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	ec45 4b10 	vmov	d0, r4, r5
 8006558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655c:	2d00      	cmp	r5, #0
 800655e:	ee10 0a10 	vmov	r0, s0
 8006562:	4621      	mov	r1, r4
 8006564:	dc0f      	bgt.n	8006586 <__ieee754_sqrt+0x62>
 8006566:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800656a:	4330      	orrs	r0, r6
 800656c:	d0f2      	beq.n	8006554 <__ieee754_sqrt+0x30>
 800656e:	b155      	cbz	r5, 8006586 <__ieee754_sqrt+0x62>
 8006570:	ee10 2a10 	vmov	r2, s0
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	f7f9 fe96 	bl	80002a8 <__aeabi_dsub>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	f7fa f974 	bl	800086c <__aeabi_ddiv>
 8006584:	e7e4      	b.n	8006550 <__ieee754_sqrt+0x2c>
 8006586:	151b      	asrs	r3, r3, #20
 8006588:	d073      	beq.n	8006672 <__ieee754_sqrt+0x14e>
 800658a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800658e:	07dd      	lsls	r5, r3, #31
 8006590:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006594:	bf48      	it	mi
 8006596:	0fc8      	lsrmi	r0, r1, #31
 8006598:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800659c:	bf44      	itt	mi
 800659e:	0049      	lslmi	r1, r1, #1
 80065a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80065a4:	2500      	movs	r5, #0
 80065a6:	1058      	asrs	r0, r3, #1
 80065a8:	0fcb      	lsrs	r3, r1, #31
 80065aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80065ae:	0049      	lsls	r1, r1, #1
 80065b0:	2316      	movs	r3, #22
 80065b2:	462c      	mov	r4, r5
 80065b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80065b8:	19a7      	adds	r7, r4, r6
 80065ba:	4297      	cmp	r7, r2
 80065bc:	bfde      	ittt	le
 80065be:	19bc      	addle	r4, r7, r6
 80065c0:	1bd2      	suble	r2, r2, r7
 80065c2:	19ad      	addle	r5, r5, r6
 80065c4:	0fcf      	lsrs	r7, r1, #31
 80065c6:	3b01      	subs	r3, #1
 80065c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80065cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80065d4:	d1f0      	bne.n	80065b8 <__ieee754_sqrt+0x94>
 80065d6:	f04f 0c20 	mov.w	ip, #32
 80065da:	469e      	mov	lr, r3
 80065dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80065e0:	42a2      	cmp	r2, r4
 80065e2:	eb06 070e 	add.w	r7, r6, lr
 80065e6:	dc02      	bgt.n	80065ee <__ieee754_sqrt+0xca>
 80065e8:	d112      	bne.n	8006610 <__ieee754_sqrt+0xec>
 80065ea:	428f      	cmp	r7, r1
 80065ec:	d810      	bhi.n	8006610 <__ieee754_sqrt+0xec>
 80065ee:	2f00      	cmp	r7, #0
 80065f0:	eb07 0e06 	add.w	lr, r7, r6
 80065f4:	da42      	bge.n	800667c <__ieee754_sqrt+0x158>
 80065f6:	f1be 0f00 	cmp.w	lr, #0
 80065fa:	db3f      	blt.n	800667c <__ieee754_sqrt+0x158>
 80065fc:	f104 0801 	add.w	r8, r4, #1
 8006600:	1b12      	subs	r2, r2, r4
 8006602:	428f      	cmp	r7, r1
 8006604:	bf88      	it	hi
 8006606:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800660a:	1bc9      	subs	r1, r1, r7
 800660c:	4433      	add	r3, r6
 800660e:	4644      	mov	r4, r8
 8006610:	0052      	lsls	r2, r2, #1
 8006612:	f1bc 0c01 	subs.w	ip, ip, #1
 8006616:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800661a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800661e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006622:	d1dd      	bne.n	80065e0 <__ieee754_sqrt+0xbc>
 8006624:	430a      	orrs	r2, r1
 8006626:	d006      	beq.n	8006636 <__ieee754_sqrt+0x112>
 8006628:	1c5c      	adds	r4, r3, #1
 800662a:	bf13      	iteet	ne
 800662c:	3301      	addne	r3, #1
 800662e:	3501      	addeq	r5, #1
 8006630:	4663      	moveq	r3, ip
 8006632:	f023 0301 	bicne.w	r3, r3, #1
 8006636:	106a      	asrs	r2, r5, #1
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	07e9      	lsls	r1, r5, #31
 800663c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006640:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006644:	bf48      	it	mi
 8006646:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800664a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800664e:	461c      	mov	r4, r3
 8006650:	e780      	b.n	8006554 <__ieee754_sqrt+0x30>
 8006652:	0aca      	lsrs	r2, r1, #11
 8006654:	3815      	subs	r0, #21
 8006656:	0549      	lsls	r1, r1, #21
 8006658:	2a00      	cmp	r2, #0
 800665a:	d0fa      	beq.n	8006652 <__ieee754_sqrt+0x12e>
 800665c:	02d6      	lsls	r6, r2, #11
 800665e:	d50a      	bpl.n	8006676 <__ieee754_sqrt+0x152>
 8006660:	f1c3 0420 	rsb	r4, r3, #32
 8006664:	fa21 f404 	lsr.w	r4, r1, r4
 8006668:	1e5d      	subs	r5, r3, #1
 800666a:	4099      	lsls	r1, r3
 800666c:	4322      	orrs	r2, r4
 800666e:	1b43      	subs	r3, r0, r5
 8006670:	e78b      	b.n	800658a <__ieee754_sqrt+0x66>
 8006672:	4618      	mov	r0, r3
 8006674:	e7f0      	b.n	8006658 <__ieee754_sqrt+0x134>
 8006676:	0052      	lsls	r2, r2, #1
 8006678:	3301      	adds	r3, #1
 800667a:	e7ef      	b.n	800665c <__ieee754_sqrt+0x138>
 800667c:	46a0      	mov	r8, r4
 800667e:	e7bf      	b.n	8006600 <__ieee754_sqrt+0xdc>
 8006680:	7ff00000 	.word	0x7ff00000

08006684 <matherr>:
 8006684:	2000      	movs	r0, #0
 8006686:	4770      	bx	lr

08006688 <nan>:
 8006688:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006690 <nan+0x8>
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	00000000 	.word	0x00000000
 8006694:	7ff80000 	.word	0x7ff80000

08006698 <_init>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr

080066a4 <_fini>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr
