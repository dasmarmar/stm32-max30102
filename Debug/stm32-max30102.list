
stm32-max30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a8c  08005a8c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a94  08005a94  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000078  08005b14  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08005b14  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f898  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002185  00000000  00000000  0002f940  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  00031ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000327f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024093  00000000  00000000  00033438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b849  00000000  00000000  000574cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d75cf  00000000  00000000  00062d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a2e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  0013a360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a50 	.word	0x08005a50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08005a50 	.word	0x08005a50

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2uiz>:
 8000ac8:	004a      	lsls	r2, r1, #1
 8000aca:	d211      	bcs.n	8000af0 <__aeabi_d2uiz+0x28>
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d211      	bcs.n	8000af6 <__aeabi_d2uiz+0x2e>
 8000ad2:	d50d      	bpl.n	8000af0 <__aeabi_d2uiz+0x28>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d40e      	bmi.n	8000afc <__aeabi_d2uiz+0x34>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_d2uiz+0x3a>
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0000 	mov.w	r0, #0
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08b      	sub	sp, #44	; 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	ed87 0a05 	vstr	s0, [r7, #20]
 8000eb2:	edc7 0a04 	vstr	s1, [r7, #16]
 8000eb6:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000eba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ebe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ece:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000ed2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ed6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ede:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	f107 0218 	add.w	r2, r7, #24
 8000eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eee:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ef2:	6a3a      	ldr	r2, [r7, #32]
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	ee07 2a10 	vmov	s14, r2
 8000efa:	ee07 3a90 	vmov	s15, r3
}
 8000efe:	eeb0 0a47 	vmov.f32	s0, s14
 8000f02:	eef0 0a67 	vmov.f32	s1, s15
 8000f06:	372c      	adds	r7, #44	; 0x2c
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f1a:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fac7 	bl	80004b8 <__aeabi_f2d>
 8000f2a:	a319      	add	r3, pc, #100	; (adr r3, 8000f90 <lowPassButterworthFilter+0x80>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f7ff fb1a 	bl	8000568 <__aeabi_dmul>
 8000f34:	4603      	mov	r3, r0
 8000f36:	460c      	mov	r4, r1
 8000f38:	4625      	mov	r5, r4
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fab9 	bl	80004b8 <__aeabi_f2d>
 8000f46:	a314      	add	r3, pc, #80	; (adr r3, 8000f98 <lowPassButterworthFilter+0x88>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fb0c 	bl	8000568 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4620      	mov	r0, r4
 8000f56:	4629      	mov	r1, r5
 8000f58:	f7ff f950 	bl	80001fc <__adddf3>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	460c      	mov	r4, r1
 8000f60:	4618      	mov	r0, r3
 8000f62:	4621      	mov	r1, r4
 8000f64:	f7ff fdd0 	bl	8000b08 <__aeabi_d2f>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	605a      	str	r2, [r3, #4]

    //Fs = 100Hz and Fc = 4Hz
    //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	ed93 7a00 	vldr	s14, [r3]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8c:	f3af 8000 	nop.w
 8000f90:	5e7c4548 	.word	0x5e7c4548
 8000f94:	3fcf63ef 	.word	0x3fcf63ef
 8000f98:	50c1dd5c 	.word	0x50c1dd5c
 8000f9c:	3fe04e08 	.word	0x3fe04e08

08000fa0 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000faa:	6038      	str	r0, [r7, #0]
  float avg = 0;
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  filterValues->values[filterValues->index] = M;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  filterValues->index++;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001008:	3301      	adds	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <meanDiff+0xe0>)
 800101a:	fba3 1302 	umull	r1, r3, r3, r2
 800101e:	08d9      	lsrs	r1, r3, #3
 8001020:	460b      	mov	r3, r1
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	b2da      	uxtb	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001036:	2b0e      	cmp	r3, #14
 8001038:	d807      	bhi.n	800104a <meanDiff+0xaa>
    filterValues->count++;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  avg = filterValues->sum / filterValues->count;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001062:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001066:	ed97 7a03 	vldr	s14, [r7, #12]
 800106a:	edd7 7a01 	vldr	s15, [r7, #4]
 800106e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	88888889 	.word	0x88888889

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108a:	f001 f9d5 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108e:	f000 f84d 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001092:	f000 f977 	bl	8001384 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001096:	f000 f8f3 	bl	8001280 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800109a:	f000 f945 	bl	8001328 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800109e:	f000 f8af 	bl	8001200 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80010a2:	f000 f917 	bl	80012d4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  I2C_Init();
 80010a6:	f000 fa8b 	bl	80015c0 <I2C_Init>
  uartInit();
 80010aa:	f001 f971 	bl	8002390 <uartInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  pulseOximiter_resetRegisters();
 80010ae:	f000 fb5d 	bl	800176c <pulseOximiter_resetRegisters>

  // Setup up MAX30102 FIFO registers
  pulseOximiter_initFifo();
 80010b2:	f000 fc3f 	bl	8001934 <pulseOximiter_initFifo>

  // Set sampling rate to 100MSPS and
  // pulse width to 411us
  // See DataSheet for available
  // sampling rate/pulse width combinations
  pulseOximiter_setSampleRate(_100SPS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fbb2 	bl	8001820 <pulseOximiter_setSampleRate>
  pulseOximiter_setPulseWidth(_411_US);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 fbdd 	bl	800187c <pulseOximiter_setPulseWidth>

  // Set Red/IR Led current
  // 0 - 51mA maximum
  pulseOximiter_setLedCurrent(RED_LED, 50);
 80010c2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001124 <main+0xa0>
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 fb76 	bl	80017b8 <pulseOximiter_setLedCurrent>
  pulseOximiter_setLedCurrent(IR_LED, 5);
 80010cc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80010d0:	2002      	movs	r0, #2
 80010d2:	f000 fb71 	bl	80017b8 <pulseOximiter_setLedCurrent>

  // Set FIFO registers to zero
  pulseOximiter_resetFifo();
 80010d6:	f000 fc1d 	bl	8001914 <pulseOximiter_resetFifo>
  // Set the Measurement Mode
  // Measurement Modes:
  // HEART_RATE - only Red Led active
  // SPO2 - Both IR & Red Led active
  // MULTI_LED - Both led's active (timing can be configured; see datasheet)
  pulseOximiter_setMeasurementMode(SPO2);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 fafe 	bl	80016dc <pulseOximiter_setMeasurementMode>

  while (1)
  {
	  pulseOximiter.temperature = pulseOximiter_readTemperature();
 80010e0:	f000 fc7e 	bl	80019e0 <pulseOximiter_readTemperature>
 80010e4:	eef0 7a40 	vmov.f32	s15, s0
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <main+0xa4>)
 80010ea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	  // Read FIFO LED Data
	  fifoLedData = pulseOximiter_readFifo();
 80010ee:	f000 fc29 	bl	8001944 <pulseOximiter_readFifo>
 80010f2:	4603      	mov	r3, r0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	  // Get BPM/SpO2 readings
	  pulseOximiter = pulseOximiter_update(fifoLedData);
 80010f6:	4c0c      	ldr	r4, [pc, #48]	; (8001128 <main+0xa4>)
 80010f8:	463b      	mov	r3, r7
 80010fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fcb7 	bl	8001a70 <pulseOximiter_update>
 8001102:	4625      	mov	r5, r4
 8001104:	463c      	mov	r4, r7
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001112:	e885 0003 	stmia.w	r5, {r0, r1}
	  // Display the data over the built in USB
	  // If available; check board specs
	  // use terminal program and set BAUD = 115200
	  //pulseOximiter_displayData();

	  pulseOximiter_resetFifo();
 8001116:	f000 fbfd 	bl	8001914 <pulseOximiter_resetFifo>

	  // Small delay
	  HAL_Delay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f001 f9fe 	bl	800251c <HAL_Delay>
	  pulseOximiter.temperature = pulseOximiter_readTemperature();
 8001120:	e7de      	b.n	80010e0 <main+0x5c>
 8001122:	bf00      	nop
 8001124:	42480000 	.word	0x42480000
 8001128:	20000094 	.word	0x20000094

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 f938 	bl	80053b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <SystemClock_Config+0xcc>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <SystemClock_Config+0xcc>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <SystemClock_Config+0xd0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <SystemClock_Config+0xd0>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800118c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	2302      	movs	r3, #2
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011a0:	23a8      	movs	r3, #168	; 0xa8
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 fdf1 	bl	8003d98 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011bc:	f000 f9fc 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2105      	movs	r1, #5
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 f84a 	bl	8004278 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ea:	f000 f9e5 	bl	80015b8 <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	; 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C1_Init+0x74>)
 800121e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_I2C1_Init+0x74>)
 800123e:	f001 fc89 	bl	8002b54 <HAL_I2C_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 f9b6 	bl	80015b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C1_Init+0x74>)
 8001250:	f002 fc09 	bl	8003a66 <HAL_I2CEx_ConfigAnalogFilter>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800125a:	f000 f9ad 	bl	80015b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125e:	2100      	movs	r1, #0
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2C1_Init+0x74>)
 8001262:	f002 fc3c 	bl	8003ade <HAL_I2CEx_ConfigDigitalFilter>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800126c:	f000 f9a4 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001c4 	.word	0x200001c4
 8001278:	40005400 	.word	0x40005400
 800127c:	000186a0 	.word	0x000186a0

08001280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_USART3_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART3_UART_Init+0x4c>)
 80012b8:	f003 f9d0 	bl	800465c <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f979 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000184 	.word	0x20000184
 80012d0:	40004800 	.word	0x40004800

080012d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART6_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 800130c:	f003 f9a6 	bl	800465c <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f94f 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000620 	.word	0x20000620
 8001324:	40011400 	.word	0x40011400

08001328 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001332:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001336:	2204      	movs	r2, #4
 8001338:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133c:	2202      	movs	r2, #2
 800133e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001348:	2202      	movs	r2, #2
 800134a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134e:	2201      	movs	r2, #1
 8001350:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001360:	2201      	movs	r2, #1
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	f002 fbf6 	bl	8003b5c <HAL_PCD_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001376:	f000 f91f 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000218 	.word	0x20000218

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <MX_GPIO_Init+0x214>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a7d      	ldr	r2, [pc, #500]	; (8001598 <MX_GPIO_Init+0x214>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <MX_GPIO_Init+0x214>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	4b77      	ldr	r3, [pc, #476]	; (8001598 <MX_GPIO_Init+0x214>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a76      	ldr	r2, [pc, #472]	; (8001598 <MX_GPIO_Init+0x214>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b74      	ldr	r3, [pc, #464]	; (8001598 <MX_GPIO_Init+0x214>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <MX_GPIO_Init+0x214>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a6f      	ldr	r2, [pc, #444]	; (8001598 <MX_GPIO_Init+0x214>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <MX_GPIO_Init+0x214>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b69      	ldr	r3, [pc, #420]	; (8001598 <MX_GPIO_Init+0x214>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a68      	ldr	r2, [pc, #416]	; (8001598 <MX_GPIO_Init+0x214>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b66      	ldr	r3, [pc, #408]	; (8001598 <MX_GPIO_Init+0x214>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b62      	ldr	r3, [pc, #392]	; (8001598 <MX_GPIO_Init+0x214>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a61      	ldr	r2, [pc, #388]	; (8001598 <MX_GPIO_Init+0x214>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <MX_GPIO_Init+0x214>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <MX_GPIO_Init+0x214>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a5a      	ldr	r2, [pc, #360]	; (8001598 <MX_GPIO_Init+0x214>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b58      	ldr	r3, [pc, #352]	; (8001598 <MX_GPIO_Init+0x214>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b54      	ldr	r3, [pc, #336]	; (8001598 <MX_GPIO_Init+0x214>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a53      	ldr	r2, [pc, #332]	; (8001598 <MX_GPIO_Init+0x214>)
 800144c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <MX_GPIO_Init+0x214>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f244 0181 	movw	r1, #16513	; 0x4081
 8001464:	484d      	ldr	r0, [pc, #308]	; (800159c <MX_GPIO_Init+0x218>)
 8001466:	f001 fb37 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2140      	movs	r1, #64	; 0x40
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <MX_GPIO_Init+0x21c>)
 8001470:	f001 fb32 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <MX_GPIO_Init+0x220>)
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4847      	ldr	r0, [pc, #284]	; (80015a8 <MX_GPIO_Init+0x224>)
 800148a:	f001 f97b 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800148e:	2332      	movs	r3, #50	; 0x32
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149e:	230b      	movs	r3, #11
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	483f      	ldr	r0, [pc, #252]	; (80015a8 <MX_GPIO_Init+0x224>)
 80014aa:	f001 f96b 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014ae:	2386      	movs	r3, #134	; 0x86
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014be:	230b      	movs	r3, #11
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4838      	ldr	r0, [pc, #224]	; (80015ac <MX_GPIO_Init+0x228>)
 80014ca:	f001 f95b 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_GPIO_Init+0x218>)
 80014e8:	f001 f94c 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximiter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximiter_Int_Pin;
 80014ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f2:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <MX_GPIO_Init+0x22c>)
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Pulse_Oximiter_Int_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	482c      	ldr	r0, [pc, #176]	; (80015b4 <MX_GPIO_Init+0x230>)
 8001502:	f001 f93f 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001518:	230b      	movs	r3, #11
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	481e      	ldr	r0, [pc, #120]	; (800159c <MX_GPIO_Init+0x218>)
 8001524:	f001 f92e 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001528:	2340      	movs	r3, #64	; 0x40
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <MX_GPIO_Init+0x21c>)
 8001540:	f001 f920 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4812      	ldr	r0, [pc, #72]	; (80015a0 <MX_GPIO_Init+0x21c>)
 8001558:	f001 f914 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800155c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800156e:	230b      	movs	r3, #11
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_GPIO_Init+0x21c>)
 800157a:	f001 f903 	bl	8002784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2028      	movs	r0, #40	; 0x28
 8001584:	f001 f8c7 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001588:	2028      	movs	r0, #40	; 0x28
 800158a:	f001 f8e0 	bl	800274e <HAL_NVIC_EnableIRQ>

}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40021800 	.word	0x40021800
 80015a4:	10110000 	.word	0x10110000
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	10210000 	.word	0x10210000
 80015b4:	40021400 	.word	0x40021400

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015be:	e7fe      	b.n	80015be <Error_Handler+0x6>

080015c0 <I2C_Init>:
* @brief I2C1 Initialization Function
* @param None
* @retval None
*/
void I2C_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <I2C_Init+0x50>)
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <I2C_Init+0x54>)
 80015c8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <I2C_Init+0x50>)
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <I2C_Init+0x58>)
 80015ce:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <I2C_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <I2C_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <I2C_Init+0x50>)
 80015de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e2:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <I2C_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <I2C_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <I2C_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <I2C_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]

	// Call the HAL error handler on error
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <I2C_Init+0x50>)
 80015fe:	f001 faa9 	bl	8002b54 <HAL_I2C_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <I2C_Init+0x4c>
	{
		errorHandler();
 8001608:	f000 fea0 	bl	800234c <errorHandler>
	}
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000660 	.word	0x20000660
 8001614:	40005800 	.word	0x40005800
 8001618:	000186a0 	.word	0x000186a0

0800161c <pulseOximiter_readRegister>:

int8_t pulseOximiter_readRegister(uint8_t reg, uint8_t* value)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af02      	add	r7, sp, #8
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];

	buf[0] = reg;
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x03;
 800162c:	2303      	movs	r3, #3
 800162e:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 8001630:	23ae      	movs	r3, #174	; 0xae
 8001632:	73fb      	strb	r3, [r7, #15]

	retStatus = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	b299      	uxth	r1, r3
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <pulseOximiter_readRegister+0x78>)
 8001646:	f001 fbbd 	bl	8002dc4 <HAL_I2C_Master_Transmit>
 800164a:	4603      	mov	r3, r0
 800164c:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <pulseOximiter_readRegister+0x3e>
		return -1;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	e018      	b.n	800168c <pulseOximiter_readRegister+0x70>
	}

	address = (I2C_SLAVE_ID | I2C_READ);
 800165a:	23af      	movs	r3, #175	; 0xaf
 800165c:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Receive(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	b299      	uxth	r1, r3
 8001662:	f107 020c 	add.w	r2, r7, #12
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	4809      	ldr	r0, [pc, #36]	; (8001694 <pulseOximiter_readRegister+0x78>)
 8001670:	f001 fca6 	bl	8002fc0 <HAL_I2C_Master_Receive>
 8001674:	4603      	mov	r3, r0
 8001676:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <pulseOximiter_readRegister+0x68>
		return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e003      	b.n	800168c <pulseOximiter_readRegister+0x70>
	}

	*value = buf[0];
 8001684:	7b3a      	ldrb	r2, [r7, #12]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	701a      	strb	r2, [r3, #0]

	return 0;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000660 	.word	0x20000660

08001698 <pulseOximiter_writeRegister>:

HAL_StatusTypeDef pulseOximiter_writeRegister(uint8_t reg, uint8_t value)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af02      	add	r7, sp, #8
 800169e:	4603      	mov	r3, r0
 80016a0:	460a      	mov	r2, r1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];
	buf[0] = reg;
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 80016b0:	23ae      	movs	r3, #174	; 0xae
 80016b2:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 2, HAL_MAX_DELAY);
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	b299      	uxth	r1, r3
 80016b8:	f107 020c 	add.w	r2, r7, #12
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2302      	movs	r3, #2
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <pulseOximiter_writeRegister+0x40>)
 80016c6:	f001 fb7d 	bl	8002dc4 <HAL_I2C_Master_Transmit>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73bb      	strb	r3, [r7, #14]

	return retStatus;
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000660 	.word	0x20000660

080016dc <pulseOximiter_setMeasurementMode>:


void pulseOximiter_setMeasurementMode(MEASUREMENT_MODE mode)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximiter_readRegister(MODE_CONFIG, &readResult);
 80016ea:	f107 030e 	add.w	r3, r7, #14
 80016ee:	4619      	mov	r1, r3
 80016f0:	2009      	movs	r0, #9
 80016f2:	f7ff ff93 	bl	800161c <pulseOximiter_readRegister>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001702:	d02a      	beq.n	800175a <pulseOximiter_setMeasurementMode+0x7e>
		return;
	}

	readResult &= ~(0x7 << 0);
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	f023 0307 	bic.w	r3, r3, #7
 800170a:	b2db      	uxtb	r3, r3
 800170c:	73bb      	strb	r3, [r7, #14]

	switch(mode){
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d00a      	beq.n	800172a <pulseOximiter_setMeasurementMode+0x4e>
 8001714:	2b02      	cmp	r3, #2
 8001716:	d00e      	beq.n	8001736 <pulseOximiter_setMeasurementMode+0x5a>
 8001718:	2b00      	cmp	r3, #0
 800171a:	d000      	beq.n	800171e <pulseOximiter_setMeasurementMode+0x42>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
	case SPO2:	readResult = readResult | (0x03 << 0); break;
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
	default: return; break;
 800171c:	e020      	b.n	8001760 <pulseOximiter_setMeasurementMode+0x84>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	73bb      	strb	r3, [r7, #14]
 8001728:	e00b      	b.n	8001742 <pulseOximiter_setMeasurementMode+0x66>
	case SPO2:	readResult = readResult | (0x03 << 0); break;
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	f043 0303 	orr.w	r3, r3, #3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	73bb      	strb	r3, [r7, #14]
 8001734:	e005      	b.n	8001742 <pulseOximiter_setMeasurementMode+0x66>
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	f043 0307 	orr.w	r3, r3, #7
 800173c:	b2db      	uxtb	r3, r3
 800173e:	73bb      	strb	r3, [r7, #14]
 8001740:	bf00      	nop
	}

	if( pulseOximiter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	4619      	mov	r1, r3
 8001746:	2009      	movs	r0, #9
 8001748:	f7ff ffa6 	bl	8001698 <pulseOximiter_writeRegister>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d105      	bne.n	800175e <pulseOximiter_setMeasurementMode+0x82>
		return;
	}
	else{
		measurementMode = mode;
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <pulseOximiter_setMeasurementMode+0x8c>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	7013      	strb	r3, [r2, #0]
 8001758:	e002      	b.n	8001760 <pulseOximiter_setMeasurementMode+0x84>
		return;
 800175a:	bf00      	nop
 800175c:	e000      	b.n	8001760 <pulseOximiter_setMeasurementMode+0x84>
		return;
 800175e:	bf00      	nop
	}
}
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000

0800176c <pulseOximiter_resetRegisters>:
		default: return NORMAL; break;
	}
}

void pulseOximiter_resetRegisters(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	int8_t readStatus;
	uint8_t readResult;


	readStatus = pulseOximiter_readRegister(MODE_CONFIG, &readResult);
 8001772:	1dbb      	adds	r3, r7, #6
 8001774:	4619      	mov	r1, r3
 8001776:	2009      	movs	r0, #9
 8001778:	f7ff ff50 	bl	800161c <pulseOximiter_readRegister>
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
	if( readStatus == -1){
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d011      	beq.n	80017ae <pulseOximiter_resetRegisters+0x42>
		return;
	}

	readResult &= ~(0x01 << 6);
 800178a:	79bb      	ldrb	r3, [r7, #6]
 800178c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001790:	b2db      	uxtb	r3, r3
 8001792:	71bb      	strb	r3, [r7, #6]
	readResult = readResult | (0x01 << 6);
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179a:	b2db      	uxtb	r3, r3
 800179c:	71bb      	strb	r3, [r7, #6]
	if( pulseOximiter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	4619      	mov	r1, r3
 80017a2:	2009      	movs	r0, #9
 80017a4:	f7ff ff78 	bl	8001698 <pulseOximiter_writeRegister>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	e000      	b.n	80017b0 <pulseOximiter_resetRegisters+0x44>
		return;
 80017ae:	bf00      	nop
		return;
	}
}
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <pulseOximiter_setLedCurrent>:

void pulseOximiter_setLedCurrent(uint8_t led, float currentLevel)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	ed87 0a00 	vstr	s0, [r7]
 80017c4:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73bb      	strb	r3, [r7, #14]
	uint8_t ledRegister = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]

	switch(led){
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d002      	beq.n	80017da <pulseOximiter_setLedCurrent+0x22>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d003      	beq.n	80017e0 <pulseOximiter_setLedCurrent+0x28>
 80017d8:	e005      	b.n	80017e6 <pulseOximiter_setLedCurrent+0x2e>
	case RED_LED: ledRegister = LED_PULSE_AMP_1; break;
 80017da:	230c      	movs	r3, #12
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e002      	b.n	80017e6 <pulseOximiter_setLedCurrent+0x2e>
	case IR_LED:	ledRegister = LED_PULSE_AMP_2; break;
 80017e0:	230d      	movs	r3, #13
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	bf00      	nop
	}

	// slope derived from MAX30102 DataSheet
	value = (uint8_t)(5.0 * currentLevel);
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f7fe fe66 	bl	80004b8 <__aeabi_f2d>
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <pulseOximiter_setLedCurrent+0x64>)
 80017f2:	f7fe feb9 	bl	8000568 <__aeabi_dmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	4618      	mov	r0, r3
 80017fc:	4621      	mov	r1, r4
 80017fe:	f7ff f963 	bl	8000ac8 <__aeabi_d2uiz>
 8001802:	4603      	mov	r3, r0
 8001804:	73bb      	strb	r3, [r7, #14]

	if( pulseOximiter_writeRegister(ledRegister, value) != HAL_OK){
 8001806:	7bba      	ldrb	r2, [r7, #14]
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff43 	bl	8001698 <pulseOximiter_writeRegister>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
		return;
	}
	else{

	}
}
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	40140000 	.word	0x40140000

08001820 <pulseOximiter_setSampleRate>:

	return currentLevel;
}

void pulseOximiter_setSampleRate(uint8_t sampleRate)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximiter_readRegister(SPO2_CONFIG, &readResult);
 800182e:	f107 030e 	add.w	r3, r7, #14
 8001832:	4619      	mov	r1, r3
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff fef1 	bl	800161c <pulseOximiter_readRegister>
 800183a:	4603      	mov	r3, r0
 800183c:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001846:	d015      	beq.n	8001874 <pulseOximiter_setSampleRate+0x54>
		return;
	}

	readResult &= ~(0x1C << 0);
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	f023 031c 	bic.w	r3, r3, #28
 800184e:	b2db      	uxtb	r3, r3
 8001850:	73bb      	strb	r3, [r7, #14]

	readResult = readResult | (sampleRate << 2);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	b25a      	sxtb	r2, r3
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	b25b      	sxtb	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b25b      	sxtb	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	73bb      	strb	r3, [r7, #14]

	if( pulseOximiter_writeRegister(SPO2_CONFIG, readResult) != HAL_OK){
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	4619      	mov	r1, r3
 8001868:	200a      	movs	r0, #10
 800186a:	f7ff ff15 	bl	8001698 <pulseOximiter_writeRegister>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	e000      	b.n	8001876 <pulseOximiter_setSampleRate+0x56>
		return;
 8001874:	bf00      	nop
		return;
	}
	else{

	}
}
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <pulseOximiter_setPulseWidth>:

	return (SAMPLE_RATE)result;
}

void pulseOximiter_setPulseWidth(uint8_t pulseWidth)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximiter_readRegister(SPO2_CONFIG, &readResult);
 800188a:	f107 030e 	add.w	r3, r7, #14
 800188e:	4619      	mov	r1, r3
 8001890:	200a      	movs	r0, #10
 8001892:	f7ff fec3 	bl	800161c <pulseOximiter_readRegister>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a2:	d032      	beq.n	800190a <pulseOximiter_setPulseWidth+0x8e>
		return;
	}

	readResult &= ~(0x03 << 0);
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	73bb      	strb	r3, [r7, #14]

	switch(pulseWidth)
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d822      	bhi.n	80018fa <pulseOximiter_setPulseWidth+0x7e>
 80018b4:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <pulseOximiter_setPulseWidth+0x40>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018d1 	.word	0x080018d1
 80018c0:	080018d7 	.word	0x080018d7
 80018c4:	080018e3 	.word	0x080018e3
 80018c8:	080018ef 	.word	0x080018ef
 80018cc:	080018fb 	.word	0x080018fb
	{
	case _69_US: readResult = readResult | 0; break;
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	73bb      	strb	r3, [r7, #14]
 80018d4:	e011      	b.n	80018fa <pulseOximiter_setPulseWidth+0x7e>
	case _118_US: readResult = readResult | (0x01 << 0); break;
 80018d6:	7bbb      	ldrb	r3, [r7, #14]
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	73bb      	strb	r3, [r7, #14]
 80018e0:	e00b      	b.n	80018fa <pulseOximiter_setPulseWidth+0x7e>
	case _215_US: readResult = readResult | (0x02 << 0); break;
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	73bb      	strb	r3, [r7, #14]
 80018ec:	e005      	b.n	80018fa <pulseOximiter_setPulseWidth+0x7e>
	case _411_US: readResult = readResult | (0x03 << 0); break;
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	f043 0303 	orr.w	r3, r3, #3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	73bb      	strb	r3, [r7, #14]
 80018f8:	bf00      	nop
	case _PULSE_WIDTH_FAIL: break;
	}

	if( pulseOximiter_writeRegister(SPO2_CONFIG, readResult) != HAL_OK){
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	4619      	mov	r1, r3
 80018fe:	200a      	movs	r0, #10
 8001900:	f7ff feca 	bl	8001698 <pulseOximiter_writeRegister>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	e000      	b.n	800190c <pulseOximiter_setPulseWidth+0x90>
		return;
 800190a:	bf00      	nop
		return;
	}
	else{

	}
}
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop

08001914 <pulseOximiter_resetFifo>:
		return (PULSE_WIDTH)result;
}

// Write zero to all FIFO registers
void pulseOximiter_resetFifo(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	pulseOximiter_writeRegister(FIFO_WRITE_PTR, 0);
 8001918:	2100      	movs	r1, #0
 800191a:	2004      	movs	r0, #4
 800191c:	f7ff febc 	bl	8001698 <pulseOximiter_writeRegister>
	pulseOximiter_writeRegister(FIFO_READ_POINTER, 0);
 8001920:	2100      	movs	r1, #0
 8001922:	2006      	movs	r0, #6
 8001924:	f7ff feb8 	bl	8001698 <pulseOximiter_writeRegister>
	pulseOximiter_writeRegister(FIFO_OVF_COUNTER, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	2005      	movs	r0, #5
 800192c:	f7ff feb4 	bl	8001698 <pulseOximiter_writeRegister>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <pulseOximiter_initFifo>:

//
void pulseOximiter_initFifo(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

	pulseOximiter_writeRegister(FIFO_CONFIG, 0x0F);
 8001938:	210f      	movs	r1, #15
 800193a:	2008      	movs	r0, #8
 800193c:	f7ff feac 	bl	8001698 <pulseOximiter_writeRegister>
	//pulseOximiter_writeRegister(INT_ENABLE_1, 0x00);
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <pulseOximiter_readFifo>:

FIFO_LED_DATA pulseOximiter_readFifo(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af02      	add	r7, sp, #8
	uint8_t address;uint8_t buf[12];
	uint8_t numBytes = 6;
 800194a:	2306      	movs	r3, #6
 800194c:	75fb      	strb	r3, [r7, #23]

	buf[0] = FIFO_DATA;
 800194e:	2307      	movs	r3, #7
 8001950:	713b      	strb	r3, [r7, #4]

	address = (I2C_SLAVE_ID | I2C_WRITE);
 8001952:	23ae      	movs	r3, #174	; 0xae
 8001954:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8001956:	7dbb      	ldrb	r3, [r7, #22]
 8001958:	b299      	uxth	r1, r3
 800195a:	1d3a      	adds	r2, r7, #4
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	481c      	ldr	r0, [pc, #112]	; (80019d8 <pulseOximiter_readFifo+0x94>)
 8001966:	f001 fa2d 	bl	8002dc4 <HAL_I2C_Master_Transmit>

	address = (I2C_SLAVE_ID | I2C_READ);
 800196a:	23af      	movs	r3, #175	; 0xaf
 800196c:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Receive(&hi2c2, address, buf, numBytes, HAL_MAX_DELAY);
 800196e:	7dbb      	ldrb	r3, [r7, #22]
 8001970:	b299      	uxth	r1, r3
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	b298      	uxth	r0, r3
 8001976:	1d3a      	adds	r2, r7, #4
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4603      	mov	r3, r0
 8001980:	4815      	ldr	r0, [pc, #84]	; (80019d8 <pulseOximiter_readFifo+0x94>)
 8001982:	f001 fb1d 	bl	8002fc0 <HAL_I2C_Master_Receive>

	fifoData.irLedRaw = 0;
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <pulseOximiter_readFifo+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw = 0;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <pulseOximiter_readFifo+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	801a      	strh	r2, [r3, #0]

	fifoData.irLedRaw = (buf[4] << 8) | (buf[5] << 0);
 8001992:	7a3b      	ldrb	r3, [r7, #8]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	7a7b      	ldrb	r3, [r7, #9]
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21b      	sxth	r3, r3
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <pulseOximiter_readFifo+0x98>)
 80019a4:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw =(buf[1] << 8) | (buf[0] << 0);
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	793b      	ldrb	r3, [r7, #4]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <pulseOximiter_readFifo+0x98>)
 80019b8:	801a      	strh	r2, [r3, #0]

	return fifoData;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <pulseOximiter_readFifo+0x98>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	2300      	movs	r3, #0
 80019c2:	8a3a      	ldrh	r2, [r7, #16]
 80019c4:	f362 030f 	bfi	r3, r2, #0, #16
 80019c8:	8a7a      	ldrh	r2, [r7, #18]
 80019ca:	f362 431f 	bfi	r3, r2, #16, #16
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000660 	.word	0x20000660
 80019dc:	200000bc 	.word	0x200000bc

080019e0 <pulseOximiter_readTemperature>:
    }
}


float pulseOximiter_readTemperature(void)
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
	uint8_t tempDone = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	71fb      	strb	r3, [r7, #7]
	int8_t tempFraction;
	uint8_t tempInteger;
	float temperature;

	// Initiate a temperature conversion
	pulseOximiter_writeRegister(DIE_TEMP_CONFIG, 1);
 80019ea:	2101      	movs	r1, #1
 80019ec:	2021      	movs	r0, #33	; 0x21
 80019ee:	f7ff fe53 	bl	8001698 <pulseOximiter_writeRegister>

	// Wait for conversion finish
	while( tempDone != 0 )
 80019f2:	e004      	b.n	80019fe <pulseOximiter_readTemperature+0x1e>
	{
		pulseOximiter_readRegister(DIE_TEMP_CONFIG, &tempDone);
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	4619      	mov	r1, r3
 80019f8:	2021      	movs	r0, #33	; 0x21
 80019fa:	f7ff fe0f 	bl	800161c <pulseOximiter_readRegister>
	while( tempDone != 0 )
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f7      	bne.n	80019f4 <pulseOximiter_readTemperature+0x14>
	}

	// Read Die temperature integer register
	pulseOximiter_readRegister(DIE_TEMP_INTEGER, &readResult);
 8001a04:	1dbb      	adds	r3, r7, #6
 8001a06:	4619      	mov	r1, r3
 8001a08:	201f      	movs	r0, #31
 8001a0a:	f7ff fe07 	bl	800161c <pulseOximiter_readRegister>
	tempInteger = readResult;
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	73fb      	strb	r3, [r7, #15]

	// Read Die temperature fraction register
	pulseOximiter_readRegister(DIE_TEMP_FRACTION, &readResult);
 8001a12:	1dbb      	adds	r3, r7, #6
 8001a14:	4619      	mov	r1, r3
 8001a16:	2020      	movs	r0, #32
 8001a18:	f7ff fe00 	bl	800161c <pulseOximiter_readRegister>
	tempFraction = readResult;
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	73bb      	strb	r3, [r7, #14]

	// Conversion factor found in MAX30102 DataSheet
	temperature = tempInteger + (tempFraction*0.0625);
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd36 	bl	8000494 <__aeabi_i2d>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	460d      	mov	r5, r1
 8001a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd2f 	bl	8000494 <__aeabi_i2d>
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <pulseOximiter_readTemperature+0x8c>)
 8001a3c:	f7fe fd94 	bl	8000568 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4620      	mov	r0, r4
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7fe fbd8 	bl	80001fc <__adddf3>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	4618      	mov	r0, r3
 8001a52:	4621      	mov	r1, r4
 8001a54:	f7ff f858 	bl	8000b08 <__aeabi_d2f>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60bb      	str	r3, [r7, #8]

	return temperature;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	ee07 3a90 	vmov	s15, r3
}
 8001a62:	eeb0 0a67 	vmov.f32	s0, s15
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6c:	3fb00000 	.word	0x3fb00000

08001a70 <pulseOximiter_update>:

MAX30102 pulseOximiter_update(FIFO_LED_DATA m_fifoData)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	MAX30102 result = {
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2228      	movs	r2, #40	; 0x28
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fc94 	bl	80053b0 <memset>
 8001a88:	4b97      	ldr	r3, [pc, #604]	; (8001ce8 <pulseOximiter_update+0x278>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61fb      	str	r3, [r7, #28]
	/*uint32_t lastBeatThreshold*/ 0,
	/*float dcFilteredIR*/ 0.0,
	/*float dcFilteredRed*/ 0.0
  };

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a98:	4b94      	ldr	r3, [pc, #592]	; (8001cec <pulseOximiter_update+0x27c>)
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8001cf0 <pulseOximiter_update+0x280>
 8001aa2:	eef0 0a47 	vmov.f32	s1, s14
 8001aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aaa:	f7ff f9fd 	bl	8000ea8 <dcRemoval>
 8001aae:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab2:	eef0 7a60 	vmov.f32	s15, s1
 8001ab6:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <pulseOximiter_update+0x27c>)
 8001ab8:	ed83 7a00 	vstr	s14, [r3]
 8001abc:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8001ac0:	883b      	ldrh	r3, [r7, #0]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aca:	4b8a      	ldr	r3, [pc, #552]	; (8001cf4 <pulseOximiter_update+0x284>)
 8001acc:	ed93 7a00 	vldr	s14, [r3]
 8001ad0:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8001cf0 <pulseOximiter_update+0x280>
 8001ad4:	eef0 0a47 	vmov.f32	s1, s14
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f7ff f9e4 	bl	8000ea8 <dcRemoval>
 8001ae0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae4:	eef0 7a60 	vmov.f32	s15, s1
 8001ae8:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <pulseOximiter_update+0x284>)
 8001aea:	ed83 7a00 	vstr	s14, [r3]
 8001aee:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001af2:	4b7e      	ldr	r3, [pc, #504]	; (8001cec <pulseOximiter_update+0x27c>)
 8001af4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001af8:	487f      	ldr	r0, [pc, #508]	; (8001cf8 <pulseOximiter_update+0x288>)
 8001afa:	eeb0 0a67 	vmov.f32	s0, s15
 8001afe:	f7ff fa4f 	bl	8000fa0 <meanDiff>
 8001b02:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001b06:	487d      	ldr	r0, [pc, #500]	; (8001cfc <pulseOximiter_update+0x28c>)
 8001b08:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001b0c:	f7ff fa00 	bl	8000f10 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001b10:	4b76      	ldr	r3, [pc, #472]	; (8001cec <pulseOximiter_update+0x27c>)
 8001b12:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b16:	4b75      	ldr	r3, [pc, #468]	; (8001cec <pulseOximiter_update+0x27c>)
 8001b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b20:	4b77      	ldr	r3, [pc, #476]	; (8001d00 <pulseOximiter_update+0x290>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2a:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <pulseOximiter_update+0x290>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8001b30:	4b70      	ldr	r3, [pc, #448]	; (8001cf4 <pulseOximiter_update+0x284>)
 8001b32:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <pulseOximiter_update+0x284>)
 8001b38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b40:	4b70      	ldr	r3, [pc, #448]	; (8001d04 <pulseOximiter_update+0x294>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <pulseOximiter_update+0x294>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 8001b50:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <pulseOximiter_update+0x298>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <pulseOximiter_update+0x298>)
 8001b5a:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 8001b5c:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <pulseOximiter_update+0x28c>)
 8001b5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	f000 f8db 	bl	8001d20 <detectPulse>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 808a 	beq.w	8001c86 <pulseOximiter_update+0x216>
 8001b72:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <pulseOximiter_update+0x298>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8085 	beq.w	8001c86 <pulseOximiter_update+0x216>
	{
		result.pulseDetected=true;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	723b      	strb	r3, [r7, #8]
		pulsesDetected++;
 8001b80:	4b62      	ldr	r3, [pc, #392]	; (8001d0c <pulseOximiter_update+0x29c>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b60      	ldr	r3, [pc, #384]	; (8001d0c <pulseOximiter_update+0x29c>)
 8001b8a:	801a      	strh	r2, [r3, #0]

		float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8001b8c:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <pulseOximiter_update+0x294>)
 8001b8e:	ed93 7a00 	vldr	s14, [r3]
 8001b92:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <pulseOximiter_update+0x298>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ba2:	ee16 0a90 	vmov	r0, s13
 8001ba6:	f7fe fc87 	bl	80004b8 <__aeabi_f2d>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	ec44 3b10 	vmov	d0, r3, r4
 8001bb2:	f003 fc85 	bl	80054c0 <sqrt>
 8001bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bba:	eef0 7a60 	vmov.f32	s15, s1
 8001bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc2:	eef0 0a67 	vmov.f32	s1, s15
 8001bc6:	f003 fbfb 	bl	80053c0 <log>
 8001bca:	ec55 4b10 	vmov	r4, r5, d0
 8001bce:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <pulseOximiter_update+0x290>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <pulseOximiter_update+0x298>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001be4:	ee16 0a90 	vmov	r0, s13
 8001be8:	f7fe fc66 	bl	80004b8 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	ec43 2b10 	vmov	d0, r2, r3
 8001bf4:	f003 fc64 	bl	80054c0 <sqrt>
 8001bf8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bfc:	eef0 7a60 	vmov.f32	s15, s1
 8001c00:	eeb0 0a47 	vmov.f32	s0, s14
 8001c04:	eef0 0a67 	vmov.f32	s1, s15
 8001c08:	f003 fbda 	bl	80053c0 <log>
 8001c0c:	ec53 2b10 	vmov	r2, r3, d0
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fdd2 	bl	80007bc <__aeabi_ddiv>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4621      	mov	r1, r4
 8001c20:	f7fe ff72 	bl	8000b08 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
		currentSpO2Value = 110.0 - 18.0 * ratioRMS;
 8001c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c2a:	f7fe fc45 	bl	80004b8 <__aeabi_f2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <pulseOximiter_update+0x2a0>)
 8001c34:	f7fe fc98 	bl	8000568 <__aeabi_dmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	4933      	ldr	r1, [pc, #204]	; (8001d14 <pulseOximiter_update+0x2a4>)
 8001c46:	f7fe fad7 	bl	80001f8 <__aeabi_dsub>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f7fe ff59 	bl	8000b08 <__aeabi_d2f>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <pulseOximiter_update+0x278>)
 8001c5a:	601a      	str	r2, [r3, #0]
		result.SpO2 = currentSpO2Value;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <pulseOximiter_update+0x278>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61fb      	str	r3, [r7, #28]

		if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <pulseOximiter_update+0x29c>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10a      	bne.n	8001c86 <pulseOximiter_update+0x216>
		{
			irACValueSqSum = 0;
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <pulseOximiter_update+0x290>)
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <pulseOximiter_update+0x294>)
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <pulseOximiter_update+0x298>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <pulseOximiter_update+0x284>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <pulseOximiter_update+0x27c>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	eef0 0a47 	vmov.f32	s1, s14
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	f000 f949 	bl	8001f30 <balanceIntesities>


	result.heartBPM = currentBPM;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <pulseOximiter_update+0x2a8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]
	result.irCardiogram = lpbFilterIR.result;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <pulseOximiter_update+0x28c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
	result.irDcValue = dcFilterIR.w;
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <pulseOximiter_update+0x27c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	617b      	str	r3, [r7, #20]
	result.redDcValue = dcFilterRed.w;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <pulseOximiter_update+0x284>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
	result.lastBeatThreshold = lastBeatThreshold;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <pulseOximiter_update+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <pulseOximiter_update+0x27c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
	result.dcFilteredRed = dcFilterRed.result;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <pulseOximiter_update+0x284>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28

	return result;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	461d      	mov	r5, r3
 8001ccc:	f107 0408 	add.w	r4, r7, #8
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	3738      	adds	r7, #56	; 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce8:	20000164 	.word	0x20000164
 8001cec:	200000c0 	.word	0x200000c0
 8001cf0:	3f733333 	.word	0x3f733333
 8001cf4:	200000c8 	.word	0x200000c8
 8001cf8:	200000d0 	.word	0x200000d0
 8001cfc:	20000118 	.word	0x20000118
 8001d00:	20000158 	.word	0x20000158
 8001d04:	2000015c 	.word	0x2000015c
 8001d08:	20000160 	.word	0x20000160
 8001d0c:	20000162 	.word	0x20000162
 8001d10:	40320000 	.word	0x40320000
 8001d14:	405b8000 	.word	0x405b8000
 8001d18:	200006b4 	.word	0x200006b4
 8001d1c:	20000154 	.word	0x20000154

08001d20 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001ef4 <detectPulse+0x1d4>
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	dd14      	ble.n	8001d66 <detectPulse+0x46>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001d3c:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <detectPulse+0x1d8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001d42:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <detectPulse+0x1dc>)
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <detectPulse+0x1e0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 8001d50:	4b6c      	ldr	r3, [pc, #432]	; (8001f04 <detectPulse+0x1e4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001d56:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <detectPulse+0x1e8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <detectPulse+0x1ec>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e0c2      	b.n	8001eec <detectPulse+0x1cc>
  }

  switch(currentPulseDetectorState)
 8001d66:	4b64      	ldr	r3, [pc, #400]	; (8001ef8 <detectPulse+0x1d8>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d016      	beq.n	8001d9c <detectPulse+0x7c>
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	f000 809a 	beq.w	8001ea8 <detectPulse+0x188>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 80b5 	bne.w	8001ee4 <detectPulse+0x1c4>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d7e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001f10 <detectPulse+0x1f0>
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	da00      	bge.n	8001d8e <detectPulse+0x6e>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001d8c:	e0aa      	b.n	8001ee4 <detectPulse+0x1c4>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <detectPulse+0x1d8>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001d94:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <detectPulse+0x1e8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
      break;
 8001d9a:	e0a3      	b.n	8001ee4 <detectPulse+0x1c4>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <detectPulse+0x1dc>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dd0d      	ble.n	8001dcc <detectPulse+0xac>
      {
        currentBeat = millis();
 8001db0:	f000 fad0 	bl	8002354 <millis>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <detectPulse+0x1e4>)
 8001db8:	601a      	str	r2, [r3, #0]
        lastBeatThreshold = sensor_value;
 8001dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc2:	ee17 2a90 	vmov	r2, s15
 8001dc6:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <detectPulse+0x1ec>)
 8001dc8:	601a      	str	r2, [r3, #0]

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 8001dca:	e08b      	b.n	8001ee4 <detectPulse+0x1c4>
    	uint32_t beatDuration = currentBeat - lastBeat;
 8001dcc:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <detectPulse+0x1e4>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <detectPulse+0x1e0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
        lastBeat = currentBeat;
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <detectPulse+0x1e4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <detectPulse+0x1e0>)
 8001dde:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <detectPulse+0xe2>
          rawBPM = 60000.0 / (float)beatDuration;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001df6:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001f14 <detectPulse+0x1f4>
 8001dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfe:	edc7 7a05 	vstr	s15, [r7, #20]
        valuesBPM[bpmIndex] = rawBPM;
 8001e02:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <detectPulse+0x1f8>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4a45      	ldr	r2, [pc, #276]	; (8001f1c <detectPulse+0x1fc>)
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]
        valuesBPMSum = 0;
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <detectPulse+0x200>)
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e010      	b.n	8001e40 <detectPulse+0x120>
          valuesBPMSum += valuesBPM[i];
 8001e1e:	4a3f      	ldr	r2, [pc, #252]	; (8001f1c <detectPulse+0x1fc>)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	ed93 7a00 	vldr	s14, [r3]
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <detectPulse+0x200>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <detectPulse+0x200>)
 8001e36:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b09      	cmp	r3, #9
 8001e44:	ddeb      	ble.n	8001e1e <detectPulse+0xfe>
        bpmIndex++;
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <detectPulse+0x1f8>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <detectPulse+0x1f8>)
 8001e50:	701a      	strb	r2, [r3, #0]
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <detectPulse+0x1f8>)
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <detectPulse+0x204>)
 8001e58:	fba3 1302 	umull	r1, r3, r3, r2
 8001e5c:	08d9      	lsrs	r1, r3, #3
 8001e5e:	460b      	mov	r3, r1
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <detectPulse+0x1f8>)
 8001e6c:	701a      	strb	r2, [r3, #0]
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <detectPulse+0x208>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	d805      	bhi.n	8001e82 <detectPulse+0x162>
          valuesBPMCount++;
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <detectPulse+0x208>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <detectPulse+0x208>)
 8001e80:	701a      	strb	r2, [r3, #0]
        currentBPM = valuesBPMSum / valuesBPMCount;
 8001e82:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <detectPulse+0x200>)
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <detectPulse+0x208>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <detectPulse+0x20c>)
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <detectPulse+0x1d8>)
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	701a      	strb	r2, [r3, #0]
        return true;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e021      	b.n	8001eec <detectPulse+0x1cc>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <detectPulse+0x1dc>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	d505      	bpl.n	8001ec8 <detectPulse+0x1a8>
      {
        values_went_down++;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <detectPulse+0x1e8>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <detectPulse+0x1e8>)
 8001ec6:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ecc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001f10 <detectPulse+0x1f0>
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d400      	bmi.n	8001edc <detectPulse+0x1bc>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001eda:	e002      	b.n	8001ee2 <detectPulse+0x1c2>
        currentPulseDetectorState = PULSE_IDLE;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <detectPulse+0x1d8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
      break;
 8001ee2:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <detectPulse+0x1dc>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  return false;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	44fa0000 	.word	0x44fa0000
 8001ef8:	20000170 	.word	0x20000170
 8001efc:	20000174 	.word	0x20000174
 8001f00:	20000178 	.word	0x20000178
 8001f04:	2000017c 	.word	0x2000017c
 8001f08:	20000180 	.word	0x20000180
 8001f0c:	20000154 	.word	0x20000154
 8001f10:	42c80000 	.word	0x42c80000
 8001f14:	476a6000 	.word	0x476a6000
 8001f18:	20000151 	.word	0x20000151
 8001f1c:	20000124 	.word	0x20000124
 8001f20:	2000014c 	.word	0x2000014c
 8001f24:	cccccccd 	.word	0xcccccccd
 8001f28:	20000150 	.word	0x20000150
 8001f2c:	200006b4 	.word	0x200006b4

08001f30 <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f3a:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001f3e:	f000 fa09 	bl	8002354 <millis>
 8001f42:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f4e:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <balanceIntesities+0x108>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800203c <balanceIntesities+0x10c>
 8001f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	da00      	bge.n	8001f68 <balanceIntesities+0x38>
      pulseOximiter_setLedCurrent(IR_LED, IrLedCurrent);
    }

    lastREDLedCurrentCheck = millis();
  }
}
 8001f66:	e063      	b.n	8002030 <balanceIntesities+0x100>
	  if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 8001f68:	ed97 7a00 	vldr	s14, [r7]
 8001f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f74:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002040 <balanceIntesities+0x110>
 8001f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	dd20      	ble.n	8001fc4 <balanceIntesities+0x94>
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <balanceIntesities+0x114>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b0e      	cmp	r3, #14
 8001f88:	d81c      	bhi.n	8001fc4 <balanceIntesities+0x94>
      redLEDCurrent++;
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <balanceIntesities+0x114>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <balanceIntesities+0x114>)
 8001f94:	701a      	strb	r2, [r3, #0]
      pulseOximiter_setLedCurrent(RED_LED, redLEDCurrent);
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <balanceIntesities+0x114>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff fc06 	bl	80017b8 <pulseOximiter_setLedCurrent>
	  pulseOximiter_setLedCurrent(IR_LED, IrLedCurrent);
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <balanceIntesities+0x118>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	f7ff fbfb 	bl	80017b8 <pulseOximiter_setLedCurrent>
 8001fc2:	e02c      	b.n	800201e <balanceIntesities+0xee>
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001fc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fc8:	edd7 7a00 	vldr	s15, [r7]
 8001fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002040 <balanceIntesities+0x110>
 8001fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	dd1f      	ble.n	800201e <balanceIntesities+0xee>
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <balanceIntesities+0x114>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01b      	beq.n	800201e <balanceIntesities+0xee>
      redLEDCurrent--;pulseOximiter_setLedCurrent(RED_LED, redLEDCurrent);
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <balanceIntesities+0x114>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <balanceIntesities+0x114>)
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <balanceIntesities+0x114>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff fbd8 	bl	80017b8 <pulseOximiter_setLedCurrent>
      pulseOximiter_setLedCurrent(IR_LED, IrLedCurrent);
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <balanceIntesities+0x118>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002014:	eeb0 0a67 	vmov.f32	s0, s15
 8002018:	2002      	movs	r0, #2
 800201a:	f7ff fbcd 	bl	80017b8 <pulseOximiter_setLedCurrent>
    lastREDLedCurrentCheck = millis();
 800201e:	f000 f999 	bl	8002354 <millis>
 8002022:	ee07 0a90 	vmov	s15, r0
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	4b03      	ldr	r3, [pc, #12]	; (8002038 <balanceIntesities+0x108>)
 800202c:	edc3 7a00 	vstr	s15, [r3]
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	2000016c 	.word	0x2000016c
 800203c:	43fa0000 	.word	0x43fa0000
 8002040:	477de800 	.word	0x477de800
 8002044:	20000168 	.word	0x20000168
 8002048:	200006b8 	.word	0x200006b8

0800204c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_MspInit+0x4c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_MspInit+0x4c>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_MspInit+0x4c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_MspInit+0x4c>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <HAL_MspInit+0x4c>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_I2C_MspInit+0x84>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d12c      	bne.n	8002118 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_I2C_MspInit+0x88>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a17      	ldr	r2, [pc, #92]	; (8002124 <HAL_I2C_MspInit+0x88>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_I2C_MspInit+0x88>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e0:	2312      	movs	r3, #18
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ec:	2304      	movs	r3, #4
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <HAL_I2C_MspInit+0x8c>)
 80020f8:	f000 fb44 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_I2C_MspInit+0x88>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_I2C_MspInit+0x88>)
 8002106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_I2C_MspInit+0x88>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002118:	bf00      	nop
 800211a:	3728      	adds	r7, #40	; 0x28
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40005400 	.word	0x40005400
 8002124:	40023800 	.word	0x40023800
 8002128:	40020400 	.word	0x40020400

0800212c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a33      	ldr	r2, [pc, #204]	; (8002218 <HAL_UART_MspInit+0xec>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12d      	bne.n	80021aa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_UART_MspInit+0xf0>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_UART_MspInit+0xf0>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_UART_MspInit+0xf0>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_UART_MspInit+0xf0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_UART_MspInit+0xf0>)
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_UART_MspInit+0xf0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002198:	2307      	movs	r3, #7
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	481f      	ldr	r0, [pc, #124]	; (8002220 <HAL_UART_MspInit+0xf4>)
 80021a4:	f000 faee 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80021a8:	e031      	b.n	800220e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_UART_MspInit+0xf8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d12c      	bne.n	800220e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_UART_MspInit+0xf0>)
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_UART_MspInit+0xf0>)
 80021be:	f043 0320 	orr.w	r3, r3, #32
 80021c2:	6453      	str	r3, [r2, #68]	; 0x44
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_UART_MspInit+0xf0>)
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_UART_MspInit+0xf0>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4a10      	ldr	r2, [pc, #64]	; (800221c <HAL_UART_MspInit+0xf0>)
 80021da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021de:	6313      	str	r3, [r2, #48]	; 0x30
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_UART_MspInit+0xf0>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80021ec:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021fe:	2308      	movs	r3, #8
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	4807      	ldr	r0, [pc, #28]	; (8002228 <HAL_UART_MspInit+0xfc>)
 800220a:	f000 fabb 	bl	8002784 <HAL_GPIO_Init>
}
 800220e:	bf00      	nop
 8002210:	3730      	adds	r7, #48	; 0x30
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40004800 	.word	0x40004800
 800221c:	40023800 	.word	0x40023800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40011400 	.word	0x40011400
 8002228:	40021800 	.word	0x40021800

0800222c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224c:	d13f      	bne.n	80022ce <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800226a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800227c:	230a      	movs	r3, #10
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4815      	ldr	r0, [pc, #84]	; (80022dc <HAL_PCD_MspInit+0xb0>)
 8002288:	f000 fa7c 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800228c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	480e      	ldr	r0, [pc, #56]	; (80022dc <HAL_PCD_MspInit+0xb0>)
 80022a2:	f000 fa6f 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 80022ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b0:	6353      	str	r3, [r2, #52]	; 0x34
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_PCD_MspInit+0xac>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f000 f8d6 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002338:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800233c:	f000 fbe6 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002340:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002344:	f000 fbe2 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <errorHandler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void errorHandler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
 8002350:	b672      	cpsid	i
  __disable_irq();
  while (1)
 8002352:	e7fe      	b.n	8002352 <errorHandler+0x6>

08002354 <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002358:	f000 f8d4 	bl	8002504 <HAL_GetTick>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <SystemInit+0x28>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <SystemInit+0x28>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <SystemInit+0x28>)
 800237a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237e:	609a      	str	r2, [r3, #8]
#endif
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <uartInit>:
#include "stdint.h"

UART_HandleTypeDef stLinkUart;

void uartInit(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	// Change UART instance as needed according to board configuration
	stLinkUart.Instance = USART3;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <uartInit+0x4c>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <uartInit+0x50>)
 8002398:	601a      	str	r2, [r3, #0]
	stLinkUart.Init.BaudRate = 115200;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <uartInit+0x4c>)
 800239c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023a0:	605a      	str	r2, [r3, #4]
	stLinkUart.Init.WordLength = UART_WORDLENGTH_8B;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <uartInit+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
	stLinkUart.Init.StopBits = UART_STOPBITS_1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <uartInit+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
	stLinkUart.Init.Parity = UART_PARITY_NONE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <uartInit+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
	stLinkUart.Init.Mode = UART_MODE_TX_RX;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <uartInit+0x4c>)
 80023b6:	220c      	movs	r2, #12
 80023b8:	615a      	str	r2, [r3, #20]
	stLinkUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <uartInit+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
	stLinkUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <uartInit+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&stLinkUart) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <uartInit+0x4c>)
 80023c8:	f002 f948 	bl	800465c <HAL_UART_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <uartInit+0x46>
    {
    	errorHandler();
 80023d2:	f7ff ffbb 	bl	800234c <errorHandler>
    }
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200006bc 	.word	0x200006bc
 80023e0:	40004800 	.word	0x40004800

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023ea:	e003      	b.n	80023f4 <LoopCopyDataInit>

080023ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023f2:	3104      	adds	r1, #4

080023f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023fc:	d3f6      	bcc.n	80023ec <CopyDataInit>
  ldr  r2, =_sbss
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002400:	e002      	b.n	8002408 <LoopFillZerobss>

08002402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002404:	f842 3b04 	str.w	r3, [r2], #4

08002408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800240a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800240c:	d3f9      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800240e:	f7ff ffa9 	bl	8002364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f002 ffa9 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7fe fe35 	bl	8001084 <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800241c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002420:	08005a9c 	.word	0x08005a9c
  ldr  r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002428:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800242c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002430:	20000700 	.word	0x20000700

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f94d 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fdee 	bl	800204c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f965 	bl	800276a <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f000 f92d 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000004 	.word	0x20000004
 80024d4:	2000000c 	.word	0x2000000c
 80024d8:	20000008 	.word	0x20000008

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000000c 	.word	0x2000000c
 8002500:	200006fc 	.word	0x200006fc

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200006fc 	.word	0x200006fc

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_Delay+0x40>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2000000c 	.word	0x2000000c

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff29 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff3e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff31 	bl	80025c4 <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e177      	b.n	8002a90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f040 8166 	bne.w	8002a8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d00b      	beq.n	80027de <HAL_GPIO_Init+0x5a>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d007      	beq.n	80027de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027d2:	2b11      	cmp	r3, #17
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b12      	cmp	r3, #18
 80027dc:	d130      	bne.n	8002840 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002814:	2201      	movs	r2, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 0201 	and.w	r2, r3, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0xfc>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b12      	cmp	r3, #18
 800287e:	d123      	bne.n	80028c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80c0 	beq.w	8002a8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_GPIO_Init+0x320>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a64      	ldr	r2, [pc, #400]	; (8002aa4 <HAL_GPIO_Init+0x320>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <HAL_GPIO_Init+0x320>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002926:	4a60      	ldr	r2, [pc, #384]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_GPIO_Init+0x328>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d037      	beq.n	80029c2 <HAL_GPIO_Init+0x23e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x32c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d031      	beq.n	80029be <HAL_GPIO_Init+0x23a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_GPIO_Init+0x330>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <HAL_GPIO_Init+0x236>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_GPIO_Init+0x334>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x232>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a53      	ldr	r2, [pc, #332]	; (8002abc <HAL_GPIO_Init+0x338>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x22e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_GPIO_Init+0x33c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x22a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_GPIO_Init+0x340>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x226>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <HAL_GPIO_Init+0x344>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x222>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <HAL_GPIO_Init+0x348>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x21e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4e      	ldr	r2, [pc, #312]	; (8002ad0 <HAL_GPIO_Init+0x34c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x21a>
 800299a:	2309      	movs	r3, #9
 800299c:	e012      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 800299e:	230a      	movs	r3, #10
 80029a0:	e010      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029a2:	2308      	movs	r3, #8
 80029a4:	e00e      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029a6:	2307      	movs	r3, #7
 80029a8:	e00c      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029aa:	2306      	movs	r3, #6
 80029ac:	e00a      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029c2:	2300      	movs	r3, #0
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d4:	4934      	ldr	r1, [pc, #208]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e2:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a06:	4a33      	ldr	r2, [pc, #204]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a30:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f67f ae84 	bls.w	80027a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3724      	adds	r7, #36	; 0x24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40021c00 	.word	0x40021c00
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40022400 	.word	0x40022400
 8002ad4:	40013c00 	.word	0x40013c00

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f806 	bl	8002b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e11f      	b.n	8002da6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fa8e 	bl	800209c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bb8:	f001 fd28 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 8002bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4a7b      	ldr	r2, [pc, #492]	; (8002db0 <HAL_I2C_Init+0x25c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d807      	bhi.n	8002bd8 <HAL_I2C_Init+0x84>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4a7a      	ldr	r2, [pc, #488]	; (8002db4 <HAL_I2C_Init+0x260>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	bf94      	ite	ls
 8002bd0:	2301      	movls	r3, #1
 8002bd2:	2300      	movhi	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e006      	b.n	8002be6 <HAL_I2C_Init+0x92>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a77      	ldr	r2, [pc, #476]	; (8002db8 <HAL_I2C_Init+0x264>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bf94      	ite	ls
 8002be0:	2301      	movls	r3, #1
 8002be2:	2300      	movhi	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0db      	b.n	8002da6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a72      	ldr	r2, [pc, #456]	; (8002dbc <HAL_I2C_Init+0x268>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0c9b      	lsrs	r3, r3, #18
 8002bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a64      	ldr	r2, [pc, #400]	; (8002db0 <HAL_I2C_Init+0x25c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d802      	bhi.n	8002c28 <HAL_I2C_Init+0xd4>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3301      	adds	r3, #1
 8002c26:	e009      	b.n	8002c3c <HAL_I2C_Init+0xe8>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	4a63      	ldr	r2, [pc, #396]	; (8002dc0 <HAL_I2C_Init+0x26c>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4956      	ldr	r1, [pc, #344]	; (8002db0 <HAL_I2C_Init+0x25c>)
 8002c58:	428b      	cmp	r3, r1
 8002c5a:	d80d      	bhi.n	8002c78 <HAL_I2C_Init+0x124>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1e59      	subs	r1, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	bf38      	it	cc
 8002c74:	2304      	movcc	r3, #4
 8002c76:	e04f      	b.n	8002d18 <HAL_I2C_Init+0x1c4>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d111      	bne.n	8002ca4 <HAL_I2C_Init+0x150>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1e58      	subs	r0, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	440b      	add	r3, r1
 8002c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e012      	b.n	8002cca <HAL_I2C_Init+0x176>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e58      	subs	r0, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	0099      	lsls	r1, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x17e>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e022      	b.n	8002d18 <HAL_I2C_Init+0x1c4>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_I2C_Init+0x1a4>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1e58      	subs	r0, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	440b      	add	r3, r1
 8002ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf6:	e00f      	b.n	8002d18 <HAL_I2C_Init+0x1c4>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	0099      	lsls	r1, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	6809      	ldr	r1, [r1, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6911      	ldr	r1, [r2, #16]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	000186a0 	.word	0x000186a0
 8002db4:	001e847f 	.word	0x001e847f
 8002db8:	003d08ff 	.word	0x003d08ff
 8002dbc:	431bde83 	.word	0x431bde83
 8002dc0:	10624dd3 	.word	0x10624dd3

08002dc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	817b      	strh	r3, [r7, #10]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff fb94 	bl	8002504 <HAL_GetTick>
 8002ddc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	f040 80e0 	bne.w	8002fac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2319      	movs	r3, #25
 8002df2:	2201      	movs	r2, #1
 8002df4:	4970      	ldr	r1, [pc, #448]	; (8002fb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fc58 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0d3      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2C_Master_Transmit+0x50>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e0cc      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d007      	beq.n	8002e3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2221      	movs	r2, #33	; 0x21
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2210      	movs	r2, #16
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	893a      	ldrh	r2, [r7, #8]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a50      	ldr	r2, [pc, #320]	; (8002fbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e7c:	8979      	ldrh	r1, [r7, #10]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fac2 	bl	800340c <I2C_MasterRequestWrite>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e08d      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ea8:	e066      	b.n	8002f78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fcd2 	bl	8003858 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d107      	bne.n	8002ed2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e06b      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11b      	bne.n	8002f4c <HAL_I2C_Master_Transmit+0x188>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	6a39      	ldr	r1, [r7, #32]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fcc2 	bl	80038da <I2C_WaitOnBTFFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d107      	bne.n	8002f74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e01a      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d194      	bne.n	8002eaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	00100002 	.word	0x00100002
 8002fbc:	ffff0000 	.word	0xffff0000

08002fc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	; 0x30
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	817b      	strh	r3, [r7, #10]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7ff fa96 	bl	8002504 <HAL_GetTick>
 8002fd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	f040 820b 	bne.w	80033fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2319      	movs	r3, #25
 8002fee:	2201      	movs	r2, #1
 8002ff0:	497c      	ldr	r1, [pc, #496]	; (80031e4 <HAL_I2C_Master_Receive+0x224>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fb5a 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
 8003000:	e1fe      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_I2C_Master_Receive+0x50>
 800300c:	2302      	movs	r3, #2
 800300e:	e1f7      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d007      	beq.n	8003036 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2222      	movs	r2, #34	; 0x22
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2210      	movs	r2, #16
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	893a      	ldrh	r2, [r7, #8]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <HAL_I2C_Master_Receive+0x228>)
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa46 	bl	8003510 <I2C_MasterRequestRead>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1b8      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d113      	bne.n	80030be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	623b      	str	r3, [r7, #32]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	623b      	str	r3, [r7, #32]
 80030aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e18c      	b.n	80033d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d11b      	bne.n	80030fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e16c      	b.n	80033d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	2b02      	cmp	r3, #2
 8003104:	d11b      	bne.n	800313e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	e14c      	b.n	80033d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003164:	e138      	b.n	80033d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	2b03      	cmp	r3, #3
 800316c:	f200 80f1 	bhi.w	8003352 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b01      	cmp	r3, #1
 8003176:	d123      	bne.n	80031c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fbed 	bl	800395c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e139      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031be:	e10b      	b.n	80033d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d14e      	bne.n	8003266 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	2200      	movs	r2, #0
 80031d0:	4906      	ldr	r1, [pc, #24]	; (80031ec <HAL_I2C_Master_Receive+0x22c>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa6a 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e10e      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
 80031e2:	bf00      	nop
 80031e4:	00100002 	.word	0x00100002
 80031e8:	ffff0000 	.word	0xffff0000
 80031ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003264:	e0b8      	b.n	80033d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	2200      	movs	r2, #0
 800326e:	4966      	ldr	r1, [pc, #408]	; (8003408 <HAL_I2C_Master_Receive+0x448>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa1b 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0bf      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	2200      	movs	r2, #0
 80032ca:	494f      	ldr	r1, [pc, #316]	; (8003408 <HAL_I2C_Master_Receive+0x448>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f9ed 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e091      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003350:	e042      	b.n	80033d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fb00 	bl	800395c <I2C_WaitOnRXNEFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e04c      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d118      	bne.n	80033d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f47f aec2 	bne.w	8003166 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3728      	adds	r7, #40	; 0x28
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	00010004 	.word	0x00010004

0800340c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d006      	beq.n	8003436 <I2C_MasterRequestWrite+0x2a>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d003      	beq.n	8003436 <I2C_MasterRequestWrite+0x2a>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003434:	d108      	bne.n	8003448 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e00b      	b.n	8003460 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	2b12      	cmp	r3, #18
 800344e:	d107      	bne.n	8003460 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f91d 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003486:	d103      	bne.n	8003490 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e035      	b.n	8003500 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349c:	d108      	bne.n	80034b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	e01b      	b.n	80034e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b0:	897b      	ldrh	r3, [r7, #10]
 80034b2:	11db      	asrs	r3, r3, #7
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 0306 	and.w	r3, r3, #6
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f063 030f 	orn	r3, r3, #15
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	490e      	ldr	r1, [pc, #56]	; (8003508 <I2C_MasterRequestWrite+0xfc>)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f943 	bl	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e010      	b.n	8003500 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <I2C_MasterRequestWrite+0x100>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f933 	bl	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	00010008 	.word	0x00010008
 800350c:	00010002 	.word	0x00010002

08003510 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003534:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d006      	beq.n	800354a <I2C_MasterRequestRead+0x3a>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d003      	beq.n	800354a <I2C_MasterRequestRead+0x3a>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003548:	d108      	bne.n	800355c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e00b      	b.n	8003574 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	2b11      	cmp	r3, #17
 8003562:	d107      	bne.n	8003574 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003572:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f893 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359a:	d103      	bne.n	80035a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e079      	b.n	800369c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b0:	d108      	bne.n	80035c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	e05f      	b.n	8003684 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035c4:	897b      	ldrh	r3, [r7, #10]
 80035c6:	11db      	asrs	r3, r3, #7
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f003 0306 	and.w	r3, r3, #6
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f063 030f 	orn	r3, r3, #15
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4930      	ldr	r1, [pc, #192]	; (80036a4 <I2C_MasterRequestRead+0x194>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f8b9 	bl	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e054      	b.n	800369c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4929      	ldr	r1, [pc, #164]	; (80036a8 <I2C_MasterRequestRead+0x198>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f8a9 	bl	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e044      	b.n	800369c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003636:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f831 	bl	80036ac <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d103      	bne.n	8003668 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e017      	b.n	800369c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	11db      	asrs	r3, r3, #7
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 0306 	and.w	r3, r3, #6
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f063 030e 	orn	r3, r3, #14
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4907      	ldr	r1, [pc, #28]	; (80036a8 <I2C_MasterRequestRead+0x198>)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f865 	bl	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	00010008 	.word	0x00010008
 80036a8:	00010002 	.word	0x00010002

080036ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036bc:	e025      	b.n	800370a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d021      	beq.n	800370a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fe ff1d 	bl	8002504 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d116      	bne.n	800370a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e023      	b.n	8003752 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d10d      	bne.n	8003730 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	e00c      	b.n	800374a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	429a      	cmp	r2, r3
 800374e:	d0b6      	beq.n	80036be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003768:	e051      	b.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003778:	d123      	bne.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003792:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e046      	b.n	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d021      	beq.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fe fe9b 	bl	8002504 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d116      	bne.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e020      	b.n	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10c      	bne.n	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e00b      	b.n	800384a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	43da      	mvns	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4013      	ands	r3, r2
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d18d      	bne.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003864:	e02d      	b.n	80038c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8ce 	bl	8003a08 <I2C_IsAcknowledgeFailed>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e02d      	b.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d021      	beq.n	80038c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fe fe41 	bl	8002504 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e007      	b.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d1ca      	bne.n	8003866 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e6:	e02d      	b.n	8003944 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f88d 	bl	8003a08 <I2C_IsAcknowledgeFailed>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e02d      	b.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d021      	beq.n	8003944 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003900:	f7fe fe00 	bl	8002504 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d116      	bne.n	8003944 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e007      	b.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b04      	cmp	r3, #4
 8003950:	d1ca      	bne.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003968:	e042      	b.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b10      	cmp	r3, #16
 8003976:	d119      	bne.n	80039ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0210 	mvn.w	r2, #16
 8003980:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e029      	b.n	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ac:	f7fe fdaa 	bl	8002504 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d302      	bcc.n	80039c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e007      	b.n	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d1b5      	bne.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d11b      	bne.n	8003a58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0204 	orr.w	r2, r3, #4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d129      	bne.n	8003ad0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0210 	bic.w	r2, r2, #16
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d12a      	bne.n	8003b4e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b18:	89fb      	ldrh	r3, [r7, #14]
 8003b1a:	f023 030f 	bic.w	r3, r3, #15
 8003b1e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	89fb      	ldrh	r3, [r7, #14]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	89fa      	ldrh	r2, [r7, #14]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	b08f      	sub	sp, #60	; 0x3c
 8003b60:	af0a      	add	r7, sp, #40	; 0x28
 8003b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e10f      	b.n	8003d8e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fe fb4f 	bl	800222c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f980 	bl	8004eb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	687e      	ldr	r6, [r7, #4]
 8003bba:	466d      	mov	r5, sp
 8003bbc:	f106 0410 	add.w	r4, r6, #16
 8003bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bd0:	1d33      	adds	r3, r6, #4
 8003bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd4:	6838      	ldr	r0, [r7, #0]
 8003bd6:	f001 f90b 	bl	8004df0 <USB_CoreInit>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0d0      	b.n	8003d8e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f96e 	bl	8004ed4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e04a      	b.n	8003c94 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	333d      	adds	r3, #61	; 0x3d
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	333c      	adds	r3, #60	; 0x3c
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	b298      	uxth	r0, r3
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3342      	adds	r3, #66	; 0x42
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	333f      	adds	r3, #63	; 0x3f
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	3344      	adds	r3, #68	; 0x44
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	3348      	adds	r3, #72	; 0x48
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3350      	adds	r3, #80	; 0x50
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3301      	adds	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d3af      	bcc.n	8003bfe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	e044      	b.n	8003d2e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d3b5      	bcc.n	8003ca4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	687e      	ldr	r6, [r7, #4]
 8003d40:	466d      	mov	r5, sp
 8003d42:	f106 0410 	add.w	r4, r6, #16
 8003d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d52:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d56:	1d33      	adds	r3, r6, #4
 8003d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d5a:	6838      	ldr	r0, [r7, #0]
 8003d5c:	f001 f8e4 	bl	8004f28 <USB_DevInit>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00d      	b.n	8003d8e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 fa93 	bl	80052b2 <USB_DevDisconnect>

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e25b      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d075      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003db6:	4ba3      	ldr	r3, [pc, #652]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d00c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc2:	4ba0      	ldr	r3, [pc, #640]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d112      	bne.n	8003df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dce:	4b9d      	ldr	r3, [pc, #628]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	4b99      	ldr	r3, [pc, #612]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05b      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x108>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d157      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e236      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0x74>
 8003dfe:	4b91      	ldr	r3, [pc, #580]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a90      	ldr	r2, [pc, #576]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e01d      	b.n	8003e48 <HAL_RCC_OscConfig+0xb0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x98>
 8003e16:	4b8b      	ldr	r3, [pc, #556]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a8a      	ldr	r2, [pc, #552]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a87      	ldr	r2, [pc, #540]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0xb0>
 8003e30:	4b84      	ldr	r3, [pc, #528]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a83      	ldr	r2, [pc, #524]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b81      	ldr	r3, [pc, #516]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a80      	ldr	r2, [pc, #512]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d013      	beq.n	8003e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe fb58 	bl	8002504 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e58:	f7fe fb54 	bl	8002504 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1fb      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b76      	ldr	r3, [pc, #472]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0xc0>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fe fb44 	bl	8002504 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe fb40 	bl	8002504 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1e7      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e92:	4b6c      	ldr	r3, [pc, #432]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0xe8>
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d063      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eae:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eba:	4b62      	ldr	r3, [pc, #392]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d11c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec6:	4b5f      	ldr	r3, [pc, #380]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d116      	bne.n	8003f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_RCC_OscConfig+0x152>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e1bb      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4952      	ldr	r1, [pc, #328]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	e03a      	b.n	8003f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f08:	4b4f      	ldr	r3, [pc, #316]	; (8004048 <HAL_RCC_OscConfig+0x2b0>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fe faf9 	bl	8002504 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f16:	f7fe faf5 	bl	8002504 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e19c      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	4b46      	ldr	r3, [pc, #280]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f34:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4940      	ldr	r1, [pc, #256]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4a:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCC_OscConfig+0x2b0>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe fad8 	bl	8002504 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fe fad4 	bl	8002504 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e17b      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d030      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8a:	4b30      	ldr	r3, [pc, #192]	; (800404c <HAL_RCC_OscConfig+0x2b4>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fe fab8 	bl	8002504 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fe fab4 	bl	8002504 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e15b      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	4b26      	ldr	r3, [pc, #152]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x200>
 8003fb6:	e015      	b.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb8:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_OscConfig+0x2b4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbe:	f7fe faa1 	bl	8002504 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc6:	f7fe fa9d 	bl	8002504 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e144      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80a0 	beq.w	8004132 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	4a0e      	ldr	r2, [pc, #56]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_OscConfig+0x2b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d121      	bne.n	8004072 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_RCC_OscConfig+0x2b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a07      	ldr	r2, [pc, #28]	; (8004050 <HAL_RCC_OscConfig+0x2b8>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe fa63 	bl	8002504 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	e011      	b.n	8004066 <HAL_RCC_OscConfig+0x2ce>
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	42470000 	.word	0x42470000
 800404c:	42470e80 	.word	0x42470e80
 8004050:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fe fa56 	bl	8002504 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0fd      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004066:	4b81      	ldr	r3, [pc, #516]	; (800426c <HAL_RCC_OscConfig+0x4d4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x2f0>
 800407a:	4b7d      	ldr	r3, [pc, #500]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a7c      	ldr	r2, [pc, #496]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
 8004086:	e01c      	b.n	80040c2 <HAL_RCC_OscConfig+0x32a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b05      	cmp	r3, #5
 800408e:	d10c      	bne.n	80040aa <HAL_RCC_OscConfig+0x312>
 8004090:	4b77      	ldr	r3, [pc, #476]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	4a76      	ldr	r2, [pc, #472]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	4b74      	ldr	r3, [pc, #464]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a73      	ldr	r2, [pc, #460]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	e00b      	b.n	80040c2 <HAL_RCC_OscConfig+0x32a>
 80040aa:	4b71      	ldr	r3, [pc, #452]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a70      	ldr	r2, [pc, #448]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	4b6e      	ldr	r3, [pc, #440]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a6d      	ldr	r2, [pc, #436]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d015      	beq.n	80040f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fe fa1b 	bl	8002504 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fe fa17 	bl	8002504 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0bc      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	4b61      	ldr	r3, [pc, #388]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ee      	beq.n	80040d2 <HAL_RCC_OscConfig+0x33a>
 80040f4:	e014      	b.n	8004120 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f6:	f7fe fa05 	bl	8002504 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fe:	f7fe fa01 	bl	8002504 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	f241 3288 	movw	r2, #5000	; 0x1388
 800410c:	4293      	cmp	r3, r2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e0a6      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	4b56      	ldr	r3, [pc, #344]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ee      	bne.n	80040fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004126:	4b52      	ldr	r3, [pc, #328]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a51      	ldr	r2, [pc, #324]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 800412c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8092 	beq.w	8004260 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413c:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d05c      	beq.n	8004202 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d141      	bne.n	80041d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004150:	4b48      	ldr	r3, [pc, #288]	; (8004274 <HAL_RCC_OscConfig+0x4dc>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fe f9d5 	bl	8002504 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415e:	f7fe f9d1 	bl	8002504 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e078      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004170:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	019b      	lsls	r3, r3, #6
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	3b01      	subs	r3, #1
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	4933      	ldr	r1, [pc, #204]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_RCC_OscConfig+0x4dc>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fe f9aa 	bl	8002504 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fe f9a6 	bl	8002504 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e04d      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x41c>
 80041d2:	e045      	b.n	8004260 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <HAL_RCC_OscConfig+0x4dc>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fe f993 	bl	8002504 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fe f98f 	bl	8002504 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e036      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f4:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x44a>
 8004200:	e02e      	b.n	8004260 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e029      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_RCC_OscConfig+0x4d8>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	429a      	cmp	r2, r3
 8004220:	d11c      	bne.n	800425c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d115      	bne.n	800425c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004236:	4013      	ands	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800423c:	4293      	cmp	r3, r2
 800423e:	d10d      	bne.n	800425c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40007000 	.word	0x40007000
 8004270:	40023800 	.word	0x40023800
 8004274:	42470060 	.word	0x42470060

08004278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0cc      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b68      	ldr	r3, [pc, #416]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d90c      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b65      	ldr	r3, [pc, #404]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b63      	ldr	r3, [pc, #396]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0b8      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a58      	ldr	r2, [pc, #352]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a52      	ldr	r2, [pc, #328]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	494d      	ldr	r1, [pc, #308]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d044      	beq.n	8004398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d119      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e07f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e067      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4934      	ldr	r1, [pc, #208]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004368:	f7fe f8cc 	bl	8002504 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fe f8c8 	bl	8002504 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e04f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d20c      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e032      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4916      	ldr	r1, [pc, #88]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	490e      	ldr	r1, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043fe:	f000 f821 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8004402:	4601      	mov	r1, r0
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	5cd3      	ldrb	r3, [r2, r3]
 8004412:	fa21 f303 	lsr.w	r3, r1, r3
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe f82c 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023c00 	.word	0x40023c00
 8004434:	40023800 	.word	0x40023800
 8004438:	08005a68 	.word	0x08005a68
 800443c:	20000004 	.word	0x20000004
 8004440:	20000008 	.word	0x20000008

08004444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	2300      	movs	r3, #0
 8004454:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b04      	cmp	r3, #4
 8004464:	d007      	beq.n	8004476 <HAL_RCC_GetSysClockFreq+0x32>
 8004466:	2b08      	cmp	r3, #8
 8004468:	d008      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x38>
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 80b4 	bne.w	80045d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b5e      	ldr	r3, [pc, #376]	; (80045ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004472:	60bb      	str	r3, [r7, #8]
       break;
 8004474:	e0b3      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004476:	4b5e      	ldr	r3, [pc, #376]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004478:	60bb      	str	r3, [r7, #8]
      break;
 800447a:	e0b0      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800447c:	4b5a      	ldr	r3, [pc, #360]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004484:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004486:	4b58      	ldr	r3, [pc, #352]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d04a      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004492:	4b55      	ldr	r3, [pc, #340]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	f04f 0400 	mov.w	r4, #0
 800449c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	ea03 0501 	and.w	r5, r3, r1
 80044a8:	ea04 0602 	and.w	r6, r4, r2
 80044ac:	4629      	mov	r1, r5
 80044ae:	4632      	mov	r2, r6
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	f04f 0400 	mov.w	r4, #0
 80044b8:	0154      	lsls	r4, r2, #5
 80044ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044be:	014b      	lsls	r3, r1, #5
 80044c0:	4619      	mov	r1, r3
 80044c2:	4622      	mov	r2, r4
 80044c4:	1b49      	subs	r1, r1, r5
 80044c6:	eb62 0206 	sbc.w	r2, r2, r6
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	0194      	lsls	r4, r2, #6
 80044d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044d8:	018b      	lsls	r3, r1, #6
 80044da:	1a5b      	subs	r3, r3, r1
 80044dc:	eb64 0402 	sbc.w	r4, r4, r2
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	00e2      	lsls	r2, r4, #3
 80044ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044ee:	00d9      	lsls	r1, r3, #3
 80044f0:	460b      	mov	r3, r1
 80044f2:	4614      	mov	r4, r2
 80044f4:	195b      	adds	r3, r3, r5
 80044f6:	eb44 0406 	adc.w	r4, r4, r6
 80044fa:	f04f 0100 	mov.w	r1, #0
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	0262      	lsls	r2, r4, #9
 8004504:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004508:	0259      	lsls	r1, r3, #9
 800450a:	460b      	mov	r3, r1
 800450c:	4614      	mov	r4, r2
 800450e:	4618      	mov	r0, r3
 8004510:	4621      	mov	r1, r4
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	461a      	mov	r2, r3
 800451a:	4623      	mov	r3, r4
 800451c:	f7fc fb44 	bl	8000ba8 <__aeabi_uldivmod>
 8004520:	4603      	mov	r3, r0
 8004522:	460c      	mov	r4, r1
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e049      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004528:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	ea03 0501 	and.w	r5, r3, r1
 800453e:	ea04 0602 	and.w	r6, r4, r2
 8004542:	4629      	mov	r1, r5
 8004544:	4632      	mov	r2, r6
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	0154      	lsls	r4, r2, #5
 8004550:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004554:	014b      	lsls	r3, r1, #5
 8004556:	4619      	mov	r1, r3
 8004558:	4622      	mov	r2, r4
 800455a:	1b49      	subs	r1, r1, r5
 800455c:	eb62 0206 	sbc.w	r2, r2, r6
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	0194      	lsls	r4, r2, #6
 800456a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800456e:	018b      	lsls	r3, r1, #6
 8004570:	1a5b      	subs	r3, r3, r1
 8004572:	eb64 0402 	sbc.w	r4, r4, r2
 8004576:	f04f 0100 	mov.w	r1, #0
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	00e2      	lsls	r2, r4, #3
 8004580:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004584:	00d9      	lsls	r1, r3, #3
 8004586:	460b      	mov	r3, r1
 8004588:	4614      	mov	r4, r2
 800458a:	195b      	adds	r3, r3, r5
 800458c:	eb44 0406 	adc.w	r4, r4, r6
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	02a2      	lsls	r2, r4, #10
 800459a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800459e:	0299      	lsls	r1, r3, #10
 80045a0:	460b      	mov	r3, r1
 80045a2:	4614      	mov	r4, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	4621      	mov	r1, r4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f04f 0400 	mov.w	r4, #0
 80045ae:	461a      	mov	r2, r3
 80045b0:	4623      	mov	r3, r4
 80045b2:	f7fc faf9 	bl	8000ba8 <__aeabi_uldivmod>
 80045b6:	4603      	mov	r3, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	3301      	adds	r3, #1
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	60bb      	str	r3, [r7, #8]
      break;
 80045d6:	e002      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045da:	60bb      	str	r3, [r7, #8]
      break;
 80045dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045de:	68bb      	ldr	r3, [r7, #8]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e8:	40023800 	.word	0x40023800
 80045ec:	00f42400 	.word	0x00f42400
 80045f0:	007a1200 	.word	0x007a1200

080045f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <HAL_RCC_GetHCLKFreq+0x14>)
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000004 	.word	0x20000004

0800460c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004610:	f7ff fff0 	bl	80045f4 <HAL_RCC_GetHCLKFreq>
 8004614:	4601      	mov	r1, r0
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0a9b      	lsrs	r3, r3, #10
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4a03      	ldr	r2, [pc, #12]	; (8004630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004622:	5cd3      	ldrb	r3, [r2, r3]
 8004624:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	08005a78 	.word	0x08005a78

08004634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004638:	f7ff ffdc 	bl	80045f4 <HAL_RCC_GetHCLKFreq>
 800463c:	4601      	mov	r1, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0b5b      	lsrs	r3, r3, #13
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4a03      	ldr	r2, [pc, #12]	; (8004658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800464a:	5cd3      	ldrb	r3, [r2, r3]
 800464c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	08005a78 	.word	0x08005a78

0800465c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03f      	b.n	80046ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fd fd52 	bl	800212c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f829 	bl	80046f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800473a:	f023 030c 	bic.w	r3, r3, #12
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	430b      	orrs	r3, r1
 8004746:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004766:	f040 818b 	bne.w	8004a80 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4ac1      	ldr	r2, [pc, #772]	; (8004a74 <UART_SetConfig+0x37c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d005      	beq.n	8004780 <UART_SetConfig+0x88>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4abf      	ldr	r2, [pc, #764]	; (8004a78 <UART_SetConfig+0x380>)
 800477a:	4293      	cmp	r3, r2
 800477c:	f040 80bd 	bne.w	80048fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004780:	f7ff ff58 	bl	8004634 <HAL_RCC_GetPCLK2Freq>
 8004784:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	461d      	mov	r5, r3
 800478a:	f04f 0600 	mov.w	r6, #0
 800478e:	46a8      	mov	r8, r5
 8004790:	46b1      	mov	r9, r6
 8004792:	eb18 0308 	adds.w	r3, r8, r8
 8004796:	eb49 0409 	adc.w	r4, r9, r9
 800479a:	4698      	mov	r8, r3
 800479c:	46a1      	mov	r9, r4
 800479e:	eb18 0805 	adds.w	r8, r8, r5
 80047a2:	eb49 0906 	adc.w	r9, r9, r6
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047ba:	4688      	mov	r8, r1
 80047bc:	4691      	mov	r9, r2
 80047be:	eb18 0005 	adds.w	r0, r8, r5
 80047c2:	eb49 0106 	adc.w	r1, r9, r6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	461d      	mov	r5, r3
 80047cc:	f04f 0600 	mov.w	r6, #0
 80047d0:	196b      	adds	r3, r5, r5
 80047d2:	eb46 0406 	adc.w	r4, r6, r6
 80047d6:	461a      	mov	r2, r3
 80047d8:	4623      	mov	r3, r4
 80047da:	f7fc f9e5 	bl	8000ba8 <__aeabi_uldivmod>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	461a      	mov	r2, r3
 80047e4:	4ba5      	ldr	r3, [pc, #660]	; (8004a7c <UART_SetConfig+0x384>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	461d      	mov	r5, r3
 80047f4:	f04f 0600 	mov.w	r6, #0
 80047f8:	46a9      	mov	r9, r5
 80047fa:	46b2      	mov	sl, r6
 80047fc:	eb19 0309 	adds.w	r3, r9, r9
 8004800:	eb4a 040a 	adc.w	r4, sl, sl
 8004804:	4699      	mov	r9, r3
 8004806:	46a2      	mov	sl, r4
 8004808:	eb19 0905 	adds.w	r9, r9, r5
 800480c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800481c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004824:	4689      	mov	r9, r1
 8004826:	4692      	mov	sl, r2
 8004828:	eb19 0005 	adds.w	r0, r9, r5
 800482c:	eb4a 0106 	adc.w	r1, sl, r6
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	461d      	mov	r5, r3
 8004836:	f04f 0600 	mov.w	r6, #0
 800483a:	196b      	adds	r3, r5, r5
 800483c:	eb46 0406 	adc.w	r4, r6, r6
 8004840:	461a      	mov	r2, r3
 8004842:	4623      	mov	r3, r4
 8004844:	f7fc f9b0 	bl	8000ba8 <__aeabi_uldivmod>
 8004848:	4603      	mov	r3, r0
 800484a:	460c      	mov	r4, r1
 800484c:	461a      	mov	r2, r3
 800484e:	4b8b      	ldr	r3, [pc, #556]	; (8004a7c <UART_SetConfig+0x384>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	; 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	3332      	adds	r3, #50	; 0x32
 8004862:	4a86      	ldr	r2, [pc, #536]	; (8004a7c <UART_SetConfig+0x384>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004870:	4498      	add	r8, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	461d      	mov	r5, r3
 8004876:	f04f 0600 	mov.w	r6, #0
 800487a:	46a9      	mov	r9, r5
 800487c:	46b2      	mov	sl, r6
 800487e:	eb19 0309 	adds.w	r3, r9, r9
 8004882:	eb4a 040a 	adc.w	r4, sl, sl
 8004886:	4699      	mov	r9, r3
 8004888:	46a2      	mov	sl, r4
 800488a:	eb19 0905 	adds.w	r9, r9, r5
 800488e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800489e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048a6:	4689      	mov	r9, r1
 80048a8:	4692      	mov	sl, r2
 80048aa:	eb19 0005 	adds.w	r0, r9, r5
 80048ae:	eb4a 0106 	adc.w	r1, sl, r6
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	461d      	mov	r5, r3
 80048b8:	f04f 0600 	mov.w	r6, #0
 80048bc:	196b      	adds	r3, r5, r5
 80048be:	eb46 0406 	adc.w	r4, r6, r6
 80048c2:	461a      	mov	r2, r3
 80048c4:	4623      	mov	r3, r4
 80048c6:	f7fc f96f 	bl	8000ba8 <__aeabi_uldivmod>
 80048ca:	4603      	mov	r3, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <UART_SetConfig+0x384>)
 80048d2:	fba3 1302 	umull	r1, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2164      	movs	r1, #100	; 0x64
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	3332      	adds	r3, #50	; 0x32
 80048e4:	4a65      	ldr	r2, [pc, #404]	; (8004a7c <UART_SetConfig+0x384>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	f003 0207 	and.w	r2, r3, #7
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4442      	add	r2, r8
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e26f      	b.n	8004dda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fa:	f7ff fe87 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 80048fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	461d      	mov	r5, r3
 8004904:	f04f 0600 	mov.w	r6, #0
 8004908:	46a8      	mov	r8, r5
 800490a:	46b1      	mov	r9, r6
 800490c:	eb18 0308 	adds.w	r3, r8, r8
 8004910:	eb49 0409 	adc.w	r4, r9, r9
 8004914:	4698      	mov	r8, r3
 8004916:	46a1      	mov	r9, r4
 8004918:	eb18 0805 	adds.w	r8, r8, r5
 800491c:	eb49 0906 	adc.w	r9, r9, r6
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800492c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004930:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004934:	4688      	mov	r8, r1
 8004936:	4691      	mov	r9, r2
 8004938:	eb18 0005 	adds.w	r0, r8, r5
 800493c:	eb49 0106 	adc.w	r1, r9, r6
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	461d      	mov	r5, r3
 8004946:	f04f 0600 	mov.w	r6, #0
 800494a:	196b      	adds	r3, r5, r5
 800494c:	eb46 0406 	adc.w	r4, r6, r6
 8004950:	461a      	mov	r2, r3
 8004952:	4623      	mov	r3, r4
 8004954:	f7fc f928 	bl	8000ba8 <__aeabi_uldivmod>
 8004958:	4603      	mov	r3, r0
 800495a:	460c      	mov	r4, r1
 800495c:	461a      	mov	r2, r3
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <UART_SetConfig+0x384>)
 8004960:	fba3 2302 	umull	r2, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	461d      	mov	r5, r3
 800496e:	f04f 0600 	mov.w	r6, #0
 8004972:	46a9      	mov	r9, r5
 8004974:	46b2      	mov	sl, r6
 8004976:	eb19 0309 	adds.w	r3, r9, r9
 800497a:	eb4a 040a 	adc.w	r4, sl, sl
 800497e:	4699      	mov	r9, r3
 8004980:	46a2      	mov	sl, r4
 8004982:	eb19 0905 	adds.w	r9, r9, r5
 8004986:	eb4a 0a06 	adc.w	sl, sl, r6
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800499e:	4689      	mov	r9, r1
 80049a0:	4692      	mov	sl, r2
 80049a2:	eb19 0005 	adds.w	r0, r9, r5
 80049a6:	eb4a 0106 	adc.w	r1, sl, r6
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	461d      	mov	r5, r3
 80049b0:	f04f 0600 	mov.w	r6, #0
 80049b4:	196b      	adds	r3, r5, r5
 80049b6:	eb46 0406 	adc.w	r4, r6, r6
 80049ba:	461a      	mov	r2, r3
 80049bc:	4623      	mov	r3, r4
 80049be:	f7fc f8f3 	bl	8000ba8 <__aeabi_uldivmod>
 80049c2:	4603      	mov	r3, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	461a      	mov	r2, r3
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <UART_SetConfig+0x384>)
 80049ca:	fba3 1302 	umull	r1, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2164      	movs	r1, #100	; 0x64
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	3332      	adds	r3, #50	; 0x32
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <UART_SetConfig+0x384>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049ea:	4498      	add	r8, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	461d      	mov	r5, r3
 80049f0:	f04f 0600 	mov.w	r6, #0
 80049f4:	46a9      	mov	r9, r5
 80049f6:	46b2      	mov	sl, r6
 80049f8:	eb19 0309 	adds.w	r3, r9, r9
 80049fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004a00:	4699      	mov	r9, r3
 8004a02:	46a2      	mov	sl, r4
 8004a04:	eb19 0905 	adds.w	r9, r9, r5
 8004a08:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a20:	4689      	mov	r9, r1
 8004a22:	4692      	mov	sl, r2
 8004a24:	eb19 0005 	adds.w	r0, r9, r5
 8004a28:	eb4a 0106 	adc.w	r1, sl, r6
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	461d      	mov	r5, r3
 8004a32:	f04f 0600 	mov.w	r6, #0
 8004a36:	196b      	adds	r3, r5, r5
 8004a38:	eb46 0406 	adc.w	r4, r6, r6
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	f7fc f8b2 	bl	8000ba8 <__aeabi_uldivmod>
 8004a44:	4603      	mov	r3, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <UART_SetConfig+0x384>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	; 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3332      	adds	r3, #50	; 0x32
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <UART_SetConfig+0x384>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4442      	add	r2, r8
 8004a70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a72:	e1b2      	b.n	8004dda <UART_SetConfig+0x6e2>
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4ad7      	ldr	r2, [pc, #860]	; (8004de4 <UART_SetConfig+0x6ec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d005      	beq.n	8004a96 <UART_SetConfig+0x39e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4ad6      	ldr	r2, [pc, #856]	; (8004de8 <UART_SetConfig+0x6f0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	f040 80d1 	bne.w	8004c38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a96:	f7ff fdcd 	bl	8004634 <HAL_RCC_GetPCLK2Freq>
 8004a9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	469a      	mov	sl, r3
 8004aa0:	f04f 0b00 	mov.w	fp, #0
 8004aa4:	46d0      	mov	r8, sl
 8004aa6:	46d9      	mov	r9, fp
 8004aa8:	eb18 0308 	adds.w	r3, r8, r8
 8004aac:	eb49 0409 	adc.w	r4, r9, r9
 8004ab0:	4698      	mov	r8, r3
 8004ab2:	46a1      	mov	r9, r4
 8004ab4:	eb18 080a 	adds.w	r8, r8, sl
 8004ab8:	eb49 090b 	adc.w	r9, r9, fp
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ac8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004acc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ad0:	4688      	mov	r8, r1
 8004ad2:	4691      	mov	r9, r2
 8004ad4:	eb1a 0508 	adds.w	r5, sl, r8
 8004ad8:	eb4b 0609 	adc.w	r6, fp, r9
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	f04f 0400 	mov.w	r4, #0
 8004aee:	0094      	lsls	r4, r2, #2
 8004af0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004af4:	008b      	lsls	r3, r1, #2
 8004af6:	461a      	mov	r2, r3
 8004af8:	4623      	mov	r3, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	4631      	mov	r1, r6
 8004afe:	f7fc f853 	bl	8000ba8 <__aeabi_uldivmod>
 8004b02:	4603      	mov	r3, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	461a      	mov	r2, r3
 8004b08:	4bb8      	ldr	r3, [pc, #736]	; (8004dec <UART_SetConfig+0x6f4>)
 8004b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	469b      	mov	fp, r3
 8004b18:	f04f 0c00 	mov.w	ip, #0
 8004b1c:	46d9      	mov	r9, fp
 8004b1e:	46e2      	mov	sl, ip
 8004b20:	eb19 0309 	adds.w	r3, r9, r9
 8004b24:	eb4a 040a 	adc.w	r4, sl, sl
 8004b28:	4699      	mov	r9, r3
 8004b2a:	46a2      	mov	sl, r4
 8004b2c:	eb19 090b 	adds.w	r9, r9, fp
 8004b30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b48:	4689      	mov	r9, r1
 8004b4a:	4692      	mov	sl, r2
 8004b4c:	eb1b 0509 	adds.w	r5, fp, r9
 8004b50:	eb4c 060a 	adc.w	r6, ip, sl
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	0094      	lsls	r4, r2, #2
 8004b68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4623      	mov	r3, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	4631      	mov	r1, r6
 8004b76:	f7fc f817 	bl	8000ba8 <__aeabi_uldivmod>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4b9a      	ldr	r3, [pc, #616]	; (8004dec <UART_SetConfig+0x6f4>)
 8004b82:	fba3 1302 	umull	r1, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2164      	movs	r1, #100	; 0x64
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	3332      	adds	r3, #50	; 0x32
 8004b94:	4a95      	ldr	r2, [pc, #596]	; (8004dec <UART_SetConfig+0x6f4>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	4498      	add	r8, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	469b      	mov	fp, r3
 8004ba6:	f04f 0c00 	mov.w	ip, #0
 8004baa:	46d9      	mov	r9, fp
 8004bac:	46e2      	mov	sl, ip
 8004bae:	eb19 0309 	adds.w	r3, r9, r9
 8004bb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb6:	4699      	mov	r9, r3
 8004bb8:	46a2      	mov	sl, r4
 8004bba:	eb19 090b 	adds.w	r9, r9, fp
 8004bbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd6:	4689      	mov	r9, r1
 8004bd8:	4692      	mov	sl, r2
 8004bda:	eb1b 0509 	adds.w	r5, fp, r9
 8004bde:	eb4c 060a 	adc.w	r6, ip, sl
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4619      	mov	r1, r3
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	0094      	lsls	r4, r2, #2
 8004bf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bfa:	008b      	lsls	r3, r1, #2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	4628      	mov	r0, r5
 8004c02:	4631      	mov	r1, r6
 8004c04:	f7fb ffd0 	bl	8000ba8 <__aeabi_uldivmod>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b77      	ldr	r3, [pc, #476]	; (8004dec <UART_SetConfig+0x6f4>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	; 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	3332      	adds	r3, #50	; 0x32
 8004c22:	4a72      	ldr	r2, [pc, #456]	; (8004dec <UART_SetConfig+0x6f4>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f003 020f 	and.w	r2, r3, #15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4442      	add	r2, r8
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	e0d0      	b.n	8004dda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7ff fce8 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 8004c3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	469a      	mov	sl, r3
 8004c42:	f04f 0b00 	mov.w	fp, #0
 8004c46:	46d0      	mov	r8, sl
 8004c48:	46d9      	mov	r9, fp
 8004c4a:	eb18 0308 	adds.w	r3, r8, r8
 8004c4e:	eb49 0409 	adc.w	r4, r9, r9
 8004c52:	4698      	mov	r8, r3
 8004c54:	46a1      	mov	r9, r4
 8004c56:	eb18 080a 	adds.w	r8, r8, sl
 8004c5a:	eb49 090b 	adc.w	r9, r9, fp
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c72:	4688      	mov	r8, r1
 8004c74:	4691      	mov	r9, r2
 8004c76:	eb1a 0508 	adds.w	r5, sl, r8
 8004c7a:	eb4b 0609 	adc.w	r6, fp, r9
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4619      	mov	r1, r3
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	f04f 0400 	mov.w	r4, #0
 8004c90:	0094      	lsls	r4, r2, #2
 8004c92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c96:	008b      	lsls	r3, r1, #2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	f7fb ff82 	bl	8000ba8 <__aeabi_uldivmod>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <UART_SetConfig+0x6f4>)
 8004cac:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	469b      	mov	fp, r3
 8004cba:	f04f 0c00 	mov.w	ip, #0
 8004cbe:	46d9      	mov	r9, fp
 8004cc0:	46e2      	mov	sl, ip
 8004cc2:	eb19 0309 	adds.w	r3, r9, r9
 8004cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8004cca:	4699      	mov	r9, r3
 8004ccc:	46a2      	mov	sl, r4
 8004cce:	eb19 090b 	adds.w	r9, r9, fp
 8004cd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cea:	4689      	mov	r9, r1
 8004cec:	4692      	mov	sl, r2
 8004cee:	eb1b 0509 	adds.w	r5, fp, r9
 8004cf2:	eb4c 060a 	adc.w	r6, ip, sl
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	f04f 0400 	mov.w	r4, #0
 8004d08:	0094      	lsls	r4, r2, #2
 8004d0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d0e:	008b      	lsls	r3, r1, #2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	4631      	mov	r1, r6
 8004d18:	f7fb ff46 	bl	8000ba8 <__aeabi_uldivmod>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <UART_SetConfig+0x6f4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <UART_SetConfig+0x6f4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d42:	4498      	add	r8, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	469b      	mov	fp, r3
 8004d48:	f04f 0c00 	mov.w	ip, #0
 8004d4c:	46d9      	mov	r9, fp
 8004d4e:	46e2      	mov	sl, ip
 8004d50:	eb19 0309 	adds.w	r3, r9, r9
 8004d54:	eb4a 040a 	adc.w	r4, sl, sl
 8004d58:	4699      	mov	r9, r3
 8004d5a:	46a2      	mov	sl, r4
 8004d5c:	eb19 090b 	adds.w	r9, r9, fp
 8004d60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d78:	4689      	mov	r9, r1
 8004d7a:	4692      	mov	sl, r2
 8004d7c:	eb1b 0509 	adds.w	r5, fp, r9
 8004d80:	eb4c 060a 	adc.w	r6, ip, sl
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	f04f 0400 	mov.w	r4, #0
 8004d96:	0094      	lsls	r4, r2, #2
 8004d98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d9c:	008b      	lsls	r3, r1, #2
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4623      	mov	r3, r4
 8004da2:	4628      	mov	r0, r5
 8004da4:	4631      	mov	r1, r6
 8004da6:	f7fb feff 	bl	8000ba8 <__aeabi_uldivmod>
 8004daa:	4603      	mov	r3, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <UART_SetConfig+0x6f4>)
 8004db2:	fba3 1302 	umull	r1, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2164      	movs	r1, #100	; 0x64
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	3332      	adds	r3, #50	; 0x32
 8004dc4:	4a09      	ldr	r2, [pc, #36]	; (8004dec <UART_SetConfig+0x6f4>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4442      	add	r2, r8
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	e7ff      	b.n	8004dda <UART_SetConfig+0x6e2>
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de4:	40011000 	.word	0x40011000
 8004de8:	40011400 	.word	0x40011400
 8004dec:	51eb851f 	.word	0x51eb851f

08004df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df0:	b084      	sub	sp, #16
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	f107 001c 	add.w	r0, r7, #28
 8004dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d122      	bne.n	8004e4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d105      	bne.n	8004e42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa56 	bl	80052f4 <USB_CoreReset>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e01a      	b.n	8004e84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa4a 	bl	80052f4 <USB_CoreReset>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
 8004e76:	e005      	b.n	8004e84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10b      	bne.n	8004ea2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f043 0206 	orr.w	r2, r3, #6
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eae:	b004      	add	sp, #16
 8004eb0:	4770      	bx	lr

08004eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d106      	bne.n	8004f00 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	e00b      	b.n	8004f18 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	e001      	b.n	8004f18 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e003      	b.n	8004f20 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f18:	2032      	movs	r0, #50	; 0x32
 8004f1a:	f7fd faff 	bl	800251c <HAL_Delay>

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f28:	b084      	sub	sp, #16
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e009      	b.n	8004f5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	3340      	adds	r3, #64	; 0x40
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	2200      	movs	r2, #0
 8004f54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b0e      	cmp	r3, #14
 8004f60:	d9f2      	bls.n	8004f48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11c      	bne.n	8004fa2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f76:	f043 0302 	orr.w	r3, r3, #2
 8004f7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8004fa0:	e00b      	b.n	8004fba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fcc:	4619      	mov	r1, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	680b      	ldr	r3, [r1, #0]
 8004fd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10c      	bne.n	8004ffa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f949 	bl	8005280 <USB_SetDevSpeed>
 8004fee:	e008      	b.n	8005002 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f944 	bl	8005280 <USB_SetDevSpeed>
 8004ff8:	e003      	b.n	8005002 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ffa:	2103      	movs	r1, #3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f93f 	bl	8005280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005002:	2110      	movs	r1, #16
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8f3 	bl	80051f0 <USB_FlushTxFifo>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f911 	bl	800523c <USB_FlushRxFifo>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	461a      	mov	r2, r3
 800502c:	2300      	movs	r3, #0
 800502e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	461a      	mov	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	461a      	mov	r2, r3
 8005044:	2300      	movs	r3, #0
 8005046:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	e043      	b.n	80050d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005064:	d118      	bne.n	8005098 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	461a      	mov	r2, r3
 800507a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e013      	b.n	80050aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	461a      	mov	r2, r3
 8005090:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e008      	b.n	80050aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	461a      	mov	r2, r3
 80050a6:	2300      	movs	r3, #0
 80050a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b6:	461a      	mov	r2, r3
 80050b8:	2300      	movs	r3, #0
 80050ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	461a      	mov	r2, r3
 80050ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3301      	adds	r3, #1
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d3b7      	bcc.n	800504e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e043      	b.n	800516c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fa:	d118      	bne.n	800512e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	461a      	mov	r2, r3
 8005110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e013      	b.n	8005140 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	461a      	mov	r2, r3
 8005126:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	e008      	b.n	8005140 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514c:	461a      	mov	r2, r3
 800514e:	2300      	movs	r3, #0
 8005150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005164:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	429a      	cmp	r2, r3
 8005172:	d3b7      	bcc.n	80050e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005186:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005194:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f043 0210 	orr.w	r2, r3, #16
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <USB_DevInit+0x2c4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f043 0208 	orr.w	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d107      	bne.n	80051dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d4:	f043 0304 	orr.w	r3, r3, #4
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051e8:	b004      	add	sp, #16
 80051ea:	4770      	bx	lr
 80051ec:	803c3800 	.word	0x803c3800

080051f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	f043 0220 	orr.w	r2, r3, #32
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3301      	adds	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <USB_FlushTxFifo+0x48>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e006      	b.n	800522a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b20      	cmp	r3, #32
 8005226:	d0f0      	beq.n	800520a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	00030d40 	.word	0x00030d40

0800523c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2210      	movs	r2, #16
 800524c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <USB_FlushRxFifo+0x40>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e006      	b.n	800526e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b10      	cmp	r3, #16
 800526a:	d0f0      	beq.n	800524e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	00030d40 	.word	0x00030d40

08005280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e0:	f043 0302 	orr.w	r3, r3, #2
 80052e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a13      	ldr	r2, [pc, #76]	; (8005358 <USB_CoreReset+0x64>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e01b      	b.n	800534a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	daf2      	bge.n	8005300 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <USB_CoreReset+0x64>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e006      	b.n	800534a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d0f0      	beq.n	800532a <USB_CoreReset+0x36>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	00030d40 	.word	0x00030d40

0800535c <__errno>:
 800535c:	4b01      	ldr	r3, [pc, #4]	; (8005364 <__errno+0x8>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000010 	.word	0x20000010

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4e0d      	ldr	r6, [pc, #52]	; (80053a0 <__libc_init_array+0x38>)
 800536c:	4c0d      	ldr	r4, [pc, #52]	; (80053a4 <__libc_init_array+0x3c>)
 800536e:	1ba4      	subs	r4, r4, r6
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	2500      	movs	r5, #0
 8005374:	42a5      	cmp	r5, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	4e0b      	ldr	r6, [pc, #44]	; (80053a8 <__libc_init_array+0x40>)
 800537a:	4c0c      	ldr	r4, [pc, #48]	; (80053ac <__libc_init_array+0x44>)
 800537c:	f000 fb68 	bl	8005a50 <_init>
 8005380:	1ba4      	subs	r4, r4, r6
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	2500      	movs	r5, #0
 8005386:	42a5      	cmp	r5, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005390:	4798      	blx	r3
 8005392:	3501      	adds	r5, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800539a:	4798      	blx	r3
 800539c:	3501      	adds	r5, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	08005a94 	.word	0x08005a94
 80053a4:	08005a94 	.word	0x08005a94
 80053a8:	08005a94 	.word	0x08005a94
 80053ac:	08005a98 	.word	0x08005a98

080053b0 <memset>:
 80053b0:	4402      	add	r2, r0
 80053b2:	4603      	mov	r3, r0
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d100      	bne.n	80053ba <memset+0xa>
 80053b8:	4770      	bx	lr
 80053ba:	f803 1b01 	strb.w	r1, [r3], #1
 80053be:	e7f9      	b.n	80053b4 <memset+0x4>

080053c0 <log>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	ed2d 8b02 	vpush	{d8}
 80053c6:	b08a      	sub	sp, #40	; 0x28
 80053c8:	ec55 4b10 	vmov	r4, r5, d0
 80053cc:	f000 f8d4 	bl	8005578 <__ieee754_log>
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <log+0xec>)
 80053d2:	eeb0 8a40 	vmov.f32	s16, s0
 80053d6:	eef0 8a60 	vmov.f32	s17, s1
 80053da:	f993 6000 	ldrsb.w	r6, [r3]
 80053de:	1c73      	adds	r3, r6, #1
 80053e0:	d05b      	beq.n	800549a <log+0xda>
 80053e2:	4622      	mov	r2, r4
 80053e4:	462b      	mov	r3, r5
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7fb fb57 	bl	8000a9c <__aeabi_dcmpun>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d153      	bne.n	800549a <log+0xda>
 80053f2:	2200      	movs	r2, #0
 80053f4:	2300      	movs	r3, #0
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fb fb45 	bl	8000a88 <__aeabi_dcmpgt>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d14b      	bne.n	800549a <log+0xda>
 8005402:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <log+0xf0>)
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	9008      	str	r0, [sp, #32]
 8005408:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800540c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005410:	b9a6      	cbnz	r6, 800543c <log+0x7c>
 8005412:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <log+0xf4>)
 8005414:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005418:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800541c:	4620      	mov	r0, r4
 800541e:	2200      	movs	r2, #0
 8005420:	2300      	movs	r3, #0
 8005422:	4629      	mov	r1, r5
 8005424:	f7fb fb08 	bl	8000a38 <__aeabi_dcmpeq>
 8005428:	bb40      	cbnz	r0, 800547c <log+0xbc>
 800542a:	2301      	movs	r3, #1
 800542c:	2e02      	cmp	r6, #2
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	d119      	bne.n	8005466 <log+0xa6>
 8005432:	f7ff ff93 	bl	800535c <__errno>
 8005436:	2321      	movs	r3, #33	; 0x21
 8005438:	6003      	str	r3, [r0, #0]
 800543a:	e019      	b.n	8005470 <log+0xb0>
 800543c:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <log+0xf8>)
 800543e:	2200      	movs	r2, #0
 8005440:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005444:	4620      	mov	r0, r4
 8005446:	2200      	movs	r2, #0
 8005448:	2300      	movs	r3, #0
 800544a:	4629      	mov	r1, r5
 800544c:	f7fb faf4 	bl	8000a38 <__aeabi_dcmpeq>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0ea      	beq.n	800542a <log+0x6a>
 8005454:	2302      	movs	r3, #2
 8005456:	429e      	cmp	r6, r3
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	d111      	bne.n	8005480 <log+0xc0>
 800545c:	f7ff ff7e 	bl	800535c <__errno>
 8005460:	2322      	movs	r3, #34	; 0x22
 8005462:	6003      	str	r3, [r0, #0]
 8005464:	e011      	b.n	800548a <log+0xca>
 8005466:	4668      	mov	r0, sp
 8005468:	f000 fae8 	bl	8005a3c <matherr>
 800546c:	2800      	cmp	r0, #0
 800546e:	d0e0      	beq.n	8005432 <log+0x72>
 8005470:	4812      	ldr	r0, [pc, #72]	; (80054bc <log+0xfc>)
 8005472:	f000 fae5 	bl	8005a40 <nan>
 8005476:	ed8d 0b06 	vstr	d0, [sp, #24]
 800547a:	e006      	b.n	800548a <log+0xca>
 800547c:	2302      	movs	r3, #2
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	4668      	mov	r0, sp
 8005482:	f000 fadb 	bl	8005a3c <matherr>
 8005486:	2800      	cmp	r0, #0
 8005488:	d0e8      	beq.n	800545c <log+0x9c>
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	b11b      	cbz	r3, 8005496 <log+0xd6>
 800548e:	f7ff ff65 	bl	800535c <__errno>
 8005492:	9b08      	ldr	r3, [sp, #32]
 8005494:	6003      	str	r3, [r0, #0]
 8005496:	ed9d 8b06 	vldr	d8, [sp, #24]
 800549a:	eeb0 0a48 	vmov.f32	s0, s16
 800549e:	eef0 0a68 	vmov.f32	s1, s17
 80054a2:	b00a      	add	sp, #40	; 0x28
 80054a4:	ecbd 8b02 	vpop	{d8}
 80054a8:	bd70      	pop	{r4, r5, r6, pc}
 80054aa:	bf00      	nop
 80054ac:	20000074 	.word	0x20000074
 80054b0:	08005a80 	.word	0x08005a80
 80054b4:	c7efffff 	.word	0xc7efffff
 80054b8:	fff00000 	.word	0xfff00000
 80054bc:	08005a83 	.word	0x08005a83

080054c0 <sqrt>:
 80054c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054c4:	ed2d 8b02 	vpush	{d8}
 80054c8:	b08b      	sub	sp, #44	; 0x2c
 80054ca:	ec55 4b10 	vmov	r4, r5, d0
 80054ce:	f000 fa05 	bl	80058dc <__ieee754_sqrt>
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <sqrt+0xac>)
 80054d4:	eeb0 8a40 	vmov.f32	s16, s0
 80054d8:	eef0 8a60 	vmov.f32	s17, s1
 80054dc:	f993 6000 	ldrsb.w	r6, [r3]
 80054e0:	1c73      	adds	r3, r6, #1
 80054e2:	d02a      	beq.n	800553a <sqrt+0x7a>
 80054e4:	4622      	mov	r2, r4
 80054e6:	462b      	mov	r3, r5
 80054e8:	4620      	mov	r0, r4
 80054ea:	4629      	mov	r1, r5
 80054ec:	f7fb fad6 	bl	8000a9c <__aeabi_dcmpun>
 80054f0:	4607      	mov	r7, r0
 80054f2:	bb10      	cbnz	r0, 800553a <sqrt+0x7a>
 80054f4:	f04f 0800 	mov.w	r8, #0
 80054f8:	f04f 0900 	mov.w	r9, #0
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	4620      	mov	r0, r4
 8005502:	4629      	mov	r1, r5
 8005504:	f7fb faa2 	bl	8000a4c <__aeabi_dcmplt>
 8005508:	b1b8      	cbz	r0, 800553a <sqrt+0x7a>
 800550a:	2301      	movs	r3, #1
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4b18      	ldr	r3, [pc, #96]	; (8005570 <sqrt+0xb0>)
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	9708      	str	r7, [sp, #32]
 8005514:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005518:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800551c:	b9b6      	cbnz	r6, 800554c <sqrt+0x8c>
 800551e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005522:	4668      	mov	r0, sp
 8005524:	f000 fa8a 	bl	8005a3c <matherr>
 8005528:	b1d0      	cbz	r0, 8005560 <sqrt+0xa0>
 800552a:	9b08      	ldr	r3, [sp, #32]
 800552c:	b11b      	cbz	r3, 8005536 <sqrt+0x76>
 800552e:	f7ff ff15 	bl	800535c <__errno>
 8005532:	9b08      	ldr	r3, [sp, #32]
 8005534:	6003      	str	r3, [r0, #0]
 8005536:	ed9d 8b06 	vldr	d8, [sp, #24]
 800553a:	eeb0 0a48 	vmov.f32	s0, s16
 800553e:	eef0 0a68 	vmov.f32	s1, s17
 8005542:	b00b      	add	sp, #44	; 0x2c
 8005544:	ecbd 8b02 	vpop	{d8}
 8005548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	4640      	mov	r0, r8
 8005552:	4649      	mov	r1, r9
 8005554:	f7fb f932 	bl	80007bc <__aeabi_ddiv>
 8005558:	2e02      	cmp	r6, #2
 800555a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800555e:	d1e0      	bne.n	8005522 <sqrt+0x62>
 8005560:	f7ff fefc 	bl	800535c <__errno>
 8005564:	2321      	movs	r3, #33	; 0x21
 8005566:	6003      	str	r3, [r0, #0]
 8005568:	e7df      	b.n	800552a <sqrt+0x6a>
 800556a:	bf00      	nop
 800556c:	20000074 	.word	0x20000074
 8005570:	08005a84 	.word	0x08005a84
 8005574:	00000000 	.word	0x00000000

08005578 <__ieee754_log>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	ec51 0b10 	vmov	r0, r1, d0
 8005580:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005584:	b087      	sub	sp, #28
 8005586:	460d      	mov	r5, r1
 8005588:	da27      	bge.n	80055da <__ieee754_log+0x62>
 800558a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800558e:	4303      	orrs	r3, r0
 8005590:	ee10 2a10 	vmov	r2, s0
 8005594:	d10a      	bne.n	80055ac <__ieee754_log+0x34>
 8005596:	49cc      	ldr	r1, [pc, #816]	; (80058c8 <__ieee754_log+0x350>)
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	2000      	movs	r0, #0
 800559e:	f7fb f90d 	bl	80007bc <__aeabi_ddiv>
 80055a2:	ec41 0b10 	vmov	d0, r0, r1
 80055a6:	b007      	add	sp, #28
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	2900      	cmp	r1, #0
 80055ae:	da05      	bge.n	80055bc <__ieee754_log+0x44>
 80055b0:	460b      	mov	r3, r1
 80055b2:	f7fa fe21 	bl	80001f8 <__aeabi_dsub>
 80055b6:	2200      	movs	r2, #0
 80055b8:	2300      	movs	r3, #0
 80055ba:	e7f0      	b.n	800559e <__ieee754_log+0x26>
 80055bc:	4bc3      	ldr	r3, [pc, #780]	; (80058cc <__ieee754_log+0x354>)
 80055be:	2200      	movs	r2, #0
 80055c0:	f7fa ffd2 	bl	8000568 <__aeabi_dmul>
 80055c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80055c8:	460d      	mov	r5, r1
 80055ca:	4ac1      	ldr	r2, [pc, #772]	; (80058d0 <__ieee754_log+0x358>)
 80055cc:	4295      	cmp	r5, r2
 80055ce:	dd06      	ble.n	80055de <__ieee754_log+0x66>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	f7fa fe12 	bl	80001fc <__adddf3>
 80055d8:	e7e3      	b.n	80055a2 <__ieee754_log+0x2a>
 80055da:	2300      	movs	r3, #0
 80055dc:	e7f5      	b.n	80055ca <__ieee754_log+0x52>
 80055de:	152c      	asrs	r4, r5, #20
 80055e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80055e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80055e8:	441c      	add	r4, r3
 80055ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80055ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80055f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80055fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80055fe:	ea42 0105 	orr.w	r1, r2, r5
 8005602:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005606:	2200      	movs	r2, #0
 8005608:	4bb2      	ldr	r3, [pc, #712]	; (80058d4 <__ieee754_log+0x35c>)
 800560a:	f7fa fdf5 	bl	80001f8 <__aeabi_dsub>
 800560e:	1cab      	adds	r3, r5, #2
 8005610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005614:	2b02      	cmp	r3, #2
 8005616:	4682      	mov	sl, r0
 8005618:	468b      	mov	fp, r1
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	dc53      	bgt.n	80056c8 <__ieee754_log+0x150>
 8005620:	2300      	movs	r3, #0
 8005622:	f7fb fa09 	bl	8000a38 <__aeabi_dcmpeq>
 8005626:	b1d0      	cbz	r0, 800565e <__ieee754_log+0xe6>
 8005628:	2c00      	cmp	r4, #0
 800562a:	f000 8120 	beq.w	800586e <__ieee754_log+0x2f6>
 800562e:	4620      	mov	r0, r4
 8005630:	f7fa ff30 	bl	8000494 <__aeabi_i2d>
 8005634:	a390      	add	r3, pc, #576	; (adr r3, 8005878 <__ieee754_log+0x300>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	4606      	mov	r6, r0
 800563c:	460f      	mov	r7, r1
 800563e:	f7fa ff93 	bl	8000568 <__aeabi_dmul>
 8005642:	a38f      	add	r3, pc, #572	; (adr r3, 8005880 <__ieee754_log+0x308>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	4604      	mov	r4, r0
 800564a:	460d      	mov	r5, r1
 800564c:	4630      	mov	r0, r6
 800564e:	4639      	mov	r1, r7
 8005650:	f7fa ff8a 	bl	8000568 <__aeabi_dmul>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4620      	mov	r0, r4
 800565a:	4629      	mov	r1, r5
 800565c:	e7ba      	b.n	80055d4 <__ieee754_log+0x5c>
 800565e:	a38a      	add	r3, pc, #552	; (adr r3, 8005888 <__ieee754_log+0x310>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	f7fa ff7e 	bl	8000568 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	2000      	movs	r0, #0
 8005672:	4999      	ldr	r1, [pc, #612]	; (80058d8 <__ieee754_log+0x360>)
 8005674:	f7fa fdc0 	bl	80001f8 <__aeabi_dsub>
 8005678:	4652      	mov	r2, sl
 800567a:	4606      	mov	r6, r0
 800567c:	460f      	mov	r7, r1
 800567e:	465b      	mov	r3, fp
 8005680:	4650      	mov	r0, sl
 8005682:	4659      	mov	r1, fp
 8005684:	f7fa ff70 	bl	8000568 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4630      	mov	r0, r6
 800568e:	4639      	mov	r1, r7
 8005690:	f7fa ff6a 	bl	8000568 <__aeabi_dmul>
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	b914      	cbnz	r4, 80056a0 <__ieee754_log+0x128>
 800569a:	4632      	mov	r2, r6
 800569c:	463b      	mov	r3, r7
 800569e:	e0a0      	b.n	80057e2 <__ieee754_log+0x26a>
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7fa fef7 	bl	8000494 <__aeabi_i2d>
 80056a6:	a374      	add	r3, pc, #464	; (adr r3, 8005878 <__ieee754_log+0x300>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	4680      	mov	r8, r0
 80056ae:	4689      	mov	r9, r1
 80056b0:	f7fa ff5a 	bl	8000568 <__aeabi_dmul>
 80056b4:	a372      	add	r3, pc, #456	; (adr r3, 8005880 <__ieee754_log+0x308>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	4604      	mov	r4, r0
 80056bc:	460d      	mov	r5, r1
 80056be:	4640      	mov	r0, r8
 80056c0:	4649      	mov	r1, r9
 80056c2:	f7fa ff51 	bl	8000568 <__aeabi_dmul>
 80056c6:	e0a5      	b.n	8005814 <__ieee754_log+0x29c>
 80056c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056cc:	f7fa fd96 	bl	80001fc <__adddf3>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4650      	mov	r0, sl
 80056d6:	4659      	mov	r1, fp
 80056d8:	f7fb f870 	bl	80007bc <__aeabi_ddiv>
 80056dc:	e9cd 0100 	strd	r0, r1, [sp]
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7fa fed7 	bl	8000494 <__aeabi_i2d>
 80056e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7fa ff39 	bl	8000568 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056fe:	f7fa ff33 	bl	8000568 <__aeabi_dmul>
 8005702:	a363      	add	r3, pc, #396	; (adr r3, 8005890 <__ieee754_log+0x318>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	4680      	mov	r8, r0
 800570a:	4689      	mov	r9, r1
 800570c:	f7fa ff2c 	bl	8000568 <__aeabi_dmul>
 8005710:	a361      	add	r3, pc, #388	; (adr r3, 8005898 <__ieee754_log+0x320>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fa fd71 	bl	80001fc <__adddf3>
 800571a:	4642      	mov	r2, r8
 800571c:	464b      	mov	r3, r9
 800571e:	f7fa ff23 	bl	8000568 <__aeabi_dmul>
 8005722:	a35f      	add	r3, pc, #380	; (adr r3, 80058a0 <__ieee754_log+0x328>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa fd68 	bl	80001fc <__adddf3>
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	f7fa ff1a 	bl	8000568 <__aeabi_dmul>
 8005734:	a35c      	add	r3, pc, #368	; (adr r3, 80058a8 <__ieee754_log+0x330>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fa fd5f 	bl	80001fc <__adddf3>
 800573e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005742:	f7fa ff11 	bl	8000568 <__aeabi_dmul>
 8005746:	a35a      	add	r3, pc, #360	; (adr r3, 80058b0 <__ieee754_log+0x338>)
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005750:	4640      	mov	r0, r8
 8005752:	4649      	mov	r1, r9
 8005754:	f7fa ff08 	bl	8000568 <__aeabi_dmul>
 8005758:	a357      	add	r3, pc, #348	; (adr r3, 80058b8 <__ieee754_log+0x340>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa fd4d 	bl	80001fc <__adddf3>
 8005762:	4642      	mov	r2, r8
 8005764:	464b      	mov	r3, r9
 8005766:	f7fa feff 	bl	8000568 <__aeabi_dmul>
 800576a:	a355      	add	r3, pc, #340	; (adr r3, 80058c0 <__ieee754_log+0x348>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa fd44 	bl	80001fc <__adddf3>
 8005774:	4642      	mov	r2, r8
 8005776:	464b      	mov	r3, r9
 8005778:	f7fa fef6 	bl	8000568 <__aeabi_dmul>
 800577c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800578c:	f7fa fd36 	bl	80001fc <__adddf3>
 8005790:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8005794:	3551      	adds	r5, #81	; 0x51
 8005796:	4335      	orrs	r5, r6
 8005798:	2d00      	cmp	r5, #0
 800579a:	4680      	mov	r8, r0
 800579c:	4689      	mov	r9, r1
 800579e:	dd48      	ble.n	8005832 <__ieee754_log+0x2ba>
 80057a0:	2200      	movs	r2, #0
 80057a2:	4b4d      	ldr	r3, [pc, #308]	; (80058d8 <__ieee754_log+0x360>)
 80057a4:	4650      	mov	r0, sl
 80057a6:	4659      	mov	r1, fp
 80057a8:	f7fa fede 	bl	8000568 <__aeabi_dmul>
 80057ac:	4652      	mov	r2, sl
 80057ae:	465b      	mov	r3, fp
 80057b0:	f7fa feda 	bl	8000568 <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4606      	mov	r6, r0
 80057ba:	460f      	mov	r7, r1
 80057bc:	4640      	mov	r0, r8
 80057be:	4649      	mov	r1, r9
 80057c0:	f7fa fd1c 	bl	80001fc <__adddf3>
 80057c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057c8:	f7fa fece 	bl	8000568 <__aeabi_dmul>
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	b964      	cbnz	r4, 80057ec <__ieee754_log+0x274>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4630      	mov	r0, r6
 80057d8:	4639      	mov	r1, r7
 80057da:	f7fa fd0d 	bl	80001f8 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4650      	mov	r0, sl
 80057e4:	4659      	mov	r1, fp
 80057e6:	f7fa fd07 	bl	80001f8 <__aeabi_dsub>
 80057ea:	e6da      	b.n	80055a2 <__ieee754_log+0x2a>
 80057ec:	a322      	add	r3, pc, #136	; (adr r3, 8005878 <__ieee754_log+0x300>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f6:	f7fa feb7 	bl	8000568 <__aeabi_dmul>
 80057fa:	a321      	add	r3, pc, #132	; (adr r3, 8005880 <__ieee754_log+0x308>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	4604      	mov	r4, r0
 8005802:	460d      	mov	r5, r1
 8005804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005808:	f7fa feae 	bl	8000568 <__aeabi_dmul>
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	f7fa fcf4 	bl	80001fc <__adddf3>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fa fcec 	bl	80001f8 <__aeabi_dsub>
 8005820:	4652      	mov	r2, sl
 8005822:	465b      	mov	r3, fp
 8005824:	f7fa fce8 	bl	80001f8 <__aeabi_dsub>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	e7d9      	b.n	80057e6 <__ieee754_log+0x26e>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4650      	mov	r0, sl
 8005838:	4659      	mov	r1, fp
 800583a:	f7fa fcdd 	bl	80001f8 <__aeabi_dsub>
 800583e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005842:	f7fa fe91 	bl	8000568 <__aeabi_dmul>
 8005846:	4606      	mov	r6, r0
 8005848:	460f      	mov	r7, r1
 800584a:	2c00      	cmp	r4, #0
 800584c:	f43f af25 	beq.w	800569a <__ieee754_log+0x122>
 8005850:	a309      	add	r3, pc, #36	; (adr r3, 8005878 <__ieee754_log+0x300>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585a:	f7fa fe85 	bl	8000568 <__aeabi_dmul>
 800585e:	a308      	add	r3, pc, #32	; (adr r3, 8005880 <__ieee754_log+0x308>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	4604      	mov	r4, r0
 8005866:	460d      	mov	r5, r1
 8005868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586c:	e729      	b.n	80056c2 <__ieee754_log+0x14a>
 800586e:	2000      	movs	r0, #0
 8005870:	2100      	movs	r1, #0
 8005872:	e696      	b.n	80055a2 <__ieee754_log+0x2a>
 8005874:	f3af 8000 	nop.w
 8005878:	fee00000 	.word	0xfee00000
 800587c:	3fe62e42 	.word	0x3fe62e42
 8005880:	35793c76 	.word	0x35793c76
 8005884:	3dea39ef 	.word	0x3dea39ef
 8005888:	55555555 	.word	0x55555555
 800588c:	3fd55555 	.word	0x3fd55555
 8005890:	df3e5244 	.word	0xdf3e5244
 8005894:	3fc2f112 	.word	0x3fc2f112
 8005898:	96cb03de 	.word	0x96cb03de
 800589c:	3fc74664 	.word	0x3fc74664
 80058a0:	94229359 	.word	0x94229359
 80058a4:	3fd24924 	.word	0x3fd24924
 80058a8:	55555593 	.word	0x55555593
 80058ac:	3fe55555 	.word	0x3fe55555
 80058b0:	d078c69f 	.word	0xd078c69f
 80058b4:	3fc39a09 	.word	0x3fc39a09
 80058b8:	1d8e78af 	.word	0x1d8e78af
 80058bc:	3fcc71c5 	.word	0x3fcc71c5
 80058c0:	9997fa04 	.word	0x9997fa04
 80058c4:	3fd99999 	.word	0x3fd99999
 80058c8:	c3500000 	.word	0xc3500000
 80058cc:	43500000 	.word	0x43500000
 80058d0:	7fefffff 	.word	0x7fefffff
 80058d4:	3ff00000 	.word	0x3ff00000
 80058d8:	3fe00000 	.word	0x3fe00000

080058dc <__ieee754_sqrt>:
 80058dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e0:	4955      	ldr	r1, [pc, #340]	; (8005a38 <__ieee754_sqrt+0x15c>)
 80058e2:	ec55 4b10 	vmov	r4, r5, d0
 80058e6:	43a9      	bics	r1, r5
 80058e8:	462b      	mov	r3, r5
 80058ea:	462a      	mov	r2, r5
 80058ec:	d112      	bne.n	8005914 <__ieee754_sqrt+0x38>
 80058ee:	ee10 2a10 	vmov	r2, s0
 80058f2:	ee10 0a10 	vmov	r0, s0
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fa fe36 	bl	8000568 <__aeabi_dmul>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4620      	mov	r0, r4
 8005902:	4629      	mov	r1, r5
 8005904:	f7fa fc7a 	bl	80001fc <__adddf3>
 8005908:	4604      	mov	r4, r0
 800590a:	460d      	mov	r5, r1
 800590c:	ec45 4b10 	vmov	d0, r4, r5
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	2d00      	cmp	r5, #0
 8005916:	ee10 0a10 	vmov	r0, s0
 800591a:	4621      	mov	r1, r4
 800591c:	dc0f      	bgt.n	800593e <__ieee754_sqrt+0x62>
 800591e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005922:	4330      	orrs	r0, r6
 8005924:	d0f2      	beq.n	800590c <__ieee754_sqrt+0x30>
 8005926:	b155      	cbz	r5, 800593e <__ieee754_sqrt+0x62>
 8005928:	ee10 2a10 	vmov	r2, s0
 800592c:	4620      	mov	r0, r4
 800592e:	4629      	mov	r1, r5
 8005930:	f7fa fc62 	bl	80001f8 <__aeabi_dsub>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	f7fa ff40 	bl	80007bc <__aeabi_ddiv>
 800593c:	e7e4      	b.n	8005908 <__ieee754_sqrt+0x2c>
 800593e:	151b      	asrs	r3, r3, #20
 8005940:	d073      	beq.n	8005a2a <__ieee754_sqrt+0x14e>
 8005942:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005946:	07dd      	lsls	r5, r3, #31
 8005948:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800594c:	bf48      	it	mi
 800594e:	0fc8      	lsrmi	r0, r1, #31
 8005950:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005954:	bf44      	itt	mi
 8005956:	0049      	lslmi	r1, r1, #1
 8005958:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800595c:	2500      	movs	r5, #0
 800595e:	1058      	asrs	r0, r3, #1
 8005960:	0fcb      	lsrs	r3, r1, #31
 8005962:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005966:	0049      	lsls	r1, r1, #1
 8005968:	2316      	movs	r3, #22
 800596a:	462c      	mov	r4, r5
 800596c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005970:	19a7      	adds	r7, r4, r6
 8005972:	4297      	cmp	r7, r2
 8005974:	bfde      	ittt	le
 8005976:	19bc      	addle	r4, r7, r6
 8005978:	1bd2      	suble	r2, r2, r7
 800597a:	19ad      	addle	r5, r5, r6
 800597c:	0fcf      	lsrs	r7, r1, #31
 800597e:	3b01      	subs	r3, #1
 8005980:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005984:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005988:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800598c:	d1f0      	bne.n	8005970 <__ieee754_sqrt+0x94>
 800598e:	f04f 0c20 	mov.w	ip, #32
 8005992:	469e      	mov	lr, r3
 8005994:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005998:	42a2      	cmp	r2, r4
 800599a:	eb06 070e 	add.w	r7, r6, lr
 800599e:	dc02      	bgt.n	80059a6 <__ieee754_sqrt+0xca>
 80059a0:	d112      	bne.n	80059c8 <__ieee754_sqrt+0xec>
 80059a2:	428f      	cmp	r7, r1
 80059a4:	d810      	bhi.n	80059c8 <__ieee754_sqrt+0xec>
 80059a6:	2f00      	cmp	r7, #0
 80059a8:	eb07 0e06 	add.w	lr, r7, r6
 80059ac:	da42      	bge.n	8005a34 <__ieee754_sqrt+0x158>
 80059ae:	f1be 0f00 	cmp.w	lr, #0
 80059b2:	db3f      	blt.n	8005a34 <__ieee754_sqrt+0x158>
 80059b4:	f104 0801 	add.w	r8, r4, #1
 80059b8:	1b12      	subs	r2, r2, r4
 80059ba:	428f      	cmp	r7, r1
 80059bc:	bf88      	it	hi
 80059be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80059c2:	1bc9      	subs	r1, r1, r7
 80059c4:	4433      	add	r3, r6
 80059c6:	4644      	mov	r4, r8
 80059c8:	0052      	lsls	r2, r2, #1
 80059ca:	f1bc 0c01 	subs.w	ip, ip, #1
 80059ce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80059d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80059d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80059da:	d1dd      	bne.n	8005998 <__ieee754_sqrt+0xbc>
 80059dc:	430a      	orrs	r2, r1
 80059de:	d006      	beq.n	80059ee <__ieee754_sqrt+0x112>
 80059e0:	1c5c      	adds	r4, r3, #1
 80059e2:	bf13      	iteet	ne
 80059e4:	3301      	addne	r3, #1
 80059e6:	3501      	addeq	r5, #1
 80059e8:	4663      	moveq	r3, ip
 80059ea:	f023 0301 	bicne.w	r3, r3, #1
 80059ee:	106a      	asrs	r2, r5, #1
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	07e9      	lsls	r1, r5, #31
 80059f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80059f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80059fc:	bf48      	it	mi
 80059fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005a02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005a06:	461c      	mov	r4, r3
 8005a08:	e780      	b.n	800590c <__ieee754_sqrt+0x30>
 8005a0a:	0aca      	lsrs	r2, r1, #11
 8005a0c:	3815      	subs	r0, #21
 8005a0e:	0549      	lsls	r1, r1, #21
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d0fa      	beq.n	8005a0a <__ieee754_sqrt+0x12e>
 8005a14:	02d6      	lsls	r6, r2, #11
 8005a16:	d50a      	bpl.n	8005a2e <__ieee754_sqrt+0x152>
 8005a18:	f1c3 0420 	rsb	r4, r3, #32
 8005a1c:	fa21 f404 	lsr.w	r4, r1, r4
 8005a20:	1e5d      	subs	r5, r3, #1
 8005a22:	4099      	lsls	r1, r3
 8005a24:	4322      	orrs	r2, r4
 8005a26:	1b43      	subs	r3, r0, r5
 8005a28:	e78b      	b.n	8005942 <__ieee754_sqrt+0x66>
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	e7f0      	b.n	8005a10 <__ieee754_sqrt+0x134>
 8005a2e:	0052      	lsls	r2, r2, #1
 8005a30:	3301      	adds	r3, #1
 8005a32:	e7ef      	b.n	8005a14 <__ieee754_sqrt+0x138>
 8005a34:	46a0      	mov	r8, r4
 8005a36:	e7bf      	b.n	80059b8 <__ieee754_sqrt+0xdc>
 8005a38:	7ff00000 	.word	0x7ff00000

08005a3c <matherr>:
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	4770      	bx	lr

08005a40 <nan>:
 8005a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005a48 <nan+0x8>
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	00000000 	.word	0x00000000
 8005a4c:	7ff80000 	.word	0x7ff80000

08005a50 <_init>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr

08005a5c <_fini>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr
